// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotStockFilter {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_BaseFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder> internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_AccumulateFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.Builder> internal__static_Qot_StockFilter_AccumulateFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_FinancialFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter, global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.Builder> internal__static_Qot_StockFilter_FinancialFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_PatternFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter, global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.Builder> internal__static_Qot_StockFilter_PatternFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_CustomIndicatorFilter__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.Builder> internal__static_Qot_StockFilter_CustomIndicatorFilter__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_BaseData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder> internal__static_Qot_StockFilter_BaseData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_AccumulateData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.Builder> internal__static_Qot_StockFilter_AccumulateData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_FinancialData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData, global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.Builder> internal__static_Qot_StockFilter_FinancialData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_CustomIndicatorData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData.Builder> internal__static_Qot_StockFilter_CustomIndicatorData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_StockData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.StockData, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder> internal__static_Qot_StockFilter_StockData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.C2S, global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder> internal__static_Qot_StockFilter_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.S2C, global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder> internal__static_Qot_StockFilter_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Request, global::Futu.OpenApi.Pb.QotStockFilter.Request.Builder> internal__static_Qot_StockFilter_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_StockFilter_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Response, global::Futu.OpenApi.Pb.QotStockFilter.Response.Builder> internal__static_Qot_StockFilter_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static QotStockFilter() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVRb3RfU3RvY2tGaWx0ZXIucHJvdG8SD1FvdF9TdG9ja0ZpbHRlchoMQ29t", 
            "bW9uLnByb3RvGhBRb3RfQ29tbW9uLnByb3RvIqABCgpCYXNlRmlsdGVyEhwK", 
            "CWZpZWxkTmFtZRgBIAIoBVIJZmllbGROYW1lEhwKCWZpbHRlck1pbhgCIAEo", 
            "AVIJZmlsdGVyTWluEhwKCWZpbHRlck1heBgDIAEoAVIJZmlsdGVyTWF4Eh4K", 
            "CmlzTm9GaWx0ZXIYBCABKAhSCmlzTm9GaWx0ZXISGAoHc29ydERpchgFIAEo", 
            "BVIHc29ydERpciK6AQoQQWNjdW11bGF0ZUZpbHRlchIcCglmaWVsZE5hbWUY", 
            "ASACKAVSCWZpZWxkTmFtZRIcCglmaWx0ZXJNaW4YAiABKAFSCWZpbHRlck1p", 
            "bhIcCglmaWx0ZXJNYXgYAyABKAFSCWZpbHRlck1heBIeCgppc05vRmlsdGVy", 
            "GAQgASgIUgppc05vRmlsdGVyEhgKB3NvcnREaXIYBSABKAVSB3NvcnREaXIS", 
            "EgoEZGF5cxgGIAIoBVIEZGF5cyK/AQoPRmluYW5jaWFsRmlsdGVyEhwKCWZp", 
            "ZWxkTmFtZRgBIAIoBVIJZmllbGROYW1lEhwKCWZpbHRlck1pbhgCIAEoAVIJ", 
            "ZmlsdGVyTWluEhwKCWZpbHRlck1heBgDIAEoAVIJZmlsdGVyTWF4Eh4KCmlz", 
            "Tm9GaWx0ZXIYBCABKAhSCmlzTm9GaWx0ZXISGAoHc29ydERpchgFIAEoBVIH", 
            "c29ydERpchIYCgdxdWFydGVyGAYgAigFUgdxdWFydGVyImUKDVBhdHRlcm5G", 
            "aWx0ZXISHAoJZmllbGROYW1lGAEgAigFUglmaWVsZE5hbWUSFgoGa2xUeXBl", 
            "GAIgAigFUgZrbFR5cGUSHgoKaXNOb0ZpbHRlchgDIAEoCFIKaXNOb0ZpbHRl", 
            "ciLtAQoVQ3VzdG9tSW5kaWNhdG9yRmlsdGVyEiYKDmZpcnN0RmllbGROYW1l", 
            "GAEgAigFUg5maXJzdEZpZWxkTmFtZRIoCg9zZWNvbmRGaWVsZE5hbWUYAiAC", 
            "KAVSD3NlY29uZEZpZWxkTmFtZRIqChByZWxhdGl2ZVBvc2l0aW9uGAMgAigF", 
            "UhByZWxhdGl2ZVBvc2l0aW9uEh4KCmZpZWxkVmFsdWUYBCABKAFSCmZpZWxk", 
            "VmFsdWUSFgoGa2xUeXBlGAUgAigFUgZrbFR5cGUSHgoKaXNOb0ZpbHRlchgG", 
            "IAEoCFIKaXNOb0ZpbHRlciI+CghCYXNlRGF0YRIcCglmaWVsZE5hbWUYASAC", 
            "KAVSCWZpZWxkTmFtZRIUCgV2YWx1ZRgCIAIoAVIFdmFsdWUiWAoOQWNjdW11", 
            "bGF0ZURhdGESHAoJZmllbGROYW1lGAEgAigFUglmaWVsZE5hbWUSFAoFdmFs", 
            "dWUYAiACKAFSBXZhbHVlEhIKBGRheXMYAyACKAVSBGRheXMiXQoNRmluYW5j", 
            "aWFsRGF0YRIcCglmaWVsZE5hbWUYASACKAVSCWZpZWxkTmFtZRIUCgV2YWx1", 
            "ZRgCIAIoAVIFdmFsdWUSGAoHcXVhcnRlchgDIAIoBVIHcXVhcnRlciJhChND", 
            "dXN0b21JbmRpY2F0b3JEYXRhEhwKCWZpZWxkTmFtZRgBIAIoBVIJZmllbGRO", 
            "YW1lEhQKBXZhbHVlGAIgAigBUgV2YWx1ZRIWCgZrbFR5cGUYAyACKAVSBmts", 
            "VHlwZSKvAgoJU3RvY2tEYXRhEjAKCHNlY3VyaXR5GAEgAigLMhQuUW90X0Nv", 
            "bW1vbi5TZWN1cml0eVIIc2VjdXJpdHkSEgoEbmFtZRgCIAIoCVIEbmFtZRI9", 
            "CgxiYXNlRGF0YUxpc3QYAyADKAsyGS5Rb3RfU3RvY2tGaWx0ZXIuQmFzZURh", 
            "dGFSDGJhc2VEYXRhTGlzdBJPChJhY2N1bXVsYXRlRGF0YUxpc3QYBCADKAsy", 
            "Hy5Rb3RfU3RvY2tGaWx0ZXIuQWNjdW11bGF0ZURhdGFSEmFjY3VtdWxhdGVE", 
            "YXRhTGlzdBJMChFmaW5hbmNpYWxEYXRhTGlzdBgFIAMoCzIeLlFvdF9TdG9j", 
            "a0ZpbHRlci5GaW5hbmNpYWxEYXRhUhFmaW5hbmNpYWxEYXRhTGlzdCKVBAoD", 
            "QzJTEhQKBWJlZ2luGAEgAigFUgViZWdpbhIQCgNudW0YAiACKAVSA251bRIW", 
            "CgZtYXJrZXQYAyACKAVSBm1hcmtldBIqCgVwbGF0ZRgEIAEoCzIULlFvdF9D", 
            "b21tb24uU2VjdXJpdHlSBXBsYXRlEkMKDmJhc2VGaWx0ZXJMaXN0GAUgAygL", 
            "MhsuUW90X1N0b2NrRmlsdGVyLkJhc2VGaWx0ZXJSDmJhc2VGaWx0ZXJMaXN0", 
            "ElUKFGFjY3VtdWxhdGVGaWx0ZXJMaXN0GAYgAygLMiEuUW90X1N0b2NrRmls", 
            "dGVyLkFjY3VtdWxhdGVGaWx0ZXJSFGFjY3VtdWxhdGVGaWx0ZXJMaXN0ElIK", 
            "E2ZpbmFuY2lhbEZpbHRlckxpc3QYByADKAsyIC5Rb3RfU3RvY2tGaWx0ZXIu", 
            "RmluYW5jaWFsRmlsdGVyUhNmaW5hbmNpYWxGaWx0ZXJMaXN0EkwKEXBhdHRl", 
            "cm5GaWx0ZXJMaXN0GAggAygLMh4uUW90X1N0b2NrRmlsdGVyLlBhdHRlcm5G", 
            "aWx0ZXJSEXBhdHRlcm5GaWx0ZXJMaXN0EmQKGWN1c3RvbUluZGljYXRvckZp", 
            "bHRlckxpc3QYCSADKAsyJi5Rb3RfU3RvY2tGaWx0ZXIuQ3VzdG9tSW5kaWNh", 
            "dG9yRmlsdGVyUhljdXN0b21JbmRpY2F0b3JGaWx0ZXJMaXN0InUKA1MyQxIa", 
            "CghsYXN0UGFnZRgBIAIoCFIIbGFzdFBhZ2USGgoIYWxsQ291bnQYAiACKAVS", 
            "CGFsbENvdW50EjYKCGRhdGFMaXN0GAMgAygLMhouUW90X1N0b2NrRmlsdGVy", 
            "LlN0b2NrRGF0YVIIZGF0YUxpc3QiMQoHUmVxdWVzdBImCgNjMnMYASACKAsy", 
            "FC5Rb3RfU3RvY2tGaWx0ZXIuQzJTUgNjMnMihAEKCFJlc3BvbnNlEh4KB3Jl", 
            "dFR5cGUYASACKAU6BC00MDBSB3JldFR5cGUSFgoGcmV0TXNnGAIgASgJUgZy", 
            "ZXRNc2cSGAoHZXJyQ29kZRgDIAEoBVIHZXJyQ29kZRImCgNzMmMYBCABKAsy", 
            "FC5Rb3RfU3RvY2tGaWx0ZXIuUzJDUgNzMmMqngUKClN0b2NrRmllbGQSFgoS", 
            "U3RvY2tGaWVsZF9Vbmtub3duEAASGAoUU3RvY2tGaWVsZF9TdG9ja0NvZGUQ", 
            "ARIYChRTdG9ja0ZpZWxkX1N0b2NrTmFtZRACEhcKE1N0b2NrRmllbGRfQ3Vy", 
            "UHJpY2UQAxIsCihTdG9ja0ZpZWxkX0N1clByaWNlVG9IaWdoZXN0NTJXZWVr", 
            "c1JhdGlvEAQSKwonU3RvY2tGaWVsZF9DdXJQcmljZVRvTG93ZXN0NTJXZWVr", 
            "c1JhdGlvEAUSLQopU3RvY2tGaWVsZF9IaWdoUHJpY2VUb0hpZ2hlc3Q1Mldl", 
            "ZWtzUmF0aW8QBhIrCidTdG9ja0ZpZWxkX0xvd1ByaWNlVG9Mb3dlc3Q1Mldl", 
            "ZWtzUmF0aW8QBxIaChZTdG9ja0ZpZWxkX1ZvbHVtZVJhdGlvEAgSGgoWU3Rv", 
            "Y2tGaWVsZF9CaWRBc2tSYXRpbxAJEhcKE1N0b2NrRmllbGRfTG90UHJpY2UQ", 
            "ChIYChRTdG9ja0ZpZWxkX01hcmtldFZhbBALEhcKE1N0b2NrRmllbGRfUGVB", 
            "bm51YWwQDBIUChBTdG9ja0ZpZWxkX1BlVFRNEA0SFQoRU3RvY2tGaWVsZF9Q", 
            "YlJhdGUQDhIdChlTdG9ja0ZpZWxkX0NoYW5nZVJhdGU1bWluEA8SIgoeU3Rv", 
            "Y2tGaWVsZF9DaGFuZ2VSYXRlQmVnaW5ZZWFyEBASFAoQU3RvY2tGaWVsZF9Q", 
            "U1RUTRAREhUKEVN0b2NrRmllbGRfUENGVFRNEBISGQoVU3RvY2tGaWVsZF9U", 
            "b3RhbFNoYXJlEBMSGQoVU3RvY2tGaWVsZF9GbG9hdFNoYXJlEBQSHQoZU3Rv", 
            "Y2tGaWVsZF9GbG9hdE1hcmtldFZhbBAVKskBCg9BY2N1bXVsYXRlRmllbGQS", 
            "GwoXQWNjdW11bGF0ZUZpZWxkX1Vua25vd24QABIeChpBY2N1bXVsYXRlRmll", 
            "bGRfQ2hhbmdlUmF0ZRABEh0KGUFjY3VtdWxhdGVGaWVsZF9BbXBsaXR1ZGUQ", 
            "AhIaChZBY2N1bXVsYXRlRmllbGRfVm9sdW1lEAMSHAoYQWNjdW11bGF0ZUZp", 
            "ZWxkX1R1cm5vdmVyEAQSIAocQWNjdW11bGF0ZUZpZWxkX1R1cm5vdmVyUmF0", 
            "ZRAFKssNCg5GaW5hbmNpYWxGaWVsZBIaChZGaW5hbmNpYWxGaWVsZF9Vbmtu", 
            "b3duEAASHAoYRmluYW5jaWFsRmllbGRfTmV0UHJvZml0EAESIgoeRmluYW5j", 
            "aWFsRmllbGRfTmV0UHJvZml0R3Jvd3RoEAISIAocRmluYW5jaWFsRmllbGRf", 
            "U3VtT2ZCdXNpbmVzcxADEiYKIkZpbmFuY2lhbEZpZWxkX1N1bU9mQnVzaW5l", 
            "c3NHcm93dGgQBBIgChxGaW5hbmNpYWxGaWVsZF9OZXRQcm9maXRSYXRlEAUS", 
            "IgoeRmluYW5jaWFsRmllbGRfR3Jvc3NQcm9maXRSYXRlEAYSIQodRmluYW5j", 
            "aWFsRmllbGRfRGVidEFzc2V0c1JhdGUQBxIlCiFGaW5hbmNpYWxGaWVsZF9S", 
            "ZXR1cm5PbkVxdWl0eVJhdGUQCBIXChNGaW5hbmNpYWxGaWVsZF9ST0lDEAkS", 
            "GQoVRmluYW5jaWFsRmllbGRfUk9BVFRNEAoSGgoWRmluYW5jaWFsRmllbGRf", 
            "RUJJVFRUTRALEhkKFUZpbmFuY2lhbEZpZWxkX0VCSVREQRAMEiUKIUZpbmFu", 
            "Y2lhbEZpZWxkX09wZXJhdGluZ01hcmdpblRUTRANEh0KGUZpbmFuY2lhbEZp", 
            "ZWxkX0VCSVRNYXJnaW4QDhIfChtGaW5hbmNpYWxGaWVsZF9FQklUREFNYXJn", 
            "aW4QDxIkCiBGaW5hbmNpYWxGaWVsZF9GaW5hbmNpYWxDb3N0UmF0ZRAQEiUK", 
            "IUZpbmFuY2lhbEZpZWxkX09wZXJhdGluZ1Byb2ZpdFRUTRAREioKJkZpbmFu", 
            "Y2lhbEZpZWxkX1NoYXJlaG9sZGVyTmV0UHJvZml0VFRNEBISKAokRmluYW5j", 
            "aWFsRmllbGRfTmV0UHJvZml0Q2FzaENvdmVyVFRNEBMSHwobRmluYW5jaWFs", 
            "RmllbGRfQ3VycmVudFJhdGlvEBQSHQoZRmluYW5jaWFsRmllbGRfUXVpY2tS", 
            "YXRpbxAVEiQKIEZpbmFuY2lhbEZpZWxkX0N1cnJlbnRBc3NldFJhdGlvEBYS", 
            "IwofRmluYW5jaWFsRmllbGRfQ3VycmVudERlYnRSYXRpbxAXEiMKH0ZpbmFu", 
            "Y2lhbEZpZWxkX0VxdWl0eU11bHRpcGxpZXIQGBIgChxGaW5hbmNpYWxGaWVs", 
            "ZF9Qcm9wZXJ0eVJhdGlvEBkSKQolRmluYW5jaWFsRmllbGRfQ2FzaEFuZENh", 
            "c2hFcXVpdmFsZW50cxAaEiUKIUZpbmFuY2lhbEZpZWxkX1RvdGFsQXNzZXRU", 
            "dXJub3ZlchAbEiUKIUZpbmFuY2lhbEZpZWxkX0ZpeGVkQXNzZXRUdXJub3Zl", 
            "chAcEiQKIEZpbmFuY2lhbEZpZWxkX0ludmVudG9yeVR1cm5vdmVyEB0SJwoj", 
            "RmluYW5jaWFsRmllbGRfT3BlcmF0aW5nQ2FzaEZsb3dUVE0QHhIlCiFGaW5h", 
            "bmNpYWxGaWVsZF9BY2NvdW50c1JlY2VpdmFibGUQHxIhCh1GaW5hbmNpYWxG", 
            "aWVsZF9FQklUR3Jvd3RoUmF0ZRAgEiwKKEZpbmFuY2lhbEZpZWxkX09wZXJh", 
            "dGluZ1Byb2ZpdEdyb3d0aFJhdGUQIRIoCiRGaW5hbmNpYWxGaWVsZF9Ub3Rh", 
            "bEFzc2V0c0dyb3d0aFJhdGUQIhIxCi1GaW5hbmNpYWxGaWVsZF9Qcm9maXRU", 
            "b1NoYXJlaG9sZGVyc0dyb3d0aFJhdGUQIxIsCihGaW5hbmNpYWxGaWVsZF9Q", 
            "cm9maXRCZWZvcmVUYXhHcm93dGhSYXRlECQSIAocRmluYW5jaWFsRmllbGRf", 
            "RVBTR3Jvd3RoUmF0ZRAlEiAKHEZpbmFuY2lhbEZpZWxkX1JPRUdyb3d0aFJh", 
            "dGUQJhIhCh1GaW5hbmNpYWxGaWVsZF9ST0lDR3Jvd3RoUmF0ZRAnEiEKHUZp", 
            "bmFuY2lhbEZpZWxkX05PQ0ZHcm93dGhSYXRlECgSKQolRmluYW5jaWFsRmll", 
            "bGRfTk9DRlBlclNoYXJlR3Jvd3RoUmF0ZRApEiwKKEZpbmFuY2lhbEZpZWxk", 
            "X09wZXJhdGluZ1JldmVudWVDYXNoQ292ZXIQKhIvCitGaW5hbmNpYWxGaWVs", 
            "ZF9PcGVyYXRpbmdQcm9maXRUb1RvdGFsUHJvZml0ECsSGwoXRmluYW5jaWFs", 
            "RmllbGRfQmFzaWNFUFMQLBIdChlGaW5hbmNpYWxGaWVsZF9EaWx1dGVkRVBT", 
            "EC0SHwobRmluYW5jaWFsRmllbGRfTk9DRlBlclNoYXJlEC4q0QQKFEN1c3Rv", 
            "bUluZGljYXRvckZpZWxkEiAKHEN1c3RvbUluZGljYXRvckZpZWxkX1Vua25v", 
            "d24QABIeChpDdXN0b21JbmRpY2F0b3JGaWVsZF9QcmljZRABEhwKGEN1c3Rv", 
            "bUluZGljYXRvckZpZWxkX01BNRACEh0KGUN1c3RvbUluZGljYXRvckZpZWxk", 
            "X01BMTAQAxIdChlDdXN0b21JbmRpY2F0b3JGaWVsZF9NQTIwEAQSHQoZQ3Vz", 
            "dG9tSW5kaWNhdG9yRmllbGRfTUEzMBAFEh0KGUN1c3RvbUluZGljYXRvckZp", 
            "ZWxkX01BNjAQBhIeChpDdXN0b21JbmRpY2F0b3JGaWVsZF9NQTEyMBAHEh4K", 
            "GkN1c3RvbUluZGljYXRvckZpZWxkX01BMjUwEAgSHAoYQ3VzdG9tSW5kaWNh", 
            "dG9yRmllbGRfUlNJEAkSHQoZQ3VzdG9tSW5kaWNhdG9yRmllbGRfRU1BNRAK", 
            "Eh4KGkN1c3RvbUluZGljYXRvckZpZWxkX0VNQTEwEAsSHgoaQ3VzdG9tSW5k", 
            "aWNhdG9yRmllbGRfRU1BMjAQDBIeChpDdXN0b21JbmRpY2F0b3JGaWVsZF9F", 
            "TUEzMBANEh4KGkN1c3RvbUluZGljYXRvckZpZWxkX0VNQTYwEA4SHwobQ3Vz", 
            "dG9tSW5kaWNhdG9yRmllbGRfRU1BMTIwEA8SHwobQ3VzdG9tSW5kaWNhdG9y", 
            "RmllbGRfRU1BMjUwEBASHgoaQ3VzdG9tSW5kaWNhdG9yRmllbGRfVmFsdWUQ", 
            "ESrsBQoMUGF0dGVybkZpZWxkEhgKFFBhdHRlcm5GaWVsZF9Vbmtub3duEAAS", 
            "IAocUGF0dGVybkZpZWxkX01BQWxpZ25tZW50TG9uZxABEiEKHVBhdHRlcm5G", 
            "aWVsZF9NQUFsaWdubWVudFNob3J0EAISIQodUGF0dGVybkZpZWxkX0VNQUFs", 
            "aWdubWVudExvbmcQAxIiCh5QYXR0ZXJuRmllbGRfRU1BQWxpZ25tZW50U2hv", 
            "cnQQBBIgChxQYXR0ZXJuRmllbGRfUlNJR29sZENyb3NzTG93EAUSIgoeUGF0", 
            "dGVybkZpZWxkX1JTSURlYXRoQ3Jvc3NIaWdoEAYSIQodUGF0dGVybkZpZWxk", 
            "X1JTSVRvcERpdmVyZ2VuY2UQBxIkCiBQYXR0ZXJuRmllbGRfUlNJQm90dG9t", 
            "RGl2ZXJnZW5jZRAIEiAKHFBhdHRlcm5GaWVsZF9LREpHb2xkQ3Jvc3NMb3cQ", 
            "CRIiCh5QYXR0ZXJuRmllbGRfS0RKRGVhdGhDcm9zc0hpZ2gQChIhCh1QYXR0", 
            "ZXJuRmllbGRfS0RKVG9wRGl2ZXJnZW5jZRALEiQKIFBhdHRlcm5GaWVsZF9L", 
            "REpCb3R0b21EaXZlcmdlbmNlEAwSIQodUGF0dGVybkZpZWxkX01BQ0RHb2xk", 
            "Q3Jvc3NMb3cQDRIjCh9QYXR0ZXJuRmllbGRfTUFDRERlYXRoQ3Jvc3NIaWdo", 
            "EA4SIgoeUGF0dGVybkZpZWxkX01BQ0RUb3BEaXZlcmdlbmNlEA8SJQohUGF0", 
            "dGVybkZpZWxkX01BQ0RCb3R0b21EaXZlcmdlbmNlEBASHwobUGF0dGVybkZp", 
            "ZWxkX0JPTExCcmVha1VwcGVyEBESGgoWUGF0dGVybkZpZWxkX0JPTExMb3dl", 
            "chASEiIKHlBhdHRlcm5GaWVsZF9CT0xMQ3Jvc3NNaWRkbGVVcBATEiQKIFBh", 
            "dHRlcm5GaWVsZF9CT0xMQ3Jvc3NNaWRkbGVEb3duEBQq2QEKEEZpbmFuY2lh", 
            "bFF1YXJ0ZXISHAoYRmluYW5jaWFsUXVhcnRlcl9Vbmtub3duEAASGwoXRmlu", 
            "YW5jaWFsUXVhcnRlcl9Bbm51YWwQARIhCh1GaW5hbmNpYWxRdWFydGVyX0Zp", 
            "cnN0UXVhcnRlchACEhwKGEZpbmFuY2lhbFF1YXJ0ZXJfSW50ZXJpbRADEiEK", 
            "HUZpbmFuY2lhbFF1YXJ0ZXJfVGhpcmRRdWFydGVyEAQSJgoiRmluYW5jaWFs", 
            "UXVhcnRlcl9Nb3N0UmVjZW50UXVhcnRlchAFKqQBChBSZWxhdGl2ZVBvc2l0", 
            "aW9uEhwKGFJlbGF0aXZlUG9zaXRpb25fVW5rbm93bhAAEhkKFVJlbGF0aXZl", 
            "UG9zaXRpb25fTW9yZRABEhkKFVJlbGF0aXZlUG9zaXRpb25fTGVzcxACEhwK", 
            "GFJlbGF0aXZlUG9zaXRpb25fQ3Jvc3NVcBADEh4KGlJlbGF0aXZlUG9zaXRp", 
            "b25fQ3Jvc3NEb3duEAQqQgoHU29ydERpchIOCgpTb3J0RGlyX05vEAASEgoO", 
            "U29ydERpcl9Bc2NlbmQQARITCg9Tb3J0RGlyX0Rlc2NlbmQQAkJFChNjb20u", 
            "ZnV0dS5vcGVuYXBpLnBiWi5naXRodWIuY29tL2Z1dHVvcGVuL2Z0YXBpNGdv", 
          "L3BiL3FvdHN0b2NrZmlsdGVy"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_StockFilter_BaseFilter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder>(internal__static_Qot_StockFilter_BaseFilter__Descriptor,
                new string[] { "FieldName", "FilterMin", "FilterMax", "IsNoFilter", "SortDir", });
        internal__static_Qot_StockFilter_AccumulateFilter__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_StockFilter_AccumulateFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.Builder>(internal__static_Qot_StockFilter_AccumulateFilter__Descriptor,
                new string[] { "FieldName", "FilterMin", "FilterMax", "IsNoFilter", "SortDir", "Days", });
        internal__static_Qot_StockFilter_FinancialFilter__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_StockFilter_FinancialFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter, global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.Builder>(internal__static_Qot_StockFilter_FinancialFilter__Descriptor,
                new string[] { "FieldName", "FilterMin", "FilterMax", "IsNoFilter", "SortDir", "Quarter", });
        internal__static_Qot_StockFilter_PatternFilter__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_StockFilter_PatternFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter, global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.Builder>(internal__static_Qot_StockFilter_PatternFilter__Descriptor,
                new string[] { "FieldName", "KlType", "IsNoFilter", });
        internal__static_Qot_StockFilter_CustomIndicatorFilter__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_StockFilter_CustomIndicatorFilter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.Builder>(internal__static_Qot_StockFilter_CustomIndicatorFilter__Descriptor,
                new string[] { "FirstFieldName", "SecondFieldName", "RelativePosition", "FieldValue", "KlType", "IsNoFilter", });
        internal__static_Qot_StockFilter_BaseData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_StockFilter_BaseData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder>(internal__static_Qot_StockFilter_BaseData__Descriptor,
                new string[] { "FieldName", "Value", });
        internal__static_Qot_StockFilter_AccumulateData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Qot_StockFilter_AccumulateData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.Builder>(internal__static_Qot_StockFilter_AccumulateData__Descriptor,
                new string[] { "FieldName", "Value", "Days", });
        internal__static_Qot_StockFilter_FinancialData__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Qot_StockFilter_FinancialData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData, global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.Builder>(internal__static_Qot_StockFilter_FinancialData__Descriptor,
                new string[] { "FieldName", "Value", "Quarter", });
        internal__static_Qot_StockFilter_CustomIndicatorData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Qot_StockFilter_CustomIndicatorData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData.Builder>(internal__static_Qot_StockFilter_CustomIndicatorData__Descriptor,
                new string[] { "FieldName", "Value", "KlType", });
        internal__static_Qot_StockFilter_StockData__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Qot_StockFilter_StockData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.StockData, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder>(internal__static_Qot_StockFilter_StockData__Descriptor,
                new string[] { "Security", "Name", "BaseDataList", "AccumulateDataList", "FinancialDataList", });
        internal__static_Qot_StockFilter_C2S__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Qot_StockFilter_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.C2S, global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder>(internal__static_Qot_StockFilter_C2S__Descriptor,
                new string[] { "Begin", "Num", "Market", "Plate", "BaseFilterList", "AccumulateFilterList", "FinancialFilterList", "PatternFilterList", "CustomIndicatorFilterList", });
        internal__static_Qot_StockFilter_S2C__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Qot_StockFilter_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.S2C, global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder>(internal__static_Qot_StockFilter_S2C__Descriptor,
                new string[] { "LastPage", "AllCount", "DataList", });
        internal__static_Qot_StockFilter_Request__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Qot_StockFilter_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Request, global::Futu.OpenApi.Pb.QotStockFilter.Request.Builder>(internal__static_Qot_StockFilter_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_StockFilter_Response__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Qot_StockFilter_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotStockFilter.Response, global::Futu.OpenApi.Pb.QotStockFilter.Response.Builder>(internal__static_Qot_StockFilter_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          global::Futu.OpenApi.Pb.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum StockField {
      StockField_Unknown = 0,
      StockField_StockCode = 1,
      StockField_StockName = 2,
      StockField_CurPrice = 3,
      StockField_CurPriceToHighest52WeeksRatio = 4,
      StockField_CurPriceToLowest52WeeksRatio = 5,
      StockField_HighPriceToHighest52WeeksRatio = 6,
      StockField_LowPriceToLowest52WeeksRatio = 7,
      StockField_VolumeRatio = 8,
      StockField_BidAskRatio = 9,
      StockField_LotPrice = 10,
      StockField_MarketVal = 11,
      StockField_PeAnnual = 12,
      StockField_PeTTM = 13,
      StockField_PbRate = 14,
      StockField_ChangeRate5min = 15,
      StockField_ChangeRateBeginYear = 16,
      StockField_PSTTM = 17,
      StockField_PCFTTM = 18,
      StockField_TotalShare = 19,
      StockField_FloatShare = 20,
      StockField_FloatMarketVal = 21,
    }
    
    public enum AccumulateField {
      AccumulateField_Unknown = 0,
      AccumulateField_ChangeRate = 1,
      AccumulateField_Amplitude = 2,
      AccumulateField_Volume = 3,
      AccumulateField_Turnover = 4,
      AccumulateField_TurnoverRate = 5,
    }
    
    public enum FinancialField {
      FinancialField_Unknown = 0,
      FinancialField_NetProfit = 1,
      FinancialField_NetProfitGrowth = 2,
      FinancialField_SumOfBusiness = 3,
      FinancialField_SumOfBusinessGrowth = 4,
      FinancialField_NetProfitRate = 5,
      FinancialField_GrossProfitRate = 6,
      FinancialField_DebtAssetsRate = 7,
      FinancialField_ReturnOnEquityRate = 8,
      FinancialField_ROIC = 9,
      FinancialField_ROATTM = 10,
      FinancialField_EBITTTM = 11,
      FinancialField_EBITDA = 12,
      FinancialField_OperatingMarginTTM = 13,
      FinancialField_EBITMargin = 14,
      FinancialField_EBITDAMargin = 15,
      FinancialField_FinancialCostRate = 16,
      FinancialField_OperatingProfitTTM = 17,
      FinancialField_ShareholderNetProfitTTM = 18,
      FinancialField_NetProfitCashCoverTTM = 19,
      FinancialField_CurrentRatio = 20,
      FinancialField_QuickRatio = 21,
      FinancialField_CurrentAssetRatio = 22,
      FinancialField_CurrentDebtRatio = 23,
      FinancialField_EquityMultiplier = 24,
      FinancialField_PropertyRatio = 25,
      FinancialField_CashAndCashEquivalents = 26,
      FinancialField_TotalAssetTurnover = 27,
      FinancialField_FixedAssetTurnover = 28,
      FinancialField_InventoryTurnover = 29,
      FinancialField_OperatingCashFlowTTM = 30,
      FinancialField_AccountsReceivable = 31,
      FinancialField_EBITGrowthRate = 32,
      FinancialField_OperatingProfitGrowthRate = 33,
      FinancialField_TotalAssetsGrowthRate = 34,
      FinancialField_ProfitToShareholdersGrowthRate = 35,
      FinancialField_ProfitBeforeTaxGrowthRate = 36,
      FinancialField_EPSGrowthRate = 37,
      FinancialField_ROEGrowthRate = 38,
      FinancialField_ROICGrowthRate = 39,
      FinancialField_NOCFGrowthRate = 40,
      FinancialField_NOCFPerShareGrowthRate = 41,
      FinancialField_OperatingRevenueCashCover = 42,
      FinancialField_OperatingProfitToTotalProfit = 43,
      FinancialField_BasicEPS = 44,
      FinancialField_DilutedEPS = 45,
      FinancialField_NOCFPerShare = 46,
    }
    
    public enum CustomIndicatorField {
      CustomIndicatorField_Unknown = 0,
      CustomIndicatorField_Price = 1,
      CustomIndicatorField_MA5 = 2,
      CustomIndicatorField_MA10 = 3,
      CustomIndicatorField_MA20 = 4,
      CustomIndicatorField_MA30 = 5,
      CustomIndicatorField_MA60 = 6,
      CustomIndicatorField_MA120 = 7,
      CustomIndicatorField_MA250 = 8,
      CustomIndicatorField_RSI = 9,
      CustomIndicatorField_EMA5 = 10,
      CustomIndicatorField_EMA10 = 11,
      CustomIndicatorField_EMA20 = 12,
      CustomIndicatorField_EMA30 = 13,
      CustomIndicatorField_EMA60 = 14,
      CustomIndicatorField_EMA120 = 15,
      CustomIndicatorField_EMA250 = 16,
      CustomIndicatorField_Value = 17,
    }
    
    public enum PatternField {
      PatternField_Unknown = 0,
      PatternField_MAAlignmentLong = 1,
      PatternField_MAAlignmentShort = 2,
      PatternField_EMAAlignmentLong = 3,
      PatternField_EMAAlignmentShort = 4,
      PatternField_RSIGoldCrossLow = 5,
      PatternField_RSIDeathCrossHigh = 6,
      PatternField_RSITopDivergence = 7,
      PatternField_RSIBottomDivergence = 8,
      PatternField_KDJGoldCrossLow = 9,
      PatternField_KDJDeathCrossHigh = 10,
      PatternField_KDJTopDivergence = 11,
      PatternField_KDJBottomDivergence = 12,
      PatternField_MACDGoldCrossLow = 13,
      PatternField_MACDDeathCrossHigh = 14,
      PatternField_MACDTopDivergence = 15,
      PatternField_MACDBottomDivergence = 16,
      PatternField_BOLLBreakUpper = 17,
      PatternField_BOLLLower = 18,
      PatternField_BOLLCrossMiddleUp = 19,
      PatternField_BOLLCrossMiddleDown = 20,
    }
    
    public enum FinancialQuarter {
      FinancialQuarter_Unknown = 0,
      FinancialQuarter_Annual = 1,
      FinancialQuarter_FirstQuarter = 2,
      FinancialQuarter_Interim = 3,
      FinancialQuarter_ThirdQuarter = 4,
      FinancialQuarter_MostRecentQuarter = 5,
    }
    
    public enum RelativePosition {
      RelativePosition_Unknown = 0,
      RelativePosition_More = 1,
      RelativePosition_Less = 2,
      RelativePosition_CrossUp = 3,
      RelativePosition_CrossDown = 4,
    }
    
    public enum SortDir {
      SortDir_No = 0,
      SortDir_Ascend = 1,
      SortDir_Descend = 2,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseFilter : pb::GeneratedMessage<BaseFilter, BaseFilter.Builder> {
      private BaseFilter() { }
      private static readonly BaseFilter defaultInstance = new BaseFilter().MakeReadOnly();
      private static readonly string[] _baseFilterFieldNames = new string[] { "fieldName", "filterMax", "filterMin", "isNoFilter", "sortDir" };
      private static readonly uint[] _baseFilterFieldTags = new uint[] { 8, 25, 17, 32, 40 };
      public static BaseFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override BaseFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override BaseFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<BaseFilter, BaseFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseFilter__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int FilterMinFieldNumber = 2;
      private bool hasFilterMin;
      private double filterMin_;
      public bool HasFilterMin {
        get { return hasFilterMin; }
      }
      public double FilterMin {
        get { return filterMin_; }
      }
      
      public const int FilterMaxFieldNumber = 3;
      private bool hasFilterMax;
      private double filterMax_;
      public bool HasFilterMax {
        get { return hasFilterMax; }
      }
      public double FilterMax {
        get { return filterMax_; }
      }
      
      public const int IsNoFilterFieldNumber = 4;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public const int SortDirFieldNumber = 5;
      private bool hasSortDir;
      private int sortDir_;
      public bool HasSortDir {
        get { return hasSortDir; }
      }
      public int SortDir {
        get { return sortDir_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _baseFilterFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasFilterMin) {
          output.WriteDouble(2, field_names[2], FilterMin);
        }
        if (hasFilterMax) {
          output.WriteDouble(3, field_names[1], FilterMax);
        }
        if (hasIsNoFilter) {
          output.WriteBool(4, field_names[3], IsNoFilter);
        }
        if (hasSortDir) {
          output.WriteInt32(5, field_names[4], SortDir);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasFilterMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, FilterMin);
        }
        if (hasFilterMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, FilterMax);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsNoFilter);
        }
        if (hasSortDir) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SortDir);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static BaseFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static BaseFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static BaseFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private BaseFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(BaseFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<BaseFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(BaseFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private BaseFilter result;
        
        private BaseFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            BaseFilter original = result;
            result = new BaseFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override BaseFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Descriptor; }
        }
        
        public override BaseFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance; }
        }
        
        public override BaseFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is BaseFilter) {
            return MergeFrom((BaseFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(BaseFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasFilterMin) {
            FilterMin = other.FilterMin;
          }
          if (other.HasFilterMax) {
            FilterMax = other.FilterMax;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          if (other.HasSortDir) {
            SortDir = other.SortDir;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_baseFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _baseFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasFilterMin = input.ReadDouble(ref result.filterMin_);
                break;
              }
              case 25: {
                result.hasFilterMax = input.ReadDouble(ref result.filterMax_);
                break;
              }
              case 32: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
              case 40: {
                result.hasSortDir = input.ReadInt32(ref result.sortDir_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasFilterMin {
          get { return result.hasFilterMin; }
        }
        public double FilterMin {
          get { return result.FilterMin; }
          set { SetFilterMin(value); }
        }
        public Builder SetFilterMin(double value) {
          PrepareBuilder();
          result.hasFilterMin = true;
          result.filterMin_ = value;
          return this;
        }
        public Builder ClearFilterMin() {
          PrepareBuilder();
          result.hasFilterMin = false;
          result.filterMin_ = 0D;
          return this;
        }
        
        public bool HasFilterMax {
          get { return result.hasFilterMax; }
        }
        public double FilterMax {
          get { return result.FilterMax; }
          set { SetFilterMax(value); }
        }
        public Builder SetFilterMax(double value) {
          PrepareBuilder();
          result.hasFilterMax = true;
          result.filterMax_ = value;
          return this;
        }
        public Builder ClearFilterMax() {
          PrepareBuilder();
          result.hasFilterMax = false;
          result.filterMax_ = 0D;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
        
        public bool HasSortDir {
          get { return result.hasSortDir; }
        }
        public int SortDir {
          get { return result.SortDir; }
          set { SetSortDir(value); }
        }
        public Builder SetSortDir(int value) {
          PrepareBuilder();
          result.hasSortDir = true;
          result.sortDir_ = value;
          return this;
        }
        public Builder ClearSortDir() {
          PrepareBuilder();
          result.hasSortDir = false;
          result.sortDir_ = 0;
          return this;
        }
      }
      static BaseFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AccumulateFilter : pb::GeneratedMessage<AccumulateFilter, AccumulateFilter.Builder> {
      private AccumulateFilter() { }
      private static readonly AccumulateFilter defaultInstance = new AccumulateFilter().MakeReadOnly();
      private static readonly string[] _accumulateFilterFieldNames = new string[] { "days", "fieldName", "filterMax", "filterMin", "isNoFilter", "sortDir" };
      private static readonly uint[] _accumulateFilterFieldTags = new uint[] { 48, 8, 25, 17, 32, 40 };
      public static AccumulateFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override AccumulateFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override AccumulateFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_AccumulateFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<AccumulateFilter, AccumulateFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_AccumulateFilter__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int FilterMinFieldNumber = 2;
      private bool hasFilterMin;
      private double filterMin_;
      public bool HasFilterMin {
        get { return hasFilterMin; }
      }
      public double FilterMin {
        get { return filterMin_; }
      }
      
      public const int FilterMaxFieldNumber = 3;
      private bool hasFilterMax;
      private double filterMax_;
      public bool HasFilterMax {
        get { return hasFilterMax; }
      }
      public double FilterMax {
        get { return filterMax_; }
      }
      
      public const int IsNoFilterFieldNumber = 4;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public const int SortDirFieldNumber = 5;
      private bool hasSortDir;
      private int sortDir_;
      public bool HasSortDir {
        get { return hasSortDir; }
      }
      public int SortDir {
        get { return sortDir_; }
      }
      
      public const int DaysFieldNumber = 6;
      private bool hasDays;
      private int days_;
      public bool HasDays {
        get { return hasDays; }
      }
      public int Days {
        get { return days_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasDays) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _accumulateFilterFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[1], FieldName);
        }
        if (hasFilterMin) {
          output.WriteDouble(2, field_names[3], FilterMin);
        }
        if (hasFilterMax) {
          output.WriteDouble(3, field_names[2], FilterMax);
        }
        if (hasIsNoFilter) {
          output.WriteBool(4, field_names[4], IsNoFilter);
        }
        if (hasSortDir) {
          output.WriteInt32(5, field_names[5], SortDir);
        }
        if (hasDays) {
          output.WriteInt32(6, field_names[0], Days);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasFilterMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, FilterMin);
        }
        if (hasFilterMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, FilterMax);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsNoFilter);
        }
        if (hasSortDir) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SortDir);
        }
        if (hasDays) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Days);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static AccumulateFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static AccumulateFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static AccumulateFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccumulateFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private AccumulateFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(AccumulateFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<AccumulateFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(AccumulateFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private AccumulateFilter result;
        
        private AccumulateFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            AccumulateFilter original = result;
            result = new AccumulateFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override AccumulateFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.Descriptor; }
        }
        
        public override AccumulateFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.DefaultInstance; }
        }
        
        public override AccumulateFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is AccumulateFilter) {
            return MergeFrom((AccumulateFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(AccumulateFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasFilterMin) {
            FilterMin = other.FilterMin;
          }
          if (other.HasFilterMax) {
            FilterMax = other.FilterMax;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          if (other.HasSortDir) {
            SortDir = other.SortDir;
          }
          if (other.HasDays) {
            Days = other.Days;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_accumulateFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _accumulateFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasFilterMin = input.ReadDouble(ref result.filterMin_);
                break;
              }
              case 25: {
                result.hasFilterMax = input.ReadDouble(ref result.filterMax_);
                break;
              }
              case 32: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
              case 40: {
                result.hasSortDir = input.ReadInt32(ref result.sortDir_);
                break;
              }
              case 48: {
                result.hasDays = input.ReadInt32(ref result.days_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasFilterMin {
          get { return result.hasFilterMin; }
        }
        public double FilterMin {
          get { return result.FilterMin; }
          set { SetFilterMin(value); }
        }
        public Builder SetFilterMin(double value) {
          PrepareBuilder();
          result.hasFilterMin = true;
          result.filterMin_ = value;
          return this;
        }
        public Builder ClearFilterMin() {
          PrepareBuilder();
          result.hasFilterMin = false;
          result.filterMin_ = 0D;
          return this;
        }
        
        public bool HasFilterMax {
          get { return result.hasFilterMax; }
        }
        public double FilterMax {
          get { return result.FilterMax; }
          set { SetFilterMax(value); }
        }
        public Builder SetFilterMax(double value) {
          PrepareBuilder();
          result.hasFilterMax = true;
          result.filterMax_ = value;
          return this;
        }
        public Builder ClearFilterMax() {
          PrepareBuilder();
          result.hasFilterMax = false;
          result.filterMax_ = 0D;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
        
        public bool HasSortDir {
          get { return result.hasSortDir; }
        }
        public int SortDir {
          get { return result.SortDir; }
          set { SetSortDir(value); }
        }
        public Builder SetSortDir(int value) {
          PrepareBuilder();
          result.hasSortDir = true;
          result.sortDir_ = value;
          return this;
        }
        public Builder ClearSortDir() {
          PrepareBuilder();
          result.hasSortDir = false;
          result.sortDir_ = 0;
          return this;
        }
        
        public bool HasDays {
          get { return result.hasDays; }
        }
        public int Days {
          get { return result.Days; }
          set { SetDays(value); }
        }
        public Builder SetDays(int value) {
          PrepareBuilder();
          result.hasDays = true;
          result.days_ = value;
          return this;
        }
        public Builder ClearDays() {
          PrepareBuilder();
          result.hasDays = false;
          result.days_ = 0;
          return this;
        }
      }
      static AccumulateFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FinancialFilter : pb::GeneratedMessage<FinancialFilter, FinancialFilter.Builder> {
      private FinancialFilter() { }
      private static readonly FinancialFilter defaultInstance = new FinancialFilter().MakeReadOnly();
      private static readonly string[] _financialFilterFieldNames = new string[] { "fieldName", "filterMax", "filterMin", "isNoFilter", "quarter", "sortDir" };
      private static readonly uint[] _financialFilterFieldTags = new uint[] { 8, 25, 17, 32, 48, 40 };
      public static FinancialFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override FinancialFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override FinancialFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_FinancialFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<FinancialFilter, FinancialFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_FinancialFilter__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int FilterMinFieldNumber = 2;
      private bool hasFilterMin;
      private double filterMin_;
      public bool HasFilterMin {
        get { return hasFilterMin; }
      }
      public double FilterMin {
        get { return filterMin_; }
      }
      
      public const int FilterMaxFieldNumber = 3;
      private bool hasFilterMax;
      private double filterMax_;
      public bool HasFilterMax {
        get { return hasFilterMax; }
      }
      public double FilterMax {
        get { return filterMax_; }
      }
      
      public const int IsNoFilterFieldNumber = 4;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public const int SortDirFieldNumber = 5;
      private bool hasSortDir;
      private int sortDir_;
      public bool HasSortDir {
        get { return hasSortDir; }
      }
      public int SortDir {
        get { return sortDir_; }
      }
      
      public const int QuarterFieldNumber = 6;
      private bool hasQuarter;
      private int quarter_;
      public bool HasQuarter {
        get { return hasQuarter; }
      }
      public int Quarter {
        get { return quarter_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasQuarter) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _financialFilterFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasFilterMin) {
          output.WriteDouble(2, field_names[2], FilterMin);
        }
        if (hasFilterMax) {
          output.WriteDouble(3, field_names[1], FilterMax);
        }
        if (hasIsNoFilter) {
          output.WriteBool(4, field_names[3], IsNoFilter);
        }
        if (hasSortDir) {
          output.WriteInt32(5, field_names[5], SortDir);
        }
        if (hasQuarter) {
          output.WriteInt32(6, field_names[4], Quarter);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasFilterMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, FilterMin);
        }
        if (hasFilterMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, FilterMax);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsNoFilter);
        }
        if (hasSortDir) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SortDir);
        }
        if (hasQuarter) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Quarter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static FinancialFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static FinancialFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static FinancialFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static FinancialFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FinancialFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private FinancialFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(FinancialFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<FinancialFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(FinancialFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private FinancialFilter result;
        
        private FinancialFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            FinancialFilter original = result;
            result = new FinancialFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override FinancialFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.Descriptor; }
        }
        
        public override FinancialFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.DefaultInstance; }
        }
        
        public override FinancialFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is FinancialFilter) {
            return MergeFrom((FinancialFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(FinancialFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasFilterMin) {
            FilterMin = other.FilterMin;
          }
          if (other.HasFilterMax) {
            FilterMax = other.FilterMax;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          if (other.HasSortDir) {
            SortDir = other.SortDir;
          }
          if (other.HasQuarter) {
            Quarter = other.Quarter;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_financialFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _financialFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasFilterMin = input.ReadDouble(ref result.filterMin_);
                break;
              }
              case 25: {
                result.hasFilterMax = input.ReadDouble(ref result.filterMax_);
                break;
              }
              case 32: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
              case 40: {
                result.hasSortDir = input.ReadInt32(ref result.sortDir_);
                break;
              }
              case 48: {
                result.hasQuarter = input.ReadInt32(ref result.quarter_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasFilterMin {
          get { return result.hasFilterMin; }
        }
        public double FilterMin {
          get { return result.FilterMin; }
          set { SetFilterMin(value); }
        }
        public Builder SetFilterMin(double value) {
          PrepareBuilder();
          result.hasFilterMin = true;
          result.filterMin_ = value;
          return this;
        }
        public Builder ClearFilterMin() {
          PrepareBuilder();
          result.hasFilterMin = false;
          result.filterMin_ = 0D;
          return this;
        }
        
        public bool HasFilterMax {
          get { return result.hasFilterMax; }
        }
        public double FilterMax {
          get { return result.FilterMax; }
          set { SetFilterMax(value); }
        }
        public Builder SetFilterMax(double value) {
          PrepareBuilder();
          result.hasFilterMax = true;
          result.filterMax_ = value;
          return this;
        }
        public Builder ClearFilterMax() {
          PrepareBuilder();
          result.hasFilterMax = false;
          result.filterMax_ = 0D;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
        
        public bool HasSortDir {
          get { return result.hasSortDir; }
        }
        public int SortDir {
          get { return result.SortDir; }
          set { SetSortDir(value); }
        }
        public Builder SetSortDir(int value) {
          PrepareBuilder();
          result.hasSortDir = true;
          result.sortDir_ = value;
          return this;
        }
        public Builder ClearSortDir() {
          PrepareBuilder();
          result.hasSortDir = false;
          result.sortDir_ = 0;
          return this;
        }
        
        public bool HasQuarter {
          get { return result.hasQuarter; }
        }
        public int Quarter {
          get { return result.Quarter; }
          set { SetQuarter(value); }
        }
        public Builder SetQuarter(int value) {
          PrepareBuilder();
          result.hasQuarter = true;
          result.quarter_ = value;
          return this;
        }
        public Builder ClearQuarter() {
          PrepareBuilder();
          result.hasQuarter = false;
          result.quarter_ = 0;
          return this;
        }
      }
      static FinancialFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PatternFilter : pb::GeneratedMessage<PatternFilter, PatternFilter.Builder> {
      private PatternFilter() { }
      private static readonly PatternFilter defaultInstance = new PatternFilter().MakeReadOnly();
      private static readonly string[] _patternFilterFieldNames = new string[] { "fieldName", "isNoFilter", "klType" };
      private static readonly uint[] _patternFilterFieldTags = new uint[] { 8, 24, 16 };
      public static PatternFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override PatternFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override PatternFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_PatternFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<PatternFilter, PatternFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_PatternFilter__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int KlTypeFieldNumber = 2;
      private bool hasKlType;
      private int klType_;
      public bool HasKlType {
        get { return hasKlType; }
      }
      public int KlType {
        get { return klType_; }
      }
      
      public const int IsNoFilterFieldNumber = 3;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasKlType) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _patternFilterFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasKlType) {
          output.WriteInt32(2, field_names[2], KlType);
        }
        if (hasIsNoFilter) {
          output.WriteBool(3, field_names[1], IsNoFilter);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasKlType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, KlType);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsNoFilter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static PatternFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PatternFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PatternFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PatternFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PatternFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PatternFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static PatternFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static PatternFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static PatternFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PatternFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private PatternFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(PatternFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<PatternFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(PatternFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private PatternFilter result;
        
        private PatternFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            PatternFilter original = result;
            result = new PatternFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override PatternFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.Descriptor; }
        }
        
        public override PatternFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.DefaultInstance; }
        }
        
        public override PatternFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is PatternFilter) {
            return MergeFrom((PatternFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(PatternFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasKlType) {
            KlType = other.KlType;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_patternFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _patternFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 16: {
                result.hasKlType = input.ReadInt32(ref result.klType_);
                break;
              }
              case 24: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasKlType {
          get { return result.hasKlType; }
        }
        public int KlType {
          get { return result.KlType; }
          set { SetKlType(value); }
        }
        public Builder SetKlType(int value) {
          PrepareBuilder();
          result.hasKlType = true;
          result.klType_ = value;
          return this;
        }
        public Builder ClearKlType() {
          PrepareBuilder();
          result.hasKlType = false;
          result.klType_ = 0;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
      }
      static PatternFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CustomIndicatorFilter : pb::GeneratedMessage<CustomIndicatorFilter, CustomIndicatorFilter.Builder> {
      private CustomIndicatorFilter() { }
      private static readonly CustomIndicatorFilter defaultInstance = new CustomIndicatorFilter().MakeReadOnly();
      private static readonly string[] _customIndicatorFilterFieldNames = new string[] { "fieldValue", "firstFieldName", "isNoFilter", "klType", "relativePosition", "secondFieldName" };
      private static readonly uint[] _customIndicatorFilterFieldTags = new uint[] { 33, 8, 48, 40, 24, 16 };
      public static CustomIndicatorFilter DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override CustomIndicatorFilter DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override CustomIndicatorFilter ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_CustomIndicatorFilter__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<CustomIndicatorFilter, CustomIndicatorFilter.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_CustomIndicatorFilter__FieldAccessorTable; }
      }
      
      public const int FirstFieldNameFieldNumber = 1;
      private bool hasFirstFieldName;
      private int firstFieldName_;
      public bool HasFirstFieldName {
        get { return hasFirstFieldName; }
      }
      public int FirstFieldName {
        get { return firstFieldName_; }
      }
      
      public const int SecondFieldNameFieldNumber = 2;
      private bool hasSecondFieldName;
      private int secondFieldName_;
      public bool HasSecondFieldName {
        get { return hasSecondFieldName; }
      }
      public int SecondFieldName {
        get { return secondFieldName_; }
      }
      
      public const int RelativePositionFieldNumber = 3;
      private bool hasRelativePosition;
      private int relativePosition_;
      public bool HasRelativePosition {
        get { return hasRelativePosition; }
      }
      public int RelativePosition {
        get { return relativePosition_; }
      }
      
      public const int FieldValueFieldNumber = 4;
      private bool hasFieldValue;
      private double fieldValue_;
      public bool HasFieldValue {
        get { return hasFieldValue; }
      }
      public double FieldValue {
        get { return fieldValue_; }
      }
      
      public const int KlTypeFieldNumber = 5;
      private bool hasKlType;
      private int klType_;
      public bool HasKlType {
        get { return hasKlType; }
      }
      public int KlType {
        get { return klType_; }
      }
      
      public const int IsNoFilterFieldNumber = 6;
      private bool hasIsNoFilter;
      private bool isNoFilter_;
      public bool HasIsNoFilter {
        get { return hasIsNoFilter; }
      }
      public bool IsNoFilter {
        get { return isNoFilter_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFirstFieldName) return false;
          if (!hasSecondFieldName) return false;
          if (!hasRelativePosition) return false;
          if (!hasKlType) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _customIndicatorFilterFieldNames;
        if (hasFirstFieldName) {
          output.WriteInt32(1, field_names[1], FirstFieldName);
        }
        if (hasSecondFieldName) {
          output.WriteInt32(2, field_names[5], SecondFieldName);
        }
        if (hasRelativePosition) {
          output.WriteInt32(3, field_names[4], RelativePosition);
        }
        if (hasFieldValue) {
          output.WriteDouble(4, field_names[0], FieldValue);
        }
        if (hasKlType) {
          output.WriteInt32(5, field_names[3], KlType);
        }
        if (hasIsNoFilter) {
          output.WriteBool(6, field_names[2], IsNoFilter);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFirstFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FirstFieldName);
        }
        if (hasSecondFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SecondFieldName);
        }
        if (hasRelativePosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, RelativePosition);
        }
        if (hasFieldValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, FieldValue);
        }
        if (hasKlType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, KlType);
        }
        if (hasIsNoFilter) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsNoFilter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static CustomIndicatorFilter ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static CustomIndicatorFilter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static CustomIndicatorFilter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private CustomIndicatorFilter MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(CustomIndicatorFilter prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<CustomIndicatorFilter, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(CustomIndicatorFilter cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private CustomIndicatorFilter result;
        
        private CustomIndicatorFilter PrepareBuilder() {
          if (resultIsReadOnly) {
            CustomIndicatorFilter original = result;
            result = new CustomIndicatorFilter();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override CustomIndicatorFilter MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.Descriptor; }
        }
        
        public override CustomIndicatorFilter DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.DefaultInstance; }
        }
        
        public override CustomIndicatorFilter BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is CustomIndicatorFilter) {
            return MergeFrom((CustomIndicatorFilter) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(CustomIndicatorFilter other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFirstFieldName) {
            FirstFieldName = other.FirstFieldName;
          }
          if (other.HasSecondFieldName) {
            SecondFieldName = other.SecondFieldName;
          }
          if (other.HasRelativePosition) {
            RelativePosition = other.RelativePosition;
          }
          if (other.HasFieldValue) {
            FieldValue = other.FieldValue;
          }
          if (other.HasKlType) {
            KlType = other.KlType;
          }
          if (other.HasIsNoFilter) {
            IsNoFilter = other.IsNoFilter;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_customIndicatorFilterFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _customIndicatorFilterFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFirstFieldName = input.ReadInt32(ref result.firstFieldName_);
                break;
              }
              case 16: {
                result.hasSecondFieldName = input.ReadInt32(ref result.secondFieldName_);
                break;
              }
              case 24: {
                result.hasRelativePosition = input.ReadInt32(ref result.relativePosition_);
                break;
              }
              case 33: {
                result.hasFieldValue = input.ReadDouble(ref result.fieldValue_);
                break;
              }
              case 40: {
                result.hasKlType = input.ReadInt32(ref result.klType_);
                break;
              }
              case 48: {
                result.hasIsNoFilter = input.ReadBool(ref result.isNoFilter_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFirstFieldName {
          get { return result.hasFirstFieldName; }
        }
        public int FirstFieldName {
          get { return result.FirstFieldName; }
          set { SetFirstFieldName(value); }
        }
        public Builder SetFirstFieldName(int value) {
          PrepareBuilder();
          result.hasFirstFieldName = true;
          result.firstFieldName_ = value;
          return this;
        }
        public Builder ClearFirstFieldName() {
          PrepareBuilder();
          result.hasFirstFieldName = false;
          result.firstFieldName_ = 0;
          return this;
        }
        
        public bool HasSecondFieldName {
          get { return result.hasSecondFieldName; }
        }
        public int SecondFieldName {
          get { return result.SecondFieldName; }
          set { SetSecondFieldName(value); }
        }
        public Builder SetSecondFieldName(int value) {
          PrepareBuilder();
          result.hasSecondFieldName = true;
          result.secondFieldName_ = value;
          return this;
        }
        public Builder ClearSecondFieldName() {
          PrepareBuilder();
          result.hasSecondFieldName = false;
          result.secondFieldName_ = 0;
          return this;
        }
        
        public bool HasRelativePosition {
          get { return result.hasRelativePosition; }
        }
        public int RelativePosition {
          get { return result.RelativePosition; }
          set { SetRelativePosition(value); }
        }
        public Builder SetRelativePosition(int value) {
          PrepareBuilder();
          result.hasRelativePosition = true;
          result.relativePosition_ = value;
          return this;
        }
        public Builder ClearRelativePosition() {
          PrepareBuilder();
          result.hasRelativePosition = false;
          result.relativePosition_ = 0;
          return this;
        }
        
        public bool HasFieldValue {
          get { return result.hasFieldValue; }
        }
        public double FieldValue {
          get { return result.FieldValue; }
          set { SetFieldValue(value); }
        }
        public Builder SetFieldValue(double value) {
          PrepareBuilder();
          result.hasFieldValue = true;
          result.fieldValue_ = value;
          return this;
        }
        public Builder ClearFieldValue() {
          PrepareBuilder();
          result.hasFieldValue = false;
          result.fieldValue_ = 0D;
          return this;
        }
        
        public bool HasKlType {
          get { return result.hasKlType; }
        }
        public int KlType {
          get { return result.KlType; }
          set { SetKlType(value); }
        }
        public Builder SetKlType(int value) {
          PrepareBuilder();
          result.hasKlType = true;
          result.klType_ = value;
          return this;
        }
        public Builder ClearKlType() {
          PrepareBuilder();
          result.hasKlType = false;
          result.klType_ = 0;
          return this;
        }
        
        public bool HasIsNoFilter {
          get { return result.hasIsNoFilter; }
        }
        public bool IsNoFilter {
          get { return result.IsNoFilter; }
          set { SetIsNoFilter(value); }
        }
        public Builder SetIsNoFilter(bool value) {
          PrepareBuilder();
          result.hasIsNoFilter = true;
          result.isNoFilter_ = value;
          return this;
        }
        public Builder ClearIsNoFilter() {
          PrepareBuilder();
          result.hasIsNoFilter = false;
          result.isNoFilter_ = false;
          return this;
        }
      }
      static CustomIndicatorFilter() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseData : pb::GeneratedMessage<BaseData, BaseData.Builder> {
      private BaseData() { }
      private static readonly BaseData defaultInstance = new BaseData().MakeReadOnly();
      private static readonly string[] _baseDataFieldNames = new string[] { "fieldName", "value" };
      private static readonly uint[] _baseDataFieldTags = new uint[] { 8, 17 };
      public static BaseData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override BaseData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override BaseData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<BaseData, BaseData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_BaseData__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasValue) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _baseDataFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[1], Value);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static BaseData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BaseData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static BaseData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static BaseData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BaseData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private BaseData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(BaseData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<BaseData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(BaseData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private BaseData result;
        
        private BaseData PrepareBuilder() {
          if (resultIsReadOnly) {
            BaseData original = result;
            result = new BaseData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override BaseData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Descriptor; }
        }
        
        public override BaseData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance; }
        }
        
        public override BaseData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is BaseData) {
            return MergeFrom((BaseData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(BaseData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_baseDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _baseDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
      }
      static BaseData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AccumulateData : pb::GeneratedMessage<AccumulateData, AccumulateData.Builder> {
      private AccumulateData() { }
      private static readonly AccumulateData defaultInstance = new AccumulateData().MakeReadOnly();
      private static readonly string[] _accumulateDataFieldNames = new string[] { "days", "fieldName", "value" };
      private static readonly uint[] _accumulateDataFieldTags = new uint[] { 24, 8, 17 };
      public static AccumulateData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override AccumulateData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override AccumulateData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_AccumulateData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<AccumulateData, AccumulateData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_AccumulateData__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public const int DaysFieldNumber = 3;
      private bool hasDays;
      private int days_;
      public bool HasDays {
        get { return hasDays; }
      }
      public int Days {
        get { return days_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasValue) return false;
          if (!hasDays) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _accumulateDataFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[1], FieldName);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[2], Value);
        }
        if (hasDays) {
          output.WriteInt32(3, field_names[0], Days);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        if (hasDays) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Days);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static AccumulateData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccumulateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccumulateData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccumulateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccumulateData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccumulateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static AccumulateData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static AccumulateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static AccumulateData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccumulateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private AccumulateData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(AccumulateData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<AccumulateData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(AccumulateData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private AccumulateData result;
        
        private AccumulateData PrepareBuilder() {
          if (resultIsReadOnly) {
            AccumulateData original = result;
            result = new AccumulateData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override AccumulateData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.Descriptor; }
        }
        
        public override AccumulateData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.DefaultInstance; }
        }
        
        public override AccumulateData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is AccumulateData) {
            return MergeFrom((AccumulateData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(AccumulateData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasDays) {
            Days = other.Days;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_accumulateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _accumulateDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
              case 24: {
                result.hasDays = input.ReadInt32(ref result.days_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
        
        public bool HasDays {
          get { return result.hasDays; }
        }
        public int Days {
          get { return result.Days; }
          set { SetDays(value); }
        }
        public Builder SetDays(int value) {
          PrepareBuilder();
          result.hasDays = true;
          result.days_ = value;
          return this;
        }
        public Builder ClearDays() {
          PrepareBuilder();
          result.hasDays = false;
          result.days_ = 0;
          return this;
        }
      }
      static AccumulateData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FinancialData : pb::GeneratedMessage<FinancialData, FinancialData.Builder> {
      private FinancialData() { }
      private static readonly FinancialData defaultInstance = new FinancialData().MakeReadOnly();
      private static readonly string[] _financialDataFieldNames = new string[] { "fieldName", "quarter", "value" };
      private static readonly uint[] _financialDataFieldTags = new uint[] { 8, 24, 17 };
      public static FinancialData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override FinancialData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override FinancialData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_FinancialData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<FinancialData, FinancialData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_FinancialData__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public const int QuarterFieldNumber = 3;
      private bool hasQuarter;
      private int quarter_;
      public bool HasQuarter {
        get { return hasQuarter; }
      }
      public int Quarter {
        get { return quarter_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasValue) return false;
          if (!hasQuarter) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _financialDataFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[2], Value);
        }
        if (hasQuarter) {
          output.WriteInt32(3, field_names[1], Quarter);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        if (hasQuarter) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Quarter);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static FinancialData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FinancialData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FinancialData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FinancialData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FinancialData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FinancialData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static FinancialData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static FinancialData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static FinancialData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FinancialData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private FinancialData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(FinancialData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<FinancialData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(FinancialData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private FinancialData result;
        
        private FinancialData PrepareBuilder() {
          if (resultIsReadOnly) {
            FinancialData original = result;
            result = new FinancialData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override FinancialData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.Descriptor; }
        }
        
        public override FinancialData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.DefaultInstance; }
        }
        
        public override FinancialData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is FinancialData) {
            return MergeFrom((FinancialData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(FinancialData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasQuarter) {
            Quarter = other.Quarter;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_financialDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _financialDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
              case 24: {
                result.hasQuarter = input.ReadInt32(ref result.quarter_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
        
        public bool HasQuarter {
          get { return result.hasQuarter; }
        }
        public int Quarter {
          get { return result.Quarter; }
          set { SetQuarter(value); }
        }
        public Builder SetQuarter(int value) {
          PrepareBuilder();
          result.hasQuarter = true;
          result.quarter_ = value;
          return this;
        }
        public Builder ClearQuarter() {
          PrepareBuilder();
          result.hasQuarter = false;
          result.quarter_ = 0;
          return this;
        }
      }
      static FinancialData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CustomIndicatorData : pb::GeneratedMessage<CustomIndicatorData, CustomIndicatorData.Builder> {
      private CustomIndicatorData() { }
      private static readonly CustomIndicatorData defaultInstance = new CustomIndicatorData().MakeReadOnly();
      private static readonly string[] _customIndicatorDataFieldNames = new string[] { "fieldName", "klType", "value" };
      private static readonly uint[] _customIndicatorDataFieldTags = new uint[] { 8, 24, 17 };
      public static CustomIndicatorData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override CustomIndicatorData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override CustomIndicatorData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_CustomIndicatorData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<CustomIndicatorData, CustomIndicatorData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_CustomIndicatorData__FieldAccessorTable; }
      }
      
      public const int FieldNameFieldNumber = 1;
      private bool hasFieldName;
      private int fieldName_;
      public bool HasFieldName {
        get { return hasFieldName; }
      }
      public int FieldName {
        get { return fieldName_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public const int KlTypeFieldNumber = 3;
      private bool hasKlType;
      private int klType_;
      public bool HasKlType {
        get { return hasKlType; }
      }
      public int KlType {
        get { return klType_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasFieldName) return false;
          if (!hasValue) return false;
          if (!hasKlType) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _customIndicatorDataFieldNames;
        if (hasFieldName) {
          output.WriteInt32(1, field_names[0], FieldName);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[2], Value);
        }
        if (hasKlType) {
          output.WriteInt32(3, field_names[1], KlType);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFieldName) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FieldName);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        if (hasKlType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, KlType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static CustomIndicatorData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static CustomIndicatorData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static CustomIndicatorData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static CustomIndicatorData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private CustomIndicatorData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(CustomIndicatorData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<CustomIndicatorData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(CustomIndicatorData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private CustomIndicatorData result;
        
        private CustomIndicatorData PrepareBuilder() {
          if (resultIsReadOnly) {
            CustomIndicatorData original = result;
            result = new CustomIndicatorData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override CustomIndicatorData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData.Descriptor; }
        }
        
        public override CustomIndicatorData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData.DefaultInstance; }
        }
        
        public override CustomIndicatorData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is CustomIndicatorData) {
            return MergeFrom((CustomIndicatorData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(CustomIndicatorData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasFieldName) {
            FieldName = other.FieldName;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          if (other.HasKlType) {
            KlType = other.KlType;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_customIndicatorDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _customIndicatorDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasFieldName = input.ReadInt32(ref result.fieldName_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
              case 24: {
                result.hasKlType = input.ReadInt32(ref result.klType_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasFieldName {
          get { return result.hasFieldName; }
        }
        public int FieldName {
          get { return result.FieldName; }
          set { SetFieldName(value); }
        }
        public Builder SetFieldName(int value) {
          PrepareBuilder();
          result.hasFieldName = true;
          result.fieldName_ = value;
          return this;
        }
        public Builder ClearFieldName() {
          PrepareBuilder();
          result.hasFieldName = false;
          result.fieldName_ = 0;
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
        
        public bool HasKlType {
          get { return result.hasKlType; }
        }
        public int KlType {
          get { return result.KlType; }
          set { SetKlType(value); }
        }
        public Builder SetKlType(int value) {
          PrepareBuilder();
          result.hasKlType = true;
          result.klType_ = value;
          return this;
        }
        public Builder ClearKlType() {
          PrepareBuilder();
          result.hasKlType = false;
          result.klType_ = 0;
          return this;
        }
      }
      static CustomIndicatorData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class StockData : pb::GeneratedMessage<StockData, StockData.Builder> {
      private StockData() { }
      private static readonly StockData defaultInstance = new StockData().MakeReadOnly();
      private static readonly string[] _stockDataFieldNames = new string[] { "accumulateDataList", "baseDataList", "financialDataList", "name", "security" };
      private static readonly uint[] _stockDataFieldTags = new uint[] { 34, 26, 42, 18, 10 };
      public static StockData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override StockData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override StockData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_StockData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<StockData, StockData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_StockData__FieldAccessorTable; }
      }
      
      public const int SecurityFieldNumber = 1;
      private bool hasSecurity;
      private global::Futu.OpenApi.Pb.QotCommon.Security security_;
      public bool HasSecurity {
        get { return hasSecurity; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Security {
        get { return security_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int BaseDataListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> baseDataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> BaseDataListList {
        get { return baseDataList_; }
      }
      public int BaseDataListCount {
        get { return baseDataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.BaseData GetBaseDataList(int index) {
        return baseDataList_[index];
      }
      
      public const int AccumulateDataListFieldNumber = 4;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData> accumulateDataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData> AccumulateDataListList {
        get { return accumulateDataList_; }
      }
      public int AccumulateDataListCount {
        get { return accumulateDataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData GetAccumulateDataList(int index) {
        return accumulateDataList_[index];
      }
      
      public const int FinancialDataListFieldNumber = 5;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData> financialDataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData> FinancialDataListList {
        get { return financialDataList_; }
      }
      public int FinancialDataListCount {
        get { return financialDataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.FinancialData GetFinancialDataList(int index) {
        return financialDataList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSecurity) return false;
          if (!hasName) return false;
          if (!Security.IsInitialized) return false;
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseData element in BaseDataListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData element in AccumulateDataListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.FinancialData element in FinancialDataListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _stockDataFieldNames;
        if (hasSecurity) {
          output.WriteMessage(1, field_names[4], Security);
        }
        if (hasName) {
          output.WriteString(2, field_names[3], Name);
        }
        if (baseDataList_.Count > 0) {
          output.WriteMessageArray(3, field_names[1], baseDataList_);
        }
        if (accumulateDataList_.Count > 0) {
          output.WriteMessageArray(4, field_names[0], accumulateDataList_);
        }
        if (financialDataList_.Count > 0) {
          output.WriteMessageArray(5, field_names[2], financialDataList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSecurity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseData element in BaseDataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData element in AccumulateDataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.FinancialData element in FinancialDataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static StockData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static StockData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static StockData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static StockData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static StockData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static StockData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static StockData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static StockData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private StockData MakeReadOnly() {
        baseDataList_.MakeReadOnly();
        accumulateDataList_.MakeReadOnly();
        financialDataList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(StockData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<StockData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(StockData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private StockData result;
        
        private StockData PrepareBuilder() {
          if (resultIsReadOnly) {
            StockData original = result;
            result = new StockData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override StockData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.StockData.Descriptor; }
        }
        
        public override StockData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance; }
        }
        
        public override StockData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is StockData) {
            return MergeFrom((StockData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(StockData other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSecurity) {
            MergeSecurity(other.Security);
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.baseDataList_.Count != 0) {
            result.baseDataList_.Add(other.baseDataList_);
          }
          if (other.accumulateDataList_.Count != 0) {
            result.accumulateDataList_.Add(other.accumulateDataList_);
          }
          if (other.financialDataList_.Count != 0) {
            result.financialDataList_.Add(other.financialDataList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_stockDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _stockDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasSecurity) {
                  subBuilder.MergeFrom(Security);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Security = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.baseDataList_, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.DefaultInstance, extensionRegistry);
                break;
              }
              case 34: {
                input.ReadMessageArray(tag, field_name, result.accumulateDataList_, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.DefaultInstance, extensionRegistry);
                break;
              }
              case 42: {
                input.ReadMessageArray(tag, field_name, result.financialDataList_, global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSecurity {
         get { return result.hasSecurity; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Security {
          get { return result.Security; }
          set { SetSecurity(value); }
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = value;
          return this;
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSecurity &&
              result.security_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.security_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
          } else {
            result.security_ = value;
          }
          result.hasSecurity = true;
          return this;
        }
        public Builder ClearSecurity() {
          PrepareBuilder();
          result.hasSecurity = false;
          result.security_ = null;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> BaseDataListList {
          get { return PrepareBuilder().baseDataList_; }
        }
        public int BaseDataListCount {
          get { return result.BaseDataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.BaseData GetBaseDataList(int index) {
          return result.GetBaseDataList(index);
        }
        public Builder SetBaseDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseDataList_[index] = value;
          return this;
        }
        public Builder SetBaseDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseDataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddBaseDataList(global::Futu.OpenApi.Pb.QotStockFilter.BaseData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseDataList_.Add(value);
          return this;
        }
        public Builder AddBaseDataList(global::Futu.OpenApi.Pb.QotStockFilter.BaseData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseDataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeBaseDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.BaseData> values) {
          PrepareBuilder();
          result.baseDataList_.Add(values);
          return this;
        }
        public Builder ClearBaseDataList() {
          PrepareBuilder();
          result.baseDataList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData> AccumulateDataListList {
          get { return PrepareBuilder().accumulateDataList_; }
        }
        public int AccumulateDataListCount {
          get { return result.AccumulateDataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData GetAccumulateDataList(int index) {
          return result.GetAccumulateDataList(index);
        }
        public Builder SetAccumulateDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.accumulateDataList_[index] = value;
          return this;
        }
        public Builder SetAccumulateDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.accumulateDataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddAccumulateDataList(global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.accumulateDataList_.Add(value);
          return this;
        }
        public Builder AddAccumulateDataList(global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.accumulateDataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeAccumulateDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateData> values) {
          PrepareBuilder();
          result.accumulateDataList_.Add(values);
          return this;
        }
        public Builder ClearAccumulateDataList() {
          PrepareBuilder();
          result.accumulateDataList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData> FinancialDataListList {
          get { return PrepareBuilder().financialDataList_; }
        }
        public int FinancialDataListCount {
          get { return result.FinancialDataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.FinancialData GetFinancialDataList(int index) {
          return result.GetFinancialDataList(index);
        }
        public Builder SetFinancialDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.FinancialData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.financialDataList_[index] = value;
          return this;
        }
        public Builder SetFinancialDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.financialDataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddFinancialDataList(global::Futu.OpenApi.Pb.QotStockFilter.FinancialData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.financialDataList_.Add(value);
          return this;
        }
        public Builder AddFinancialDataList(global::Futu.OpenApi.Pb.QotStockFilter.FinancialData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.financialDataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeFinancialDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialData> values) {
          PrepareBuilder();
          result.financialDataList_.Add(values);
          return this;
        }
        public Builder ClearFinancialDataList() {
          PrepareBuilder();
          result.financialDataList_.Clear();
          return this;
        }
      }
      static StockData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "accumulateFilterList", "baseFilterList", "begin", "customIndicatorFilterList", "financialFilterList", "market", "num", "patternFilterList", "plate" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 50, 42, 8, 74, 58, 24, 16, 66, 34 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_C2S__FieldAccessorTable; }
      }
      
      public const int BeginFieldNumber = 1;
      private bool hasBegin;
      private int begin_;
      public bool HasBegin {
        get { return hasBegin; }
      }
      public int Begin {
        get { return begin_; }
      }
      
      public const int NumFieldNumber = 2;
      private bool hasNum;
      private int num_;
      public bool HasNum {
        get { return hasNum; }
      }
      public int Num {
        get { return num_; }
      }
      
      public const int MarketFieldNumber = 3;
      private bool hasMarket;
      private int market_;
      public bool HasMarket {
        get { return hasMarket; }
      }
      public int Market {
        get { return market_; }
      }
      
      public const int PlateFieldNumber = 4;
      private bool hasPlate;
      private global::Futu.OpenApi.Pb.QotCommon.Security plate_;
      public bool HasPlate {
        get { return hasPlate; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
        get { return plate_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int BaseFilterListFieldNumber = 5;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> baseFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> BaseFilterListList {
        get { return baseFilterList_; }
      }
      public int BaseFilterListCount {
        get { return baseFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter GetBaseFilterList(int index) {
        return baseFilterList_[index];
      }
      
      public const int AccumulateFilterListFieldNumber = 6;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter> accumulateFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter> AccumulateFilterListList {
        get { return accumulateFilterList_; }
      }
      public int AccumulateFilterListCount {
        get { return accumulateFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter GetAccumulateFilterList(int index) {
        return accumulateFilterList_[index];
      }
      
      public const int FinancialFilterListFieldNumber = 7;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter> financialFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter> FinancialFilterListList {
        get { return financialFilterList_; }
      }
      public int FinancialFilterListCount {
        get { return financialFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter GetFinancialFilterList(int index) {
        return financialFilterList_[index];
      }
      
      public const int PatternFilterListFieldNumber = 8;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter> patternFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter> PatternFilterListList {
        get { return patternFilterList_; }
      }
      public int PatternFilterListCount {
        get { return patternFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter GetPatternFilterList(int index) {
        return patternFilterList_[index];
      }
      
      public const int CustomIndicatorFilterListFieldNumber = 9;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter> customIndicatorFilterList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter> CustomIndicatorFilterListList {
        get { return customIndicatorFilterList_; }
      }
      public int CustomIndicatorFilterListCount {
        get { return customIndicatorFilterList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter GetCustomIndicatorFilterList(int index) {
        return customIndicatorFilterList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasBegin) return false;
          if (!hasNum) return false;
          if (!hasMarket) return false;
          if (HasPlate) {
            if (!Plate.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter element in BaseFilterListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter element in AccumulateFilterListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter element in FinancialFilterListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter element in PatternFilterListList) {
            if (!element.IsInitialized) return false;
          }
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter element in CustomIndicatorFilterListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (hasBegin) {
          output.WriteInt32(1, field_names[2], Begin);
        }
        if (hasNum) {
          output.WriteInt32(2, field_names[6], Num);
        }
        if (hasMarket) {
          output.WriteInt32(3, field_names[5], Market);
        }
        if (hasPlate) {
          output.WriteMessage(4, field_names[8], Plate);
        }
        if (baseFilterList_.Count > 0) {
          output.WriteMessageArray(5, field_names[1], baseFilterList_);
        }
        if (accumulateFilterList_.Count > 0) {
          output.WriteMessageArray(6, field_names[0], accumulateFilterList_);
        }
        if (financialFilterList_.Count > 0) {
          output.WriteMessageArray(7, field_names[4], financialFilterList_);
        }
        if (patternFilterList_.Count > 0) {
          output.WriteMessageArray(8, field_names[7], patternFilterList_);
        }
        if (customIndicatorFilterList_.Count > 0) {
          output.WriteMessageArray(9, field_names[3], customIndicatorFilterList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBegin) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Begin);
        }
        if (hasNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
        }
        if (hasMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Market);
        }
        if (hasPlate) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Plate);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter element in BaseFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter element in AccumulateFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter element in FinancialFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter element in PatternFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter element in CustomIndicatorFilterListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        baseFilterList_.MakeReadOnly();
        accumulateFilterList_.MakeReadOnly();
        financialFilterList_.MakeReadOnly();
        patternFilterList_.MakeReadOnly();
        customIndicatorFilterList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBegin) {
            Begin = other.Begin;
          }
          if (other.HasNum) {
            Num = other.Num;
          }
          if (other.HasMarket) {
            Market = other.Market;
          }
          if (other.HasPlate) {
            MergePlate(other.Plate);
          }
          if (other.baseFilterList_.Count != 0) {
            result.baseFilterList_.Add(other.baseFilterList_);
          }
          if (other.accumulateFilterList_.Count != 0) {
            result.accumulateFilterList_.Add(other.accumulateFilterList_);
          }
          if (other.financialFilterList_.Count != 0) {
            result.financialFilterList_.Add(other.financialFilterList_);
          }
          if (other.patternFilterList_.Count != 0) {
            result.patternFilterList_.Add(other.patternFilterList_);
          }
          if (other.customIndicatorFilterList_.Count != 0) {
            result.customIndicatorFilterList_.Add(other.customIndicatorFilterList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasBegin = input.ReadInt32(ref result.begin_);
                break;
              }
              case 16: {
                result.hasNum = input.ReadInt32(ref result.num_);
                break;
              }
              case 24: {
                result.hasMarket = input.ReadInt32(ref result.market_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasPlate) {
                  subBuilder.MergeFrom(Plate);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Plate = subBuilder.BuildPartial();
                break;
              }
              case 42: {
                input.ReadMessageArray(tag, field_name, result.baseFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.DefaultInstance, extensionRegistry);
                break;
              }
              case 50: {
                input.ReadMessageArray(tag, field_name, result.accumulateFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.DefaultInstance, extensionRegistry);
                break;
              }
              case 58: {
                input.ReadMessageArray(tag, field_name, result.financialFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.DefaultInstance, extensionRegistry);
                break;
              }
              case 66: {
                input.ReadMessageArray(tag, field_name, result.patternFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.DefaultInstance, extensionRegistry);
                break;
              }
              case 74: {
                input.ReadMessageArray(tag, field_name, result.customIndicatorFilterList_, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBegin {
          get { return result.hasBegin; }
        }
        public int Begin {
          get { return result.Begin; }
          set { SetBegin(value); }
        }
        public Builder SetBegin(int value) {
          PrepareBuilder();
          result.hasBegin = true;
          result.begin_ = value;
          return this;
        }
        public Builder ClearBegin() {
          PrepareBuilder();
          result.hasBegin = false;
          result.begin_ = 0;
          return this;
        }
        
        public bool HasNum {
          get { return result.hasNum; }
        }
        public int Num {
          get { return result.Num; }
          set { SetNum(value); }
        }
        public Builder SetNum(int value) {
          PrepareBuilder();
          result.hasNum = true;
          result.num_ = value;
          return this;
        }
        public Builder ClearNum() {
          PrepareBuilder();
          result.hasNum = false;
          result.num_ = 0;
          return this;
        }
        
        public bool HasMarket {
          get { return result.hasMarket; }
        }
        public int Market {
          get { return result.Market; }
          set { SetMarket(value); }
        }
        public Builder SetMarket(int value) {
          PrepareBuilder();
          result.hasMarket = true;
          result.market_ = value;
          return this;
        }
        public Builder ClearMarket() {
          PrepareBuilder();
          result.hasMarket = false;
          result.market_ = 0;
          return this;
        }
        
        public bool HasPlate {
         get { return result.hasPlate; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
          get { return result.Plate; }
          set { SetPlate(value); }
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = value;
          return this;
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = builderForValue.Build();
          return this;
        }
        public Builder MergePlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPlate &&
              result.plate_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.plate_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.plate_).MergeFrom(value).BuildPartial();
          } else {
            result.plate_ = value;
          }
          result.hasPlate = true;
          return this;
        }
        public Builder ClearPlate() {
          PrepareBuilder();
          result.hasPlate = false;
          result.plate_ = null;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> BaseFilterListList {
          get { return PrepareBuilder().baseFilterList_; }
        }
        public int BaseFilterListCount {
          get { return result.BaseFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter GetBaseFilterList(int index) {
          return result.GetBaseFilterList(index);
        }
        public Builder SetBaseFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseFilterList_[index] = value;
          return this;
        }
        public Builder SetBaseFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddBaseFilterList(global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.baseFilterList_.Add(value);
          return this;
        }
        public Builder AddBaseFilterList(global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.baseFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeBaseFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.BaseFilter> values) {
          PrepareBuilder();
          result.baseFilterList_.Add(values);
          return this;
        }
        public Builder ClearBaseFilterList() {
          PrepareBuilder();
          result.baseFilterList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter> AccumulateFilterListList {
          get { return PrepareBuilder().accumulateFilterList_; }
        }
        public int AccumulateFilterListCount {
          get { return result.AccumulateFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter GetAccumulateFilterList(int index) {
          return result.GetAccumulateFilterList(index);
        }
        public Builder SetAccumulateFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.accumulateFilterList_[index] = value;
          return this;
        }
        public Builder SetAccumulateFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.accumulateFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddAccumulateFilterList(global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.accumulateFilterList_.Add(value);
          return this;
        }
        public Builder AddAccumulateFilterList(global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.accumulateFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeAccumulateFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.AccumulateFilter> values) {
          PrepareBuilder();
          result.accumulateFilterList_.Add(values);
          return this;
        }
        public Builder ClearAccumulateFilterList() {
          PrepareBuilder();
          result.accumulateFilterList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter> FinancialFilterListList {
          get { return PrepareBuilder().financialFilterList_; }
        }
        public int FinancialFilterListCount {
          get { return result.FinancialFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter GetFinancialFilterList(int index) {
          return result.GetFinancialFilterList(index);
        }
        public Builder SetFinancialFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.financialFilterList_[index] = value;
          return this;
        }
        public Builder SetFinancialFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.financialFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddFinancialFilterList(global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.financialFilterList_.Add(value);
          return this;
        }
        public Builder AddFinancialFilterList(global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.financialFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeFinancialFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.FinancialFilter> values) {
          PrepareBuilder();
          result.financialFilterList_.Add(values);
          return this;
        }
        public Builder ClearFinancialFilterList() {
          PrepareBuilder();
          result.financialFilterList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter> PatternFilterListList {
          get { return PrepareBuilder().patternFilterList_; }
        }
        public int PatternFilterListCount {
          get { return result.PatternFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter GetPatternFilterList(int index) {
          return result.GetPatternFilterList(index);
        }
        public Builder SetPatternFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.patternFilterList_[index] = value;
          return this;
        }
        public Builder SetPatternFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.patternFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddPatternFilterList(global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.patternFilterList_.Add(value);
          return this;
        }
        public Builder AddPatternFilterList(global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.patternFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangePatternFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.PatternFilter> values) {
          PrepareBuilder();
          result.patternFilterList_.Add(values);
          return this;
        }
        public Builder ClearPatternFilterList() {
          PrepareBuilder();
          result.patternFilterList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter> CustomIndicatorFilterListList {
          get { return PrepareBuilder().customIndicatorFilterList_; }
        }
        public int CustomIndicatorFilterListCount {
          get { return result.CustomIndicatorFilterListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter GetCustomIndicatorFilterList(int index) {
          return result.GetCustomIndicatorFilterList(index);
        }
        public Builder SetCustomIndicatorFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.customIndicatorFilterList_[index] = value;
          return this;
        }
        public Builder SetCustomIndicatorFilterList(int index, global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.customIndicatorFilterList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddCustomIndicatorFilterList(global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.customIndicatorFilterList_.Add(value);
          return this;
        }
        public Builder AddCustomIndicatorFilterList(global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.customIndicatorFilterList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeCustomIndicatorFilterList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.CustomIndicatorFilter> values) {
          PrepareBuilder();
          result.customIndicatorFilterList_.Add(values);
          return this;
        }
        public Builder ClearCustomIndicatorFilterList() {
          PrepareBuilder();
          result.customIndicatorFilterList_.Clear();
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "allCount", "dataList", "lastPage" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 16, 26, 8 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_S2C__FieldAccessorTable; }
      }
      
      public const int LastPageFieldNumber = 1;
      private bool hasLastPage;
      private bool lastPage_;
      public bool HasLastPage {
        get { return hasLastPage; }
      }
      public bool LastPage {
        get { return lastPage_; }
      }
      
      public const int AllCountFieldNumber = 2;
      private bool hasAllCount;
      private int allCount_;
      public bool HasAllCount {
        get { return hasAllCount; }
      }
      public int AllCount {
        get { return allCount_; }
      }
      
      public const int DataListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> dataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> DataListList {
        get { return dataList_; }
      }
      public int DataListCount {
        get { return dataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.StockData GetDataList(int index) {
        return dataList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasLastPage) return false;
          if (!hasAllCount) return false;
          foreach (global::Futu.OpenApi.Pb.QotStockFilter.StockData element in DataListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (hasLastPage) {
          output.WriteBool(1, field_names[2], LastPage);
        }
        if (hasAllCount) {
          output.WriteInt32(2, field_names[0], AllCount);
        }
        if (dataList_.Count > 0) {
          output.WriteMessageArray(3, field_names[1], dataList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastPage) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, LastPage);
        }
        if (hasAllCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AllCount);
        }
        foreach (global::Futu.OpenApi.Pb.QotStockFilter.StockData element in DataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        dataList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasLastPage) {
            LastPage = other.LastPage;
          }
          if (other.HasAllCount) {
            AllCount = other.AllCount;
          }
          if (other.dataList_.Count != 0) {
            result.dataList_.Add(other.dataList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasLastPage = input.ReadBool(ref result.lastPage_);
                break;
              }
              case 16: {
                result.hasAllCount = input.ReadInt32(ref result.allCount_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.dataList_, global::Futu.OpenApi.Pb.QotStockFilter.StockData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasLastPage {
          get { return result.hasLastPage; }
        }
        public bool LastPage {
          get { return result.LastPage; }
          set { SetLastPage(value); }
        }
        public Builder SetLastPage(bool value) {
          PrepareBuilder();
          result.hasLastPage = true;
          result.lastPage_ = value;
          return this;
        }
        public Builder ClearLastPage() {
          PrepareBuilder();
          result.hasLastPage = false;
          result.lastPage_ = false;
          return this;
        }
        
        public bool HasAllCount {
          get { return result.hasAllCount; }
        }
        public int AllCount {
          get { return result.AllCount; }
          set { SetAllCount(value); }
        }
        public Builder SetAllCount(int value) {
          PrepareBuilder();
          result.hasAllCount = true;
          result.allCount_ = value;
          return this;
        }
        public Builder ClearAllCount() {
          PrepareBuilder();
          result.hasAllCount = false;
          result.allCount_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotStockFilter.StockData> DataListList {
          get { return PrepareBuilder().dataList_; }
        }
        public int DataListCount {
          get { return result.DataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.StockData GetDataList(int index) {
          return result.GetDataList(index);
        }
        public Builder SetDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.StockData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.dataList_[index] = value;
          return this;
        }
        public Builder SetDataList(int index, global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.dataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddDataList(global::Futu.OpenApi.Pb.QotStockFilter.StockData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.dataList_.Add(value);
          return this;
        }
        public Builder AddDataList(global::Futu.OpenApi.Pb.QotStockFilter.StockData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.dataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotStockFilter.StockData> values) {
          PrepareBuilder();
          result.dataList_.Add(values);
          return this;
        }
        public Builder ClearDataList() {
          PrepareBuilder();
          result.dataList_.Clear();
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.QotStockFilter.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.QotStockFilter.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.QotStockFilter.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.QotStockFilter.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.QotStockFilter.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotStockFilter.internal__static_Qot_StockFilter_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.QotStockFilter.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.QotStockFilter.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotStockFilter.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.QotStockFilter.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.QotStockFilter.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.QotStockFilter.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.QotStockFilter.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.QotStockFilter.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.QotStockFilter.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotStockFilter.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
