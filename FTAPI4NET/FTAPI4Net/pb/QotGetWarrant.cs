// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotGetWarrant {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Qot_GetWarrant_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.C2S, global::Futu.OpenApi.Pb.QotGetWarrant.C2S.Builder> internal__static_Qot_GetWarrant_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetWarrant_WarrantData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData, global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.Builder> internal__static_Qot_GetWarrant_WarrantData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetWarrant_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.S2C, global::Futu.OpenApi.Pb.QotGetWarrant.S2C.Builder> internal__static_Qot_GetWarrant_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetWarrant_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.Request, global::Futu.OpenApi.Pb.QotGetWarrant.Request.Builder> internal__static_Qot_GetWarrant_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetWarrant_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.Response, global::Futu.OpenApi.Pb.QotGetWarrant.Response.Builder> internal__static_Qot_GetWarrant_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static QotGetWarrant() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRRb3RfR2V0V2FycmFudC5wcm90bxIOUW90X0dldFdhcnJhbnQaDENvbW1v", 
            "bi5wcm90bxoQUW90X0NvbW1vbi5wcm90byKTCQoDQzJTEhQKBWJlZ2luGAEg", 
            "AigFUgViZWdpbhIQCgNudW0YAiACKAVSA251bRIcCglzb3J0RmllbGQYAyAC", 
            "KAVSCXNvcnRGaWVsZBIWCgZhc2NlbmQYBCACKAhSBmFzY2VuZBIqCgVvd25l", 
            "chgFIAEoCzIULlFvdF9Db21tb24uU2VjdXJpdHlSBW93bmVyEhoKCHR5cGVM", 
            "aXN0GAYgAygFUgh0eXBlTGlzdBIeCgppc3N1ZXJMaXN0GAcgAygFUgppc3N1", 
            "ZXJMaXN0EigKD21hdHVyaXR5VGltZU1pbhgIIAEoCVIPbWF0dXJpdHlUaW1l", 
            "TWluEigKD21hdHVyaXR5VGltZU1heBgJIAEoCVIPbWF0dXJpdHlUaW1lTWF4", 
            "EhwKCWlwb1BlcmlvZBgKIAEoBVIJaXBvUGVyaW9kEhwKCXByaWNlVHlwZRgL", 
            "IAEoBVIJcHJpY2VUeXBlEhYKBnN0YXR1cxgMIAEoBVIGc3RhdHVzEiAKC2N1", 
            "clByaWNlTWluGA0gASgBUgtjdXJQcmljZU1pbhIgCgtjdXJQcmljZU1heBgO", 
            "IAEoAVILY3VyUHJpY2VNYXgSJgoOc3RyaWtlUHJpY2VNaW4YDyABKAFSDnN0", 
            "cmlrZVByaWNlTWluEiYKDnN0cmlrZVByaWNlTWF4GBAgASgBUg5zdHJpa2VQ", 
            "cmljZU1heBIcCglzdHJlZXRNaW4YESABKAFSCXN0cmVldE1pbhIcCglzdHJl", 
            "ZXRNYXgYEiABKAFSCXN0cmVldE1heBIkCg1jb252ZXJzaW9uTWluGBMgASgB", 
            "Ug1jb252ZXJzaW9uTWluEiQKDWNvbnZlcnNpb25NYXgYFCABKAFSDWNvbnZl", 
            "cnNpb25NYXgSFgoGdm9sTWluGBUgASgEUgZ2b2xNaW4SFgoGdm9sTWF4GBYg", 
            "ASgEUgZ2b2xNYXgSHgoKcHJlbWl1bU1pbhgXIAEoAVIKcHJlbWl1bU1pbhIe", 
            "CgpwcmVtaXVtTWF4GBggASgBUgpwcmVtaXVtTWF4EioKEGxldmVyYWdlUmF0", 
            "aW9NaW4YGSABKAFSEGxldmVyYWdlUmF0aW9NaW4SKgoQbGV2ZXJhZ2VSYXRp", 
            "b01heBgaIAEoAVIQbGV2ZXJhZ2VSYXRpb01heBIaCghkZWx0YU1pbhgbIAEo", 
            "AVIIZGVsdGFNaW4SGgoIZGVsdGFNYXgYHCABKAFSCGRlbHRhTWF4Eh4KCmlt", 
            "cGxpZWRNaW4YHSABKAFSCmltcGxpZWRNaW4SHgoKaW1wbGllZE1heBgeIAEo", 
            "AVIKaW1wbGllZE1heBIqChByZWNvdmVyeVByaWNlTWluGB8gASgBUhByZWNv", 
            "dmVyeVByaWNlTWluEioKEHJlY292ZXJ5UHJpY2VNYXgYICABKAFSEHJlY292", 
            "ZXJ5UHJpY2VNYXgSNAoVcHJpY2VSZWNvdmVyeVJhdGlvTWluGCEgASgBUhVw", 
            "cmljZVJlY292ZXJ5UmF0aW9NaW4SNAoVcHJpY2VSZWNvdmVyeVJhdGlvTWF4", 
            "GCIgASgBUhVwcmljZVJlY292ZXJ5UmF0aW9NYXgi6QsKC1dhcnJhbnREYXRh", 
            "EioKBXN0b2NrGAEgAigLMhQuUW90X0NvbW1vbi5TZWN1cml0eVIFc3RvY2sS", 
            "KgoFb3duZXIYAiACKAsyFC5Rb3RfQ29tbW9uLlNlY3VyaXR5UgVvd25lchIS", 
            "CgR0eXBlGAMgAigFUgR0eXBlEhYKBmlzc3VlchgEIAIoBVIGaXNzdWVyEiIK", 
            "DG1hdHVyaXR5VGltZRgFIAIoCVIMbWF0dXJpdHlUaW1lEiwKEW1hdHVyaXR5", 
            "VGltZXN0YW1wGAYgASgBUhFtYXR1cml0eVRpbWVzdGFtcBIaCghsaXN0VGlt", 
            "ZRgHIAIoCVIIbGlzdFRpbWUSJAoNbGlzdFRpbWVzdGFtcBgIIAEoAVINbGlz", 
            "dFRpbWVzdGFtcBIkCg1sYXN0VHJhZGVUaW1lGAkgAigJUg1sYXN0VHJhZGVU", 
            "aW1lEi4KEmxhc3RUcmFkZVRpbWVzdGFtcBgKIAEoAVISbGFzdFRyYWRlVGlt", 
            "ZXN0YW1wEiQKDXJlY292ZXJ5UHJpY2UYCyABKAFSDXJlY292ZXJ5UHJpY2US", 
            "KAoPY29udmVyc2lvblJhdGlvGAwgAigBUg9jb252ZXJzaW9uUmF0aW8SGAoH", 
            "bG90U2l6ZRgNIAIoBVIHbG90U2l6ZRIgCgtzdHJpa2VQcmljZRgOIAIoAVIL", 
            "c3RyaWtlUHJpY2USJgoObGFzdENsb3NlUHJpY2UYDyACKAFSDmxhc3RDbG9z", 
            "ZVByaWNlEhIKBG5hbWUYECACKAlSBG5hbWUSGgoIY3VyUHJpY2UYESACKAFS", 
            "CGN1clByaWNlEiYKDnByaWNlQ2hhbmdlVmFsGBIgAigBUg5wcmljZUNoYW5n", 
            "ZVZhbBIeCgpjaGFuZ2VSYXRlGBMgAigBUgpjaGFuZ2VSYXRlEhYKBnN0YXR1", 
            "cxgUIAIoBVIGc3RhdHVzEhoKCGJpZFByaWNlGBUgAigBUghiaWRQcmljZRIa", 
            "Cghhc2tQcmljZRgWIAIoAVIIYXNrUHJpY2USFgoGYmlkVm9sGBcgAigDUgZi", 
            "aWRWb2wSFgoGYXNrVm9sGBggAigDUgZhc2tWb2wSFgoGdm9sdW1lGBkgAigD", 
            "UgZ2b2x1bWUSGgoIdHVybm92ZXIYGiACKAFSCHR1cm5vdmVyEhQKBXNjb3Jl", 
            "GBsgAigBUgVzY29yZRIYCgdwcmVtaXVtGBwgAigBUgdwcmVtaXVtEiYKDmJy", 
            "ZWFrRXZlblBvaW50GB0gAigBUg5icmVha0V2ZW5Qb2ludBIaCghsZXZlcmFn", 
            "ZRgeIAIoAVIIbGV2ZXJhZ2USEgoEaXBvcBgfIAIoAVIEaXBvcBIuChJwcmlj", 
            "ZVJlY292ZXJ5UmF0aW8YICABKAFSEnByaWNlUmVjb3ZlcnlSYXRpbxIoCg9j", 
            "b252ZXJzaW9uUHJpY2UYISACKAFSD2NvbnZlcnNpb25QcmljZRIeCgpzdHJl", 
            "ZXRSYXRlGCIgAigBUgpzdHJlZXRSYXRlEhwKCXN0cmVldFZvbBgjIAIoA1IJ", 
            "c3RyZWV0Vm9sEhwKCWFtcGxpdHVkZRgkIAIoAVIJYW1wbGl0dWRlEhwKCWlz", 
            "c3VlU2l6ZRglIAIoA1IJaXNzdWVTaXplEhwKCWhpZ2hQcmljZRgnIAIoAVIJ", 
            "aGlnaFByaWNlEhoKCGxvd1ByaWNlGCggAigBUghsb3dQcmljZRIsChFpbXBs", 
            "aWVkVm9sYXRpbGl0eRgpIAEoAVIRaW1wbGllZFZvbGF0aWxpdHkSFAoFZGVs", 
            "dGEYKiABKAFSBWRlbHRhEiwKEWVmZmVjdGl2ZUxldmVyYWdlGCsgAigBUhFl", 
            "ZmZlY3RpdmVMZXZlcmFnZRIqChB1cHBlclN0cmlrZVByaWNlGCwgASgBUhB1", 
            "cHBlclN0cmlrZVByaWNlEioKEGxvd2VyU3RyaWtlUHJpY2UYLSABKAFSEGxv", 
            "d2VyU3RyaWtlUHJpY2USLAoRaW5MaW5lUHJpY2VTdGF0dXMYLiABKAVSEWlu", 
            "TGluZVByaWNlU3RhdHVzIoQBCgNTMkMSGgoIbGFzdFBhZ2UYASACKAhSCGxh", 
            "c3RQYWdlEhoKCGFsbENvdW50GAIgAigFUghhbGxDb3VudBJFCg93YXJyYW50", 
            "RGF0YUxpc3QYAyADKAsyGy5Rb3RfR2V0V2FycmFudC5XYXJyYW50RGF0YVIP", 
            "d2FycmFudERhdGFMaXN0IjAKB1JlcXVlc3QSJQoDYzJzGAEgAigLMhMuUW90", 
            "X0dldFdhcnJhbnQuQzJTUgNjMnMigwEKCFJlc3BvbnNlEh4KB3JldFR5cGUY", 
            "ASACKAU6BC00MDBSB3JldFR5cGUSFgoGcmV0TXNnGAIgASgJUgZyZXRNc2cS", 
            "GAoHZXJyQ29kZRgDIAEoBVIHZXJyQ29kZRIlCgNzMmMYBCABKAsyEy5Rb3Rf", 
            "R2V0V2FycmFudC5TMkNSA3MyY0JEChNjb20uZnV0dS5vcGVuYXBpLnBiWi1n", 
          "aXRodWIuY29tL2Z1dHVvcGVuL2Z0YXBpNGdvL3BiL3FvdGdldHdhcnJhbnQ="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_GetWarrant_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_GetWarrant_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.C2S, global::Futu.OpenApi.Pb.QotGetWarrant.C2S.Builder>(internal__static_Qot_GetWarrant_C2S__Descriptor,
                new string[] { "Begin", "Num", "SortField", "Ascend", "Owner", "TypeList", "IssuerList", "MaturityTimeMin", "MaturityTimeMax", "IpoPeriod", "PriceType", "Status", "CurPriceMin", "CurPriceMax", "StrikePriceMin", "StrikePriceMax", "StreetMin", "StreetMax", "ConversionMin", "ConversionMax", "VolMin", "VolMax", "PremiumMin", "PremiumMax", "LeverageRatioMin", "LeverageRatioMax", "DeltaMin", "DeltaMax", "ImpliedMin", "ImpliedMax", "RecoveryPriceMin", "RecoveryPriceMax", "PriceRecoveryRatioMin", "PriceRecoveryRatioMax", });
        internal__static_Qot_GetWarrant_WarrantData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_GetWarrant_WarrantData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData, global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.Builder>(internal__static_Qot_GetWarrant_WarrantData__Descriptor,
                new string[] { "Stock", "Owner", "Type", "Issuer", "MaturityTime", "MaturityTimestamp", "ListTime", "ListTimestamp", "LastTradeTime", "LastTradeTimestamp", "RecoveryPrice", "ConversionRatio", "LotSize", "StrikePrice", "LastClosePrice", "Name", "CurPrice", "PriceChangeVal", "ChangeRate", "Status", "BidPrice", "AskPrice", "BidVol", "AskVol", "Volume", "Turnover", "Score", "Premium", "BreakEvenPoint", "Leverage", "Ipop", "PriceRecoveryRatio", "ConversionPrice", "StreetRate", "StreetVol", "Amplitude", "IssueSize", "HighPrice", "LowPrice", "ImpliedVolatility", "Delta", "EffectiveLeverage", "UpperStrikePrice", "LowerStrikePrice", "InLinePriceStatus", });
        internal__static_Qot_GetWarrant_S2C__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_GetWarrant_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.S2C, global::Futu.OpenApi.Pb.QotGetWarrant.S2C.Builder>(internal__static_Qot_GetWarrant_S2C__Descriptor,
                new string[] { "LastPage", "AllCount", "WarrantDataList", });
        internal__static_Qot_GetWarrant_Request__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_GetWarrant_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.Request, global::Futu.OpenApi.Pb.QotGetWarrant.Request.Builder>(internal__static_Qot_GetWarrant_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_GetWarrant_Response__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_GetWarrant_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetWarrant.Response, global::Futu.OpenApi.Pb.QotGetWarrant.Response.Builder>(internal__static_Qot_GetWarrant_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          global::Futu.OpenApi.Pb.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "ascend", "begin", "conversionMax", "conversionMin", "curPriceMax", "curPriceMin", "deltaMax", "deltaMin", "impliedMax", "impliedMin", "ipoPeriod", "issuerList", "leverageRatioMax", "leverageRatioMin", "maturityTimeMax", "maturityTimeMin", "num", "owner", "premiumMax", "premiumMin", "priceRecoveryRatioMax", "priceRecoveryRatioMin", "priceType", "recoveryPriceMax", "recoveryPriceMin", "sortField", "status", "streetMax", "streetMin", "strikePriceMax", "strikePriceMin", "typeList", "volMax", "volMin" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 32, 8, 161, 153, 113, 105, 225, 217, 241, 233, 80, 56, 209, 201, 74, 66, 16, 42, 193, 185, 273, 265, 88, 257, 249, 24, 96, 145, 137, 129, 121, 48, 176, 168 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_C2S__FieldAccessorTable; }
      }
      
      public const int BeginFieldNumber = 1;
      private bool hasBegin;
      private int begin_;
      public bool HasBegin {
        get { return hasBegin; }
      }
      public int Begin {
        get { return begin_; }
      }
      
      public const int NumFieldNumber = 2;
      private bool hasNum;
      private int num_;
      public bool HasNum {
        get { return hasNum; }
      }
      public int Num {
        get { return num_; }
      }
      
      public const int SortFieldFieldNumber = 3;
      private bool hasSortField;
      private int sortField_;
      public bool HasSortField {
        get { return hasSortField; }
      }
      public int SortField {
        get { return sortField_; }
      }
      
      public const int AscendFieldNumber = 4;
      private bool hasAscend;
      private bool ascend_;
      public bool HasAscend {
        get { return hasAscend; }
      }
      public bool Ascend {
        get { return ascend_; }
      }
      
      public const int OwnerFieldNumber = 5;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int TypeListFieldNumber = 6;
      private pbc::PopsicleList<int> typeList_ = new pbc::PopsicleList<int>();
      public scg::IList<int> TypeListList {
        get { return pbc::Lists.AsReadOnly(typeList_); }
      }
      public int TypeListCount {
        get { return typeList_.Count; }
      }
      public int GetTypeList(int index) {
        return typeList_[index];
      }
      
      public const int IssuerListFieldNumber = 7;
      private pbc::PopsicleList<int> issuerList_ = new pbc::PopsicleList<int>();
      public scg::IList<int> IssuerListList {
        get { return pbc::Lists.AsReadOnly(issuerList_); }
      }
      public int IssuerListCount {
        get { return issuerList_.Count; }
      }
      public int GetIssuerList(int index) {
        return issuerList_[index];
      }
      
      public const int MaturityTimeMinFieldNumber = 8;
      private bool hasMaturityTimeMin;
      private string maturityTimeMin_ = "";
      public bool HasMaturityTimeMin {
        get { return hasMaturityTimeMin; }
      }
      public string MaturityTimeMin {
        get { return maturityTimeMin_; }
      }
      
      public const int MaturityTimeMaxFieldNumber = 9;
      private bool hasMaturityTimeMax;
      private string maturityTimeMax_ = "";
      public bool HasMaturityTimeMax {
        get { return hasMaturityTimeMax; }
      }
      public string MaturityTimeMax {
        get { return maturityTimeMax_; }
      }
      
      public const int IpoPeriodFieldNumber = 10;
      private bool hasIpoPeriod;
      private int ipoPeriod_;
      public bool HasIpoPeriod {
        get { return hasIpoPeriod; }
      }
      public int IpoPeriod {
        get { return ipoPeriod_; }
      }
      
      public const int PriceTypeFieldNumber = 11;
      private bool hasPriceType;
      private int priceType_;
      public bool HasPriceType {
        get { return hasPriceType; }
      }
      public int PriceType {
        get { return priceType_; }
      }
      
      public const int StatusFieldNumber = 12;
      private bool hasStatus;
      private int status_;
      public bool HasStatus {
        get { return hasStatus; }
      }
      public int Status {
        get { return status_; }
      }
      
      public const int CurPriceMinFieldNumber = 13;
      private bool hasCurPriceMin;
      private double curPriceMin_;
      public bool HasCurPriceMin {
        get { return hasCurPriceMin; }
      }
      public double CurPriceMin {
        get { return curPriceMin_; }
      }
      
      public const int CurPriceMaxFieldNumber = 14;
      private bool hasCurPriceMax;
      private double curPriceMax_;
      public bool HasCurPriceMax {
        get { return hasCurPriceMax; }
      }
      public double CurPriceMax {
        get { return curPriceMax_; }
      }
      
      public const int StrikePriceMinFieldNumber = 15;
      private bool hasStrikePriceMin;
      private double strikePriceMin_;
      public bool HasStrikePriceMin {
        get { return hasStrikePriceMin; }
      }
      public double StrikePriceMin {
        get { return strikePriceMin_; }
      }
      
      public const int StrikePriceMaxFieldNumber = 16;
      private bool hasStrikePriceMax;
      private double strikePriceMax_;
      public bool HasStrikePriceMax {
        get { return hasStrikePriceMax; }
      }
      public double StrikePriceMax {
        get { return strikePriceMax_; }
      }
      
      public const int StreetMinFieldNumber = 17;
      private bool hasStreetMin;
      private double streetMin_;
      public bool HasStreetMin {
        get { return hasStreetMin; }
      }
      public double StreetMin {
        get { return streetMin_; }
      }
      
      public const int StreetMaxFieldNumber = 18;
      private bool hasStreetMax;
      private double streetMax_;
      public bool HasStreetMax {
        get { return hasStreetMax; }
      }
      public double StreetMax {
        get { return streetMax_; }
      }
      
      public const int ConversionMinFieldNumber = 19;
      private bool hasConversionMin;
      private double conversionMin_;
      public bool HasConversionMin {
        get { return hasConversionMin; }
      }
      public double ConversionMin {
        get { return conversionMin_; }
      }
      
      public const int ConversionMaxFieldNumber = 20;
      private bool hasConversionMax;
      private double conversionMax_;
      public bool HasConversionMax {
        get { return hasConversionMax; }
      }
      public double ConversionMax {
        get { return conversionMax_; }
      }
      
      public const int VolMinFieldNumber = 21;
      private bool hasVolMin;
      private ulong volMin_;
      public bool HasVolMin {
        get { return hasVolMin; }
      }
      [global::System.CLSCompliant(false)]
      public ulong VolMin {
        get { return volMin_; }
      }
      
      public const int VolMaxFieldNumber = 22;
      private bool hasVolMax;
      private ulong volMax_;
      public bool HasVolMax {
        get { return hasVolMax; }
      }
      [global::System.CLSCompliant(false)]
      public ulong VolMax {
        get { return volMax_; }
      }
      
      public const int PremiumMinFieldNumber = 23;
      private bool hasPremiumMin;
      private double premiumMin_;
      public bool HasPremiumMin {
        get { return hasPremiumMin; }
      }
      public double PremiumMin {
        get { return premiumMin_; }
      }
      
      public const int PremiumMaxFieldNumber = 24;
      private bool hasPremiumMax;
      private double premiumMax_;
      public bool HasPremiumMax {
        get { return hasPremiumMax; }
      }
      public double PremiumMax {
        get { return premiumMax_; }
      }
      
      public const int LeverageRatioMinFieldNumber = 25;
      private bool hasLeverageRatioMin;
      private double leverageRatioMin_;
      public bool HasLeverageRatioMin {
        get { return hasLeverageRatioMin; }
      }
      public double LeverageRatioMin {
        get { return leverageRatioMin_; }
      }
      
      public const int LeverageRatioMaxFieldNumber = 26;
      private bool hasLeverageRatioMax;
      private double leverageRatioMax_;
      public bool HasLeverageRatioMax {
        get { return hasLeverageRatioMax; }
      }
      public double LeverageRatioMax {
        get { return leverageRatioMax_; }
      }
      
      public const int DeltaMinFieldNumber = 27;
      private bool hasDeltaMin;
      private double deltaMin_;
      public bool HasDeltaMin {
        get { return hasDeltaMin; }
      }
      public double DeltaMin {
        get { return deltaMin_; }
      }
      
      public const int DeltaMaxFieldNumber = 28;
      private bool hasDeltaMax;
      private double deltaMax_;
      public bool HasDeltaMax {
        get { return hasDeltaMax; }
      }
      public double DeltaMax {
        get { return deltaMax_; }
      }
      
      public const int ImpliedMinFieldNumber = 29;
      private bool hasImpliedMin;
      private double impliedMin_;
      public bool HasImpliedMin {
        get { return hasImpliedMin; }
      }
      public double ImpliedMin {
        get { return impliedMin_; }
      }
      
      public const int ImpliedMaxFieldNumber = 30;
      private bool hasImpliedMax;
      private double impliedMax_;
      public bool HasImpliedMax {
        get { return hasImpliedMax; }
      }
      public double ImpliedMax {
        get { return impliedMax_; }
      }
      
      public const int RecoveryPriceMinFieldNumber = 31;
      private bool hasRecoveryPriceMin;
      private double recoveryPriceMin_;
      public bool HasRecoveryPriceMin {
        get { return hasRecoveryPriceMin; }
      }
      public double RecoveryPriceMin {
        get { return recoveryPriceMin_; }
      }
      
      public const int RecoveryPriceMaxFieldNumber = 32;
      private bool hasRecoveryPriceMax;
      private double recoveryPriceMax_;
      public bool HasRecoveryPriceMax {
        get { return hasRecoveryPriceMax; }
      }
      public double RecoveryPriceMax {
        get { return recoveryPriceMax_; }
      }
      
      public const int PriceRecoveryRatioMinFieldNumber = 33;
      private bool hasPriceRecoveryRatioMin;
      private double priceRecoveryRatioMin_;
      public bool HasPriceRecoveryRatioMin {
        get { return hasPriceRecoveryRatioMin; }
      }
      public double PriceRecoveryRatioMin {
        get { return priceRecoveryRatioMin_; }
      }
      
      public const int PriceRecoveryRatioMaxFieldNumber = 34;
      private bool hasPriceRecoveryRatioMax;
      private double priceRecoveryRatioMax_;
      public bool HasPriceRecoveryRatioMax {
        get { return hasPriceRecoveryRatioMax; }
      }
      public double PriceRecoveryRatioMax {
        get { return priceRecoveryRatioMax_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasBegin) return false;
          if (!hasNum) return false;
          if (!hasSortField) return false;
          if (!hasAscend) return false;
          if (HasOwner) {
            if (!Owner.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (hasBegin) {
          output.WriteInt32(1, field_names[1], Begin);
        }
        if (hasNum) {
          output.WriteInt32(2, field_names[16], Num);
        }
        if (hasSortField) {
          output.WriteInt32(3, field_names[25], SortField);
        }
        if (hasAscend) {
          output.WriteBool(4, field_names[0], Ascend);
        }
        if (hasOwner) {
          output.WriteMessage(5, field_names[17], Owner);
        }
        if (typeList_.Count > 0) {
          output.WriteInt32Array(6, field_names[31], typeList_);
        }
        if (issuerList_.Count > 0) {
          output.WriteInt32Array(7, field_names[11], issuerList_);
        }
        if (hasMaturityTimeMin) {
          output.WriteString(8, field_names[15], MaturityTimeMin);
        }
        if (hasMaturityTimeMax) {
          output.WriteString(9, field_names[14], MaturityTimeMax);
        }
        if (hasIpoPeriod) {
          output.WriteInt32(10, field_names[10], IpoPeriod);
        }
        if (hasPriceType) {
          output.WriteInt32(11, field_names[22], PriceType);
        }
        if (hasStatus) {
          output.WriteInt32(12, field_names[26], Status);
        }
        if (hasCurPriceMin) {
          output.WriteDouble(13, field_names[5], CurPriceMin);
        }
        if (hasCurPriceMax) {
          output.WriteDouble(14, field_names[4], CurPriceMax);
        }
        if (hasStrikePriceMin) {
          output.WriteDouble(15, field_names[30], StrikePriceMin);
        }
        if (hasStrikePriceMax) {
          output.WriteDouble(16, field_names[29], StrikePriceMax);
        }
        if (hasStreetMin) {
          output.WriteDouble(17, field_names[28], StreetMin);
        }
        if (hasStreetMax) {
          output.WriteDouble(18, field_names[27], StreetMax);
        }
        if (hasConversionMin) {
          output.WriteDouble(19, field_names[3], ConversionMin);
        }
        if (hasConversionMax) {
          output.WriteDouble(20, field_names[2], ConversionMax);
        }
        if (hasVolMin) {
          output.WriteUInt64(21, field_names[33], VolMin);
        }
        if (hasVolMax) {
          output.WriteUInt64(22, field_names[32], VolMax);
        }
        if (hasPremiumMin) {
          output.WriteDouble(23, field_names[19], PremiumMin);
        }
        if (hasPremiumMax) {
          output.WriteDouble(24, field_names[18], PremiumMax);
        }
        if (hasLeverageRatioMin) {
          output.WriteDouble(25, field_names[13], LeverageRatioMin);
        }
        if (hasLeverageRatioMax) {
          output.WriteDouble(26, field_names[12], LeverageRatioMax);
        }
        if (hasDeltaMin) {
          output.WriteDouble(27, field_names[7], DeltaMin);
        }
        if (hasDeltaMax) {
          output.WriteDouble(28, field_names[6], DeltaMax);
        }
        if (hasImpliedMin) {
          output.WriteDouble(29, field_names[9], ImpliedMin);
        }
        if (hasImpliedMax) {
          output.WriteDouble(30, field_names[8], ImpliedMax);
        }
        if (hasRecoveryPriceMin) {
          output.WriteDouble(31, field_names[24], RecoveryPriceMin);
        }
        if (hasRecoveryPriceMax) {
          output.WriteDouble(32, field_names[23], RecoveryPriceMax);
        }
        if (hasPriceRecoveryRatioMin) {
          output.WriteDouble(33, field_names[21], PriceRecoveryRatioMin);
        }
        if (hasPriceRecoveryRatioMax) {
          output.WriteDouble(34, field_names[20], PriceRecoveryRatioMax);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBegin) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Begin);
        }
        if (hasNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
        }
        if (hasSortField) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SortField);
        }
        if (hasAscend) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Ascend);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Owner);
        }
        {
          int dataSize = 0;
          foreach (int element in TypeListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * typeList_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in IssuerListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * issuerList_.Count;
        }
        if (hasMaturityTimeMin) {
          size += pb::CodedOutputStream.ComputeStringSize(8, MaturityTimeMin);
        }
        if (hasMaturityTimeMax) {
          size += pb::CodedOutputStream.ComputeStringSize(9, MaturityTimeMax);
        }
        if (hasIpoPeriod) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, IpoPeriod);
        }
        if (hasPriceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, PriceType);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Status);
        }
        if (hasCurPriceMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, CurPriceMin);
        }
        if (hasCurPriceMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, CurPriceMax);
        }
        if (hasStrikePriceMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, StrikePriceMin);
        }
        if (hasStrikePriceMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, StrikePriceMax);
        }
        if (hasStreetMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, StreetMin);
        }
        if (hasStreetMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, StreetMax);
        }
        if (hasConversionMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, ConversionMin);
        }
        if (hasConversionMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, ConversionMax);
        }
        if (hasVolMin) {
          size += pb::CodedOutputStream.ComputeUInt64Size(21, VolMin);
        }
        if (hasVolMax) {
          size += pb::CodedOutputStream.ComputeUInt64Size(22, VolMax);
        }
        if (hasPremiumMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, PremiumMin);
        }
        if (hasPremiumMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, PremiumMax);
        }
        if (hasLeverageRatioMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, LeverageRatioMin);
        }
        if (hasLeverageRatioMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, LeverageRatioMax);
        }
        if (hasDeltaMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, DeltaMin);
        }
        if (hasDeltaMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, DeltaMax);
        }
        if (hasImpliedMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, ImpliedMin);
        }
        if (hasImpliedMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, ImpliedMax);
        }
        if (hasRecoveryPriceMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, RecoveryPriceMin);
        }
        if (hasRecoveryPriceMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, RecoveryPriceMax);
        }
        if (hasPriceRecoveryRatioMin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, PriceRecoveryRatioMin);
        }
        if (hasPriceRecoveryRatioMax) {
          size += pb::CodedOutputStream.ComputeDoubleSize(34, PriceRecoveryRatioMax);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        typeList_.MakeReadOnly();
        issuerList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.QotGetWarrant.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBegin) {
            Begin = other.Begin;
          }
          if (other.HasNum) {
            Num = other.Num;
          }
          if (other.HasSortField) {
            SortField = other.SortField;
          }
          if (other.HasAscend) {
            Ascend = other.Ascend;
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          if (other.typeList_.Count != 0) {
            result.typeList_.Add(other.typeList_);
          }
          if (other.issuerList_.Count != 0) {
            result.issuerList_.Add(other.issuerList_);
          }
          if (other.HasMaturityTimeMin) {
            MaturityTimeMin = other.MaturityTimeMin;
          }
          if (other.HasMaturityTimeMax) {
            MaturityTimeMax = other.MaturityTimeMax;
          }
          if (other.HasIpoPeriod) {
            IpoPeriod = other.IpoPeriod;
          }
          if (other.HasPriceType) {
            PriceType = other.PriceType;
          }
          if (other.HasStatus) {
            Status = other.Status;
          }
          if (other.HasCurPriceMin) {
            CurPriceMin = other.CurPriceMin;
          }
          if (other.HasCurPriceMax) {
            CurPriceMax = other.CurPriceMax;
          }
          if (other.HasStrikePriceMin) {
            StrikePriceMin = other.StrikePriceMin;
          }
          if (other.HasStrikePriceMax) {
            StrikePriceMax = other.StrikePriceMax;
          }
          if (other.HasStreetMin) {
            StreetMin = other.StreetMin;
          }
          if (other.HasStreetMax) {
            StreetMax = other.StreetMax;
          }
          if (other.HasConversionMin) {
            ConversionMin = other.ConversionMin;
          }
          if (other.HasConversionMax) {
            ConversionMax = other.ConversionMax;
          }
          if (other.HasVolMin) {
            VolMin = other.VolMin;
          }
          if (other.HasVolMax) {
            VolMax = other.VolMax;
          }
          if (other.HasPremiumMin) {
            PremiumMin = other.PremiumMin;
          }
          if (other.HasPremiumMax) {
            PremiumMax = other.PremiumMax;
          }
          if (other.HasLeverageRatioMin) {
            LeverageRatioMin = other.LeverageRatioMin;
          }
          if (other.HasLeverageRatioMax) {
            LeverageRatioMax = other.LeverageRatioMax;
          }
          if (other.HasDeltaMin) {
            DeltaMin = other.DeltaMin;
          }
          if (other.HasDeltaMax) {
            DeltaMax = other.DeltaMax;
          }
          if (other.HasImpliedMin) {
            ImpliedMin = other.ImpliedMin;
          }
          if (other.HasImpliedMax) {
            ImpliedMax = other.ImpliedMax;
          }
          if (other.HasRecoveryPriceMin) {
            RecoveryPriceMin = other.RecoveryPriceMin;
          }
          if (other.HasRecoveryPriceMax) {
            RecoveryPriceMax = other.RecoveryPriceMax;
          }
          if (other.HasPriceRecoveryRatioMin) {
            PriceRecoveryRatioMin = other.PriceRecoveryRatioMin;
          }
          if (other.HasPriceRecoveryRatioMax) {
            PriceRecoveryRatioMax = other.PriceRecoveryRatioMax;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasBegin = input.ReadInt32(ref result.begin_);
                break;
              }
              case 16: {
                result.hasNum = input.ReadInt32(ref result.num_);
                break;
              }
              case 24: {
                result.hasSortField = input.ReadInt32(ref result.sortField_);
                break;
              }
              case 32: {
                result.hasAscend = input.ReadBool(ref result.ascend_);
                break;
              }
              case 42: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
              case 50:
              case 48: {
                input.ReadInt32Array(tag, field_name, result.typeList_);
                break;
              }
              case 58:
              case 56: {
                input.ReadInt32Array(tag, field_name, result.issuerList_);
                break;
              }
              case 66: {
                result.hasMaturityTimeMin = input.ReadString(ref result.maturityTimeMin_);
                break;
              }
              case 74: {
                result.hasMaturityTimeMax = input.ReadString(ref result.maturityTimeMax_);
                break;
              }
              case 80: {
                result.hasIpoPeriod = input.ReadInt32(ref result.ipoPeriod_);
                break;
              }
              case 88: {
                result.hasPriceType = input.ReadInt32(ref result.priceType_);
                break;
              }
              case 96: {
                result.hasStatus = input.ReadInt32(ref result.status_);
                break;
              }
              case 105: {
                result.hasCurPriceMin = input.ReadDouble(ref result.curPriceMin_);
                break;
              }
              case 113: {
                result.hasCurPriceMax = input.ReadDouble(ref result.curPriceMax_);
                break;
              }
              case 121: {
                result.hasStrikePriceMin = input.ReadDouble(ref result.strikePriceMin_);
                break;
              }
              case 129: {
                result.hasStrikePriceMax = input.ReadDouble(ref result.strikePriceMax_);
                break;
              }
              case 137: {
                result.hasStreetMin = input.ReadDouble(ref result.streetMin_);
                break;
              }
              case 145: {
                result.hasStreetMax = input.ReadDouble(ref result.streetMax_);
                break;
              }
              case 153: {
                result.hasConversionMin = input.ReadDouble(ref result.conversionMin_);
                break;
              }
              case 161: {
                result.hasConversionMax = input.ReadDouble(ref result.conversionMax_);
                break;
              }
              case 168: {
                result.hasVolMin = input.ReadUInt64(ref result.volMin_);
                break;
              }
              case 176: {
                result.hasVolMax = input.ReadUInt64(ref result.volMax_);
                break;
              }
              case 185: {
                result.hasPremiumMin = input.ReadDouble(ref result.premiumMin_);
                break;
              }
              case 193: {
                result.hasPremiumMax = input.ReadDouble(ref result.premiumMax_);
                break;
              }
              case 201: {
                result.hasLeverageRatioMin = input.ReadDouble(ref result.leverageRatioMin_);
                break;
              }
              case 209: {
                result.hasLeverageRatioMax = input.ReadDouble(ref result.leverageRatioMax_);
                break;
              }
              case 217: {
                result.hasDeltaMin = input.ReadDouble(ref result.deltaMin_);
                break;
              }
              case 225: {
                result.hasDeltaMax = input.ReadDouble(ref result.deltaMax_);
                break;
              }
              case 233: {
                result.hasImpliedMin = input.ReadDouble(ref result.impliedMin_);
                break;
              }
              case 241: {
                result.hasImpliedMax = input.ReadDouble(ref result.impliedMax_);
                break;
              }
              case 249: {
                result.hasRecoveryPriceMin = input.ReadDouble(ref result.recoveryPriceMin_);
                break;
              }
              case 257: {
                result.hasRecoveryPriceMax = input.ReadDouble(ref result.recoveryPriceMax_);
                break;
              }
              case 265: {
                result.hasPriceRecoveryRatioMin = input.ReadDouble(ref result.priceRecoveryRatioMin_);
                break;
              }
              case 273: {
                result.hasPriceRecoveryRatioMax = input.ReadDouble(ref result.priceRecoveryRatioMax_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBegin {
          get { return result.hasBegin; }
        }
        public int Begin {
          get { return result.Begin; }
          set { SetBegin(value); }
        }
        public Builder SetBegin(int value) {
          PrepareBuilder();
          result.hasBegin = true;
          result.begin_ = value;
          return this;
        }
        public Builder ClearBegin() {
          PrepareBuilder();
          result.hasBegin = false;
          result.begin_ = 0;
          return this;
        }
        
        public bool HasNum {
          get { return result.hasNum; }
        }
        public int Num {
          get { return result.Num; }
          set { SetNum(value); }
        }
        public Builder SetNum(int value) {
          PrepareBuilder();
          result.hasNum = true;
          result.num_ = value;
          return this;
        }
        public Builder ClearNum() {
          PrepareBuilder();
          result.hasNum = false;
          result.num_ = 0;
          return this;
        }
        
        public bool HasSortField {
          get { return result.hasSortField; }
        }
        public int SortField {
          get { return result.SortField; }
          set { SetSortField(value); }
        }
        public Builder SetSortField(int value) {
          PrepareBuilder();
          result.hasSortField = true;
          result.sortField_ = value;
          return this;
        }
        public Builder ClearSortField() {
          PrepareBuilder();
          result.hasSortField = false;
          result.sortField_ = 0;
          return this;
        }
        
        public bool HasAscend {
          get { return result.hasAscend; }
        }
        public bool Ascend {
          get { return result.Ascend; }
          set { SetAscend(value); }
        }
        public Builder SetAscend(bool value) {
          PrepareBuilder();
          result.hasAscend = true;
          result.ascend_ = value;
          return this;
        }
        public Builder ClearAscend() {
          PrepareBuilder();
          result.hasAscend = false;
          result.ascend_ = false;
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
        
        public pbc::IPopsicleList<int> TypeListList {
          get { return PrepareBuilder().typeList_; }
        }
        public int TypeListCount {
          get { return result.TypeListCount; }
        }
        public int GetTypeList(int index) {
          return result.GetTypeList(index);
        }
        public Builder SetTypeList(int index, int value) {
          PrepareBuilder();
          result.typeList_[index] = value;
          return this;
        }
        public Builder AddTypeList(int value) {
          PrepareBuilder();
          result.typeList_.Add(value);
          return this;
        }
        public Builder AddRangeTypeList(scg::IEnumerable<int> values) {
          PrepareBuilder();
          result.typeList_.Add(values);
          return this;
        }
        public Builder ClearTypeList() {
          PrepareBuilder();
          result.typeList_.Clear();
          return this;
        }
        
        public pbc::IPopsicleList<int> IssuerListList {
          get { return PrepareBuilder().issuerList_; }
        }
        public int IssuerListCount {
          get { return result.IssuerListCount; }
        }
        public int GetIssuerList(int index) {
          return result.GetIssuerList(index);
        }
        public Builder SetIssuerList(int index, int value) {
          PrepareBuilder();
          result.issuerList_[index] = value;
          return this;
        }
        public Builder AddIssuerList(int value) {
          PrepareBuilder();
          result.issuerList_.Add(value);
          return this;
        }
        public Builder AddRangeIssuerList(scg::IEnumerable<int> values) {
          PrepareBuilder();
          result.issuerList_.Add(values);
          return this;
        }
        public Builder ClearIssuerList() {
          PrepareBuilder();
          result.issuerList_.Clear();
          return this;
        }
        
        public bool HasMaturityTimeMin {
          get { return result.hasMaturityTimeMin; }
        }
        public string MaturityTimeMin {
          get { return result.MaturityTimeMin; }
          set { SetMaturityTimeMin(value); }
        }
        public Builder SetMaturityTimeMin(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMaturityTimeMin = true;
          result.maturityTimeMin_ = value;
          return this;
        }
        public Builder ClearMaturityTimeMin() {
          PrepareBuilder();
          result.hasMaturityTimeMin = false;
          result.maturityTimeMin_ = "";
          return this;
        }
        
        public bool HasMaturityTimeMax {
          get { return result.hasMaturityTimeMax; }
        }
        public string MaturityTimeMax {
          get { return result.MaturityTimeMax; }
          set { SetMaturityTimeMax(value); }
        }
        public Builder SetMaturityTimeMax(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMaturityTimeMax = true;
          result.maturityTimeMax_ = value;
          return this;
        }
        public Builder ClearMaturityTimeMax() {
          PrepareBuilder();
          result.hasMaturityTimeMax = false;
          result.maturityTimeMax_ = "";
          return this;
        }
        
        public bool HasIpoPeriod {
          get { return result.hasIpoPeriod; }
        }
        public int IpoPeriod {
          get { return result.IpoPeriod; }
          set { SetIpoPeriod(value); }
        }
        public Builder SetIpoPeriod(int value) {
          PrepareBuilder();
          result.hasIpoPeriod = true;
          result.ipoPeriod_ = value;
          return this;
        }
        public Builder ClearIpoPeriod() {
          PrepareBuilder();
          result.hasIpoPeriod = false;
          result.ipoPeriod_ = 0;
          return this;
        }
        
        public bool HasPriceType {
          get { return result.hasPriceType; }
        }
        public int PriceType {
          get { return result.PriceType; }
          set { SetPriceType(value); }
        }
        public Builder SetPriceType(int value) {
          PrepareBuilder();
          result.hasPriceType = true;
          result.priceType_ = value;
          return this;
        }
        public Builder ClearPriceType() {
          PrepareBuilder();
          result.hasPriceType = false;
          result.priceType_ = 0;
          return this;
        }
        
        public bool HasStatus {
          get { return result.hasStatus; }
        }
        public int Status {
          get { return result.Status; }
          set { SetStatus(value); }
        }
        public Builder SetStatus(int value) {
          PrepareBuilder();
          result.hasStatus = true;
          result.status_ = value;
          return this;
        }
        public Builder ClearStatus() {
          PrepareBuilder();
          result.hasStatus = false;
          result.status_ = 0;
          return this;
        }
        
        public bool HasCurPriceMin {
          get { return result.hasCurPriceMin; }
        }
        public double CurPriceMin {
          get { return result.CurPriceMin; }
          set { SetCurPriceMin(value); }
        }
        public Builder SetCurPriceMin(double value) {
          PrepareBuilder();
          result.hasCurPriceMin = true;
          result.curPriceMin_ = value;
          return this;
        }
        public Builder ClearCurPriceMin() {
          PrepareBuilder();
          result.hasCurPriceMin = false;
          result.curPriceMin_ = 0D;
          return this;
        }
        
        public bool HasCurPriceMax {
          get { return result.hasCurPriceMax; }
        }
        public double CurPriceMax {
          get { return result.CurPriceMax; }
          set { SetCurPriceMax(value); }
        }
        public Builder SetCurPriceMax(double value) {
          PrepareBuilder();
          result.hasCurPriceMax = true;
          result.curPriceMax_ = value;
          return this;
        }
        public Builder ClearCurPriceMax() {
          PrepareBuilder();
          result.hasCurPriceMax = false;
          result.curPriceMax_ = 0D;
          return this;
        }
        
        public bool HasStrikePriceMin {
          get { return result.hasStrikePriceMin; }
        }
        public double StrikePriceMin {
          get { return result.StrikePriceMin; }
          set { SetStrikePriceMin(value); }
        }
        public Builder SetStrikePriceMin(double value) {
          PrepareBuilder();
          result.hasStrikePriceMin = true;
          result.strikePriceMin_ = value;
          return this;
        }
        public Builder ClearStrikePriceMin() {
          PrepareBuilder();
          result.hasStrikePriceMin = false;
          result.strikePriceMin_ = 0D;
          return this;
        }
        
        public bool HasStrikePriceMax {
          get { return result.hasStrikePriceMax; }
        }
        public double StrikePriceMax {
          get { return result.StrikePriceMax; }
          set { SetStrikePriceMax(value); }
        }
        public Builder SetStrikePriceMax(double value) {
          PrepareBuilder();
          result.hasStrikePriceMax = true;
          result.strikePriceMax_ = value;
          return this;
        }
        public Builder ClearStrikePriceMax() {
          PrepareBuilder();
          result.hasStrikePriceMax = false;
          result.strikePriceMax_ = 0D;
          return this;
        }
        
        public bool HasStreetMin {
          get { return result.hasStreetMin; }
        }
        public double StreetMin {
          get { return result.StreetMin; }
          set { SetStreetMin(value); }
        }
        public Builder SetStreetMin(double value) {
          PrepareBuilder();
          result.hasStreetMin = true;
          result.streetMin_ = value;
          return this;
        }
        public Builder ClearStreetMin() {
          PrepareBuilder();
          result.hasStreetMin = false;
          result.streetMin_ = 0D;
          return this;
        }
        
        public bool HasStreetMax {
          get { return result.hasStreetMax; }
        }
        public double StreetMax {
          get { return result.StreetMax; }
          set { SetStreetMax(value); }
        }
        public Builder SetStreetMax(double value) {
          PrepareBuilder();
          result.hasStreetMax = true;
          result.streetMax_ = value;
          return this;
        }
        public Builder ClearStreetMax() {
          PrepareBuilder();
          result.hasStreetMax = false;
          result.streetMax_ = 0D;
          return this;
        }
        
        public bool HasConversionMin {
          get { return result.hasConversionMin; }
        }
        public double ConversionMin {
          get { return result.ConversionMin; }
          set { SetConversionMin(value); }
        }
        public Builder SetConversionMin(double value) {
          PrepareBuilder();
          result.hasConversionMin = true;
          result.conversionMin_ = value;
          return this;
        }
        public Builder ClearConversionMin() {
          PrepareBuilder();
          result.hasConversionMin = false;
          result.conversionMin_ = 0D;
          return this;
        }
        
        public bool HasConversionMax {
          get { return result.hasConversionMax; }
        }
        public double ConversionMax {
          get { return result.ConversionMax; }
          set { SetConversionMax(value); }
        }
        public Builder SetConversionMax(double value) {
          PrepareBuilder();
          result.hasConversionMax = true;
          result.conversionMax_ = value;
          return this;
        }
        public Builder ClearConversionMax() {
          PrepareBuilder();
          result.hasConversionMax = false;
          result.conversionMax_ = 0D;
          return this;
        }
        
        public bool HasVolMin {
          get { return result.hasVolMin; }
        }
        [global::System.CLSCompliant(false)]
        public ulong VolMin {
          get { return result.VolMin; }
          set { SetVolMin(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetVolMin(ulong value) {
          PrepareBuilder();
          result.hasVolMin = true;
          result.volMin_ = value;
          return this;
        }
        public Builder ClearVolMin() {
          PrepareBuilder();
          result.hasVolMin = false;
          result.volMin_ = 0UL;
          return this;
        }
        
        public bool HasVolMax {
          get { return result.hasVolMax; }
        }
        [global::System.CLSCompliant(false)]
        public ulong VolMax {
          get { return result.VolMax; }
          set { SetVolMax(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetVolMax(ulong value) {
          PrepareBuilder();
          result.hasVolMax = true;
          result.volMax_ = value;
          return this;
        }
        public Builder ClearVolMax() {
          PrepareBuilder();
          result.hasVolMax = false;
          result.volMax_ = 0UL;
          return this;
        }
        
        public bool HasPremiumMin {
          get { return result.hasPremiumMin; }
        }
        public double PremiumMin {
          get { return result.PremiumMin; }
          set { SetPremiumMin(value); }
        }
        public Builder SetPremiumMin(double value) {
          PrepareBuilder();
          result.hasPremiumMin = true;
          result.premiumMin_ = value;
          return this;
        }
        public Builder ClearPremiumMin() {
          PrepareBuilder();
          result.hasPremiumMin = false;
          result.premiumMin_ = 0D;
          return this;
        }
        
        public bool HasPremiumMax {
          get { return result.hasPremiumMax; }
        }
        public double PremiumMax {
          get { return result.PremiumMax; }
          set { SetPremiumMax(value); }
        }
        public Builder SetPremiumMax(double value) {
          PrepareBuilder();
          result.hasPremiumMax = true;
          result.premiumMax_ = value;
          return this;
        }
        public Builder ClearPremiumMax() {
          PrepareBuilder();
          result.hasPremiumMax = false;
          result.premiumMax_ = 0D;
          return this;
        }
        
        public bool HasLeverageRatioMin {
          get { return result.hasLeverageRatioMin; }
        }
        public double LeverageRatioMin {
          get { return result.LeverageRatioMin; }
          set { SetLeverageRatioMin(value); }
        }
        public Builder SetLeverageRatioMin(double value) {
          PrepareBuilder();
          result.hasLeverageRatioMin = true;
          result.leverageRatioMin_ = value;
          return this;
        }
        public Builder ClearLeverageRatioMin() {
          PrepareBuilder();
          result.hasLeverageRatioMin = false;
          result.leverageRatioMin_ = 0D;
          return this;
        }
        
        public bool HasLeverageRatioMax {
          get { return result.hasLeverageRatioMax; }
        }
        public double LeverageRatioMax {
          get { return result.LeverageRatioMax; }
          set { SetLeverageRatioMax(value); }
        }
        public Builder SetLeverageRatioMax(double value) {
          PrepareBuilder();
          result.hasLeverageRatioMax = true;
          result.leverageRatioMax_ = value;
          return this;
        }
        public Builder ClearLeverageRatioMax() {
          PrepareBuilder();
          result.hasLeverageRatioMax = false;
          result.leverageRatioMax_ = 0D;
          return this;
        }
        
        public bool HasDeltaMin {
          get { return result.hasDeltaMin; }
        }
        public double DeltaMin {
          get { return result.DeltaMin; }
          set { SetDeltaMin(value); }
        }
        public Builder SetDeltaMin(double value) {
          PrepareBuilder();
          result.hasDeltaMin = true;
          result.deltaMin_ = value;
          return this;
        }
        public Builder ClearDeltaMin() {
          PrepareBuilder();
          result.hasDeltaMin = false;
          result.deltaMin_ = 0D;
          return this;
        }
        
        public bool HasDeltaMax {
          get { return result.hasDeltaMax; }
        }
        public double DeltaMax {
          get { return result.DeltaMax; }
          set { SetDeltaMax(value); }
        }
        public Builder SetDeltaMax(double value) {
          PrepareBuilder();
          result.hasDeltaMax = true;
          result.deltaMax_ = value;
          return this;
        }
        public Builder ClearDeltaMax() {
          PrepareBuilder();
          result.hasDeltaMax = false;
          result.deltaMax_ = 0D;
          return this;
        }
        
        public bool HasImpliedMin {
          get { return result.hasImpliedMin; }
        }
        public double ImpliedMin {
          get { return result.ImpliedMin; }
          set { SetImpliedMin(value); }
        }
        public Builder SetImpliedMin(double value) {
          PrepareBuilder();
          result.hasImpliedMin = true;
          result.impliedMin_ = value;
          return this;
        }
        public Builder ClearImpliedMin() {
          PrepareBuilder();
          result.hasImpliedMin = false;
          result.impliedMin_ = 0D;
          return this;
        }
        
        public bool HasImpliedMax {
          get { return result.hasImpliedMax; }
        }
        public double ImpliedMax {
          get { return result.ImpliedMax; }
          set { SetImpliedMax(value); }
        }
        public Builder SetImpliedMax(double value) {
          PrepareBuilder();
          result.hasImpliedMax = true;
          result.impliedMax_ = value;
          return this;
        }
        public Builder ClearImpliedMax() {
          PrepareBuilder();
          result.hasImpliedMax = false;
          result.impliedMax_ = 0D;
          return this;
        }
        
        public bool HasRecoveryPriceMin {
          get { return result.hasRecoveryPriceMin; }
        }
        public double RecoveryPriceMin {
          get { return result.RecoveryPriceMin; }
          set { SetRecoveryPriceMin(value); }
        }
        public Builder SetRecoveryPriceMin(double value) {
          PrepareBuilder();
          result.hasRecoveryPriceMin = true;
          result.recoveryPriceMin_ = value;
          return this;
        }
        public Builder ClearRecoveryPriceMin() {
          PrepareBuilder();
          result.hasRecoveryPriceMin = false;
          result.recoveryPriceMin_ = 0D;
          return this;
        }
        
        public bool HasRecoveryPriceMax {
          get { return result.hasRecoveryPriceMax; }
        }
        public double RecoveryPriceMax {
          get { return result.RecoveryPriceMax; }
          set { SetRecoveryPriceMax(value); }
        }
        public Builder SetRecoveryPriceMax(double value) {
          PrepareBuilder();
          result.hasRecoveryPriceMax = true;
          result.recoveryPriceMax_ = value;
          return this;
        }
        public Builder ClearRecoveryPriceMax() {
          PrepareBuilder();
          result.hasRecoveryPriceMax = false;
          result.recoveryPriceMax_ = 0D;
          return this;
        }
        
        public bool HasPriceRecoveryRatioMin {
          get { return result.hasPriceRecoveryRatioMin; }
        }
        public double PriceRecoveryRatioMin {
          get { return result.PriceRecoveryRatioMin; }
          set { SetPriceRecoveryRatioMin(value); }
        }
        public Builder SetPriceRecoveryRatioMin(double value) {
          PrepareBuilder();
          result.hasPriceRecoveryRatioMin = true;
          result.priceRecoveryRatioMin_ = value;
          return this;
        }
        public Builder ClearPriceRecoveryRatioMin() {
          PrepareBuilder();
          result.hasPriceRecoveryRatioMin = false;
          result.priceRecoveryRatioMin_ = 0D;
          return this;
        }
        
        public bool HasPriceRecoveryRatioMax {
          get { return result.hasPriceRecoveryRatioMax; }
        }
        public double PriceRecoveryRatioMax {
          get { return result.PriceRecoveryRatioMax; }
          set { SetPriceRecoveryRatioMax(value); }
        }
        public Builder SetPriceRecoveryRatioMax(double value) {
          PrepareBuilder();
          result.hasPriceRecoveryRatioMax = true;
          result.priceRecoveryRatioMax_ = value;
          return this;
        }
        public Builder ClearPriceRecoveryRatioMax() {
          PrepareBuilder();
          result.hasPriceRecoveryRatioMax = false;
          result.priceRecoveryRatioMax_ = 0D;
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetWarrant.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class WarrantData : pb::GeneratedMessage<WarrantData, WarrantData.Builder> {
      private WarrantData() { }
      private static readonly WarrantData defaultInstance = new WarrantData().MakeReadOnly();
      private static readonly string[] _warrantDataFieldNames = new string[] { "amplitude", "askPrice", "askVol", "bidPrice", "bidVol", "breakEvenPoint", "changeRate", "conversionPrice", "conversionRatio", "curPrice", "delta", "effectiveLeverage", "highPrice", "impliedVolatility", "inLinePriceStatus", "ipop", "issueSize", "issuer", "lastClosePrice", "lastTradeTime", "lastTradeTimestamp", "leverage", "listTime", "listTimestamp", "lotSize", "lowPrice", "lowerStrikePrice", "maturityTime", "maturityTimestamp", "name", "owner", "premium", "priceChangeVal", "priceRecoveryRatio", "recoveryPrice", "score", "status", "stock", "streetRate", "streetVol", "strikePrice", "turnover", "type", "upperStrikePrice", "volume" };
      private static readonly uint[] _warrantDataFieldTags = new uint[] { 289, 177, 192, 169, 184, 233, 153, 265, 97, 137, 337, 345, 313, 329, 368, 249, 296, 32, 121, 74, 81, 241, 58, 65, 104, 321, 361, 42, 49, 130, 18, 225, 145, 257, 89, 217, 160, 10, 273, 280, 113, 209, 24, 353, 200 };
      public static WarrantData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override WarrantData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override WarrantData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_WarrantData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<WarrantData, WarrantData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_WarrantData__FieldAccessorTable; }
      }
      
      public const int StockFieldNumber = 1;
      private bool hasStock;
      private global::Futu.OpenApi.Pb.QotCommon.Security stock_;
      public bool HasStock {
        get { return hasStock; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Stock {
        get { return stock_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int OwnerFieldNumber = 2;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int TypeFieldNumber = 3;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int IssuerFieldNumber = 4;
      private bool hasIssuer;
      private int issuer_;
      public bool HasIssuer {
        get { return hasIssuer; }
      }
      public int Issuer {
        get { return issuer_; }
      }
      
      public const int MaturityTimeFieldNumber = 5;
      private bool hasMaturityTime;
      private string maturityTime_ = "";
      public bool HasMaturityTime {
        get { return hasMaturityTime; }
      }
      public string MaturityTime {
        get { return maturityTime_; }
      }
      
      public const int MaturityTimestampFieldNumber = 6;
      private bool hasMaturityTimestamp;
      private double maturityTimestamp_;
      public bool HasMaturityTimestamp {
        get { return hasMaturityTimestamp; }
      }
      public double MaturityTimestamp {
        get { return maturityTimestamp_; }
      }
      
      public const int ListTimeFieldNumber = 7;
      private bool hasListTime;
      private string listTime_ = "";
      public bool HasListTime {
        get { return hasListTime; }
      }
      public string ListTime {
        get { return listTime_; }
      }
      
      public const int ListTimestampFieldNumber = 8;
      private bool hasListTimestamp;
      private double listTimestamp_;
      public bool HasListTimestamp {
        get { return hasListTimestamp; }
      }
      public double ListTimestamp {
        get { return listTimestamp_; }
      }
      
      public const int LastTradeTimeFieldNumber = 9;
      private bool hasLastTradeTime;
      private string lastTradeTime_ = "";
      public bool HasLastTradeTime {
        get { return hasLastTradeTime; }
      }
      public string LastTradeTime {
        get { return lastTradeTime_; }
      }
      
      public const int LastTradeTimestampFieldNumber = 10;
      private bool hasLastTradeTimestamp;
      private double lastTradeTimestamp_;
      public bool HasLastTradeTimestamp {
        get { return hasLastTradeTimestamp; }
      }
      public double LastTradeTimestamp {
        get { return lastTradeTimestamp_; }
      }
      
      public const int RecoveryPriceFieldNumber = 11;
      private bool hasRecoveryPrice;
      private double recoveryPrice_;
      public bool HasRecoveryPrice {
        get { return hasRecoveryPrice; }
      }
      public double RecoveryPrice {
        get { return recoveryPrice_; }
      }
      
      public const int ConversionRatioFieldNumber = 12;
      private bool hasConversionRatio;
      private double conversionRatio_;
      public bool HasConversionRatio {
        get { return hasConversionRatio; }
      }
      public double ConversionRatio {
        get { return conversionRatio_; }
      }
      
      public const int LotSizeFieldNumber = 13;
      private bool hasLotSize;
      private int lotSize_;
      public bool HasLotSize {
        get { return hasLotSize; }
      }
      public int LotSize {
        get { return lotSize_; }
      }
      
      public const int StrikePriceFieldNumber = 14;
      private bool hasStrikePrice;
      private double strikePrice_;
      public bool HasStrikePrice {
        get { return hasStrikePrice; }
      }
      public double StrikePrice {
        get { return strikePrice_; }
      }
      
      public const int LastClosePriceFieldNumber = 15;
      private bool hasLastClosePrice;
      private double lastClosePrice_;
      public bool HasLastClosePrice {
        get { return hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return lastClosePrice_; }
      }
      
      public const int NameFieldNumber = 16;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int CurPriceFieldNumber = 17;
      private bool hasCurPrice;
      private double curPrice_;
      public bool HasCurPrice {
        get { return hasCurPrice; }
      }
      public double CurPrice {
        get { return curPrice_; }
      }
      
      public const int PriceChangeValFieldNumber = 18;
      private bool hasPriceChangeVal;
      private double priceChangeVal_;
      public bool HasPriceChangeVal {
        get { return hasPriceChangeVal; }
      }
      public double PriceChangeVal {
        get { return priceChangeVal_; }
      }
      
      public const int ChangeRateFieldNumber = 19;
      private bool hasChangeRate;
      private double changeRate_;
      public bool HasChangeRate {
        get { return hasChangeRate; }
      }
      public double ChangeRate {
        get { return changeRate_; }
      }
      
      public const int StatusFieldNumber = 20;
      private bool hasStatus;
      private int status_;
      public bool HasStatus {
        get { return hasStatus; }
      }
      public int Status {
        get { return status_; }
      }
      
      public const int BidPriceFieldNumber = 21;
      private bool hasBidPrice;
      private double bidPrice_;
      public bool HasBidPrice {
        get { return hasBidPrice; }
      }
      public double BidPrice {
        get { return bidPrice_; }
      }
      
      public const int AskPriceFieldNumber = 22;
      private bool hasAskPrice;
      private double askPrice_;
      public bool HasAskPrice {
        get { return hasAskPrice; }
      }
      public double AskPrice {
        get { return askPrice_; }
      }
      
      public const int BidVolFieldNumber = 23;
      private bool hasBidVol;
      private long bidVol_;
      public bool HasBidVol {
        get { return hasBidVol; }
      }
      public long BidVol {
        get { return bidVol_; }
      }
      
      public const int AskVolFieldNumber = 24;
      private bool hasAskVol;
      private long askVol_;
      public bool HasAskVol {
        get { return hasAskVol; }
      }
      public long AskVol {
        get { return askVol_; }
      }
      
      public const int VolumeFieldNumber = 25;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 26;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int ScoreFieldNumber = 27;
      private bool hasScore;
      private double score_;
      public bool HasScore {
        get { return hasScore; }
      }
      public double Score {
        get { return score_; }
      }
      
      public const int PremiumFieldNumber = 28;
      private bool hasPremium;
      private double premium_;
      public bool HasPremium {
        get { return hasPremium; }
      }
      public double Premium {
        get { return premium_; }
      }
      
      public const int BreakEvenPointFieldNumber = 29;
      private bool hasBreakEvenPoint;
      private double breakEvenPoint_;
      public bool HasBreakEvenPoint {
        get { return hasBreakEvenPoint; }
      }
      public double BreakEvenPoint {
        get { return breakEvenPoint_; }
      }
      
      public const int LeverageFieldNumber = 30;
      private bool hasLeverage;
      private double leverage_;
      public bool HasLeverage {
        get { return hasLeverage; }
      }
      public double Leverage {
        get { return leverage_; }
      }
      
      public const int IpopFieldNumber = 31;
      private bool hasIpop;
      private double ipop_;
      public bool HasIpop {
        get { return hasIpop; }
      }
      public double Ipop {
        get { return ipop_; }
      }
      
      public const int PriceRecoveryRatioFieldNumber = 32;
      private bool hasPriceRecoveryRatio;
      private double priceRecoveryRatio_;
      public bool HasPriceRecoveryRatio {
        get { return hasPriceRecoveryRatio; }
      }
      public double PriceRecoveryRatio {
        get { return priceRecoveryRatio_; }
      }
      
      public const int ConversionPriceFieldNumber = 33;
      private bool hasConversionPrice;
      private double conversionPrice_;
      public bool HasConversionPrice {
        get { return hasConversionPrice; }
      }
      public double ConversionPrice {
        get { return conversionPrice_; }
      }
      
      public const int StreetRateFieldNumber = 34;
      private bool hasStreetRate;
      private double streetRate_;
      public bool HasStreetRate {
        get { return hasStreetRate; }
      }
      public double StreetRate {
        get { return streetRate_; }
      }
      
      public const int StreetVolFieldNumber = 35;
      private bool hasStreetVol;
      private long streetVol_;
      public bool HasStreetVol {
        get { return hasStreetVol; }
      }
      public long StreetVol {
        get { return streetVol_; }
      }
      
      public const int AmplitudeFieldNumber = 36;
      private bool hasAmplitude;
      private double amplitude_;
      public bool HasAmplitude {
        get { return hasAmplitude; }
      }
      public double Amplitude {
        get { return amplitude_; }
      }
      
      public const int IssueSizeFieldNumber = 37;
      private bool hasIssueSize;
      private long issueSize_;
      public bool HasIssueSize {
        get { return hasIssueSize; }
      }
      public long IssueSize {
        get { return issueSize_; }
      }
      
      public const int HighPriceFieldNumber = 39;
      private bool hasHighPrice;
      private double highPrice_;
      public bool HasHighPrice {
        get { return hasHighPrice; }
      }
      public double HighPrice {
        get { return highPrice_; }
      }
      
      public const int LowPriceFieldNumber = 40;
      private bool hasLowPrice;
      private double lowPrice_;
      public bool HasLowPrice {
        get { return hasLowPrice; }
      }
      public double LowPrice {
        get { return lowPrice_; }
      }
      
      public const int ImpliedVolatilityFieldNumber = 41;
      private bool hasImpliedVolatility;
      private double impliedVolatility_;
      public bool HasImpliedVolatility {
        get { return hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return impliedVolatility_; }
      }
      
      public const int DeltaFieldNumber = 42;
      private bool hasDelta;
      private double delta_;
      public bool HasDelta {
        get { return hasDelta; }
      }
      public double Delta {
        get { return delta_; }
      }
      
      public const int EffectiveLeverageFieldNumber = 43;
      private bool hasEffectiveLeverage;
      private double effectiveLeverage_;
      public bool HasEffectiveLeverage {
        get { return hasEffectiveLeverage; }
      }
      public double EffectiveLeverage {
        get { return effectiveLeverage_; }
      }
      
      public const int UpperStrikePriceFieldNumber = 44;
      private bool hasUpperStrikePrice;
      private double upperStrikePrice_;
      public bool HasUpperStrikePrice {
        get { return hasUpperStrikePrice; }
      }
      public double UpperStrikePrice {
        get { return upperStrikePrice_; }
      }
      
      public const int LowerStrikePriceFieldNumber = 45;
      private bool hasLowerStrikePrice;
      private double lowerStrikePrice_;
      public bool HasLowerStrikePrice {
        get { return hasLowerStrikePrice; }
      }
      public double LowerStrikePrice {
        get { return lowerStrikePrice_; }
      }
      
      public const int InLinePriceStatusFieldNumber = 46;
      private bool hasInLinePriceStatus;
      private int inLinePriceStatus_;
      public bool HasInLinePriceStatus {
        get { return hasInLinePriceStatus; }
      }
      public int InLinePriceStatus {
        get { return inLinePriceStatus_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasStock) return false;
          if (!hasOwner) return false;
          if (!hasType) return false;
          if (!hasIssuer) return false;
          if (!hasMaturityTime) return false;
          if (!hasListTime) return false;
          if (!hasLastTradeTime) return false;
          if (!hasConversionRatio) return false;
          if (!hasLotSize) return false;
          if (!hasStrikePrice) return false;
          if (!hasLastClosePrice) return false;
          if (!hasName) return false;
          if (!hasCurPrice) return false;
          if (!hasPriceChangeVal) return false;
          if (!hasChangeRate) return false;
          if (!hasStatus) return false;
          if (!hasBidPrice) return false;
          if (!hasAskPrice) return false;
          if (!hasBidVol) return false;
          if (!hasAskVol) return false;
          if (!hasVolume) return false;
          if (!hasTurnover) return false;
          if (!hasScore) return false;
          if (!hasPremium) return false;
          if (!hasBreakEvenPoint) return false;
          if (!hasLeverage) return false;
          if (!hasIpop) return false;
          if (!hasConversionPrice) return false;
          if (!hasStreetRate) return false;
          if (!hasStreetVol) return false;
          if (!hasAmplitude) return false;
          if (!hasIssueSize) return false;
          if (!hasHighPrice) return false;
          if (!hasLowPrice) return false;
          if (!hasEffectiveLeverage) return false;
          if (!Stock.IsInitialized) return false;
          if (!Owner.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _warrantDataFieldNames;
        if (hasStock) {
          output.WriteMessage(1, field_names[37], Stock);
        }
        if (hasOwner) {
          output.WriteMessage(2, field_names[30], Owner);
        }
        if (hasType) {
          output.WriteInt32(3, field_names[42], Type);
        }
        if (hasIssuer) {
          output.WriteInt32(4, field_names[17], Issuer);
        }
        if (hasMaturityTime) {
          output.WriteString(5, field_names[27], MaturityTime);
        }
        if (hasMaturityTimestamp) {
          output.WriteDouble(6, field_names[28], MaturityTimestamp);
        }
        if (hasListTime) {
          output.WriteString(7, field_names[22], ListTime);
        }
        if (hasListTimestamp) {
          output.WriteDouble(8, field_names[23], ListTimestamp);
        }
        if (hasLastTradeTime) {
          output.WriteString(9, field_names[19], LastTradeTime);
        }
        if (hasLastTradeTimestamp) {
          output.WriteDouble(10, field_names[20], LastTradeTimestamp);
        }
        if (hasRecoveryPrice) {
          output.WriteDouble(11, field_names[34], RecoveryPrice);
        }
        if (hasConversionRatio) {
          output.WriteDouble(12, field_names[8], ConversionRatio);
        }
        if (hasLotSize) {
          output.WriteInt32(13, field_names[24], LotSize);
        }
        if (hasStrikePrice) {
          output.WriteDouble(14, field_names[40], StrikePrice);
        }
        if (hasLastClosePrice) {
          output.WriteDouble(15, field_names[18], LastClosePrice);
        }
        if (hasName) {
          output.WriteString(16, field_names[29], Name);
        }
        if (hasCurPrice) {
          output.WriteDouble(17, field_names[9], CurPrice);
        }
        if (hasPriceChangeVal) {
          output.WriteDouble(18, field_names[32], PriceChangeVal);
        }
        if (hasChangeRate) {
          output.WriteDouble(19, field_names[6], ChangeRate);
        }
        if (hasStatus) {
          output.WriteInt32(20, field_names[36], Status);
        }
        if (hasBidPrice) {
          output.WriteDouble(21, field_names[3], BidPrice);
        }
        if (hasAskPrice) {
          output.WriteDouble(22, field_names[1], AskPrice);
        }
        if (hasBidVol) {
          output.WriteInt64(23, field_names[4], BidVol);
        }
        if (hasAskVol) {
          output.WriteInt64(24, field_names[2], AskVol);
        }
        if (hasVolume) {
          output.WriteInt64(25, field_names[44], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(26, field_names[41], Turnover);
        }
        if (hasScore) {
          output.WriteDouble(27, field_names[35], Score);
        }
        if (hasPremium) {
          output.WriteDouble(28, field_names[31], Premium);
        }
        if (hasBreakEvenPoint) {
          output.WriteDouble(29, field_names[5], BreakEvenPoint);
        }
        if (hasLeverage) {
          output.WriteDouble(30, field_names[21], Leverage);
        }
        if (hasIpop) {
          output.WriteDouble(31, field_names[15], Ipop);
        }
        if (hasPriceRecoveryRatio) {
          output.WriteDouble(32, field_names[33], PriceRecoveryRatio);
        }
        if (hasConversionPrice) {
          output.WriteDouble(33, field_names[7], ConversionPrice);
        }
        if (hasStreetRate) {
          output.WriteDouble(34, field_names[38], StreetRate);
        }
        if (hasStreetVol) {
          output.WriteInt64(35, field_names[39], StreetVol);
        }
        if (hasAmplitude) {
          output.WriteDouble(36, field_names[0], Amplitude);
        }
        if (hasIssueSize) {
          output.WriteInt64(37, field_names[16], IssueSize);
        }
        if (hasHighPrice) {
          output.WriteDouble(39, field_names[12], HighPrice);
        }
        if (hasLowPrice) {
          output.WriteDouble(40, field_names[25], LowPrice);
        }
        if (hasImpliedVolatility) {
          output.WriteDouble(41, field_names[13], ImpliedVolatility);
        }
        if (hasDelta) {
          output.WriteDouble(42, field_names[10], Delta);
        }
        if (hasEffectiveLeverage) {
          output.WriteDouble(43, field_names[11], EffectiveLeverage);
        }
        if (hasUpperStrikePrice) {
          output.WriteDouble(44, field_names[43], UpperStrikePrice);
        }
        if (hasLowerStrikePrice) {
          output.WriteDouble(45, field_names[26], LowerStrikePrice);
        }
        if (hasInLinePriceStatus) {
          output.WriteInt32(46, field_names[14], InLinePriceStatus);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStock) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Stock);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
        }
        if (hasIssuer) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Issuer);
        }
        if (hasMaturityTime) {
          size += pb::CodedOutputStream.ComputeStringSize(5, MaturityTime);
        }
        if (hasMaturityTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, MaturityTimestamp);
        }
        if (hasListTime) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ListTime);
        }
        if (hasListTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, ListTimestamp);
        }
        if (hasLastTradeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(9, LastTradeTime);
        }
        if (hasLastTradeTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, LastTradeTimestamp);
        }
        if (hasRecoveryPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, RecoveryPrice);
        }
        if (hasConversionRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, ConversionRatio);
        }
        if (hasLotSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, LotSize);
        }
        if (hasStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, StrikePrice);
        }
        if (hasLastClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, LastClosePrice);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Name);
        }
        if (hasCurPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, CurPrice);
        }
        if (hasPriceChangeVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, PriceChangeVal);
        }
        if (hasChangeRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, ChangeRate);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, Status);
        }
        if (hasBidPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, BidPrice);
        }
        if (hasAskPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, AskPrice);
        }
        if (hasBidVol) {
          size += pb::CodedOutputStream.ComputeInt64Size(23, BidVol);
        }
        if (hasAskVol) {
          size += pb::CodedOutputStream.ComputeInt64Size(24, AskVol);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(25, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, Turnover);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, Score);
        }
        if (hasPremium) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, Premium);
        }
        if (hasBreakEvenPoint) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, BreakEvenPoint);
        }
        if (hasLeverage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, Leverage);
        }
        if (hasIpop) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, Ipop);
        }
        if (hasPriceRecoveryRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, PriceRecoveryRatio);
        }
        if (hasConversionPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, ConversionPrice);
        }
        if (hasStreetRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(34, StreetRate);
        }
        if (hasStreetVol) {
          size += pb::CodedOutputStream.ComputeInt64Size(35, StreetVol);
        }
        if (hasAmplitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(36, Amplitude);
        }
        if (hasIssueSize) {
          size += pb::CodedOutputStream.ComputeInt64Size(37, IssueSize);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(39, HighPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(40, LowPrice);
        }
        if (hasImpliedVolatility) {
          size += pb::CodedOutputStream.ComputeDoubleSize(41, ImpliedVolatility);
        }
        if (hasDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(42, Delta);
        }
        if (hasEffectiveLeverage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(43, EffectiveLeverage);
        }
        if (hasUpperStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(44, UpperStrikePrice);
        }
        if (hasLowerStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(45, LowerStrikePrice);
        }
        if (hasInLinePriceStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(46, InLinePriceStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static WarrantData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static WarrantData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static WarrantData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static WarrantData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private WarrantData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(WarrantData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<WarrantData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(WarrantData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private WarrantData result;
        
        private WarrantData PrepareBuilder() {
          if (resultIsReadOnly) {
            WarrantData original = result;
            result = new WarrantData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override WarrantData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.Descriptor; }
        }
        
        public override WarrantData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.DefaultInstance; }
        }
        
        public override WarrantData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is WarrantData) {
            return MergeFrom((WarrantData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(WarrantData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasStock) {
            MergeStock(other.Stock);
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasIssuer) {
            Issuer = other.Issuer;
          }
          if (other.HasMaturityTime) {
            MaturityTime = other.MaturityTime;
          }
          if (other.HasMaturityTimestamp) {
            MaturityTimestamp = other.MaturityTimestamp;
          }
          if (other.HasListTime) {
            ListTime = other.ListTime;
          }
          if (other.HasListTimestamp) {
            ListTimestamp = other.ListTimestamp;
          }
          if (other.HasLastTradeTime) {
            LastTradeTime = other.LastTradeTime;
          }
          if (other.HasLastTradeTimestamp) {
            LastTradeTimestamp = other.LastTradeTimestamp;
          }
          if (other.HasRecoveryPrice) {
            RecoveryPrice = other.RecoveryPrice;
          }
          if (other.HasConversionRatio) {
            ConversionRatio = other.ConversionRatio;
          }
          if (other.HasLotSize) {
            LotSize = other.LotSize;
          }
          if (other.HasStrikePrice) {
            StrikePrice = other.StrikePrice;
          }
          if (other.HasLastClosePrice) {
            LastClosePrice = other.LastClosePrice;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasCurPrice) {
            CurPrice = other.CurPrice;
          }
          if (other.HasPriceChangeVal) {
            PriceChangeVal = other.PriceChangeVal;
          }
          if (other.HasChangeRate) {
            ChangeRate = other.ChangeRate;
          }
          if (other.HasStatus) {
            Status = other.Status;
          }
          if (other.HasBidPrice) {
            BidPrice = other.BidPrice;
          }
          if (other.HasAskPrice) {
            AskPrice = other.AskPrice;
          }
          if (other.HasBidVol) {
            BidVol = other.BidVol;
          }
          if (other.HasAskVol) {
            AskVol = other.AskVol;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasPremium) {
            Premium = other.Premium;
          }
          if (other.HasBreakEvenPoint) {
            BreakEvenPoint = other.BreakEvenPoint;
          }
          if (other.HasLeverage) {
            Leverage = other.Leverage;
          }
          if (other.HasIpop) {
            Ipop = other.Ipop;
          }
          if (other.HasPriceRecoveryRatio) {
            PriceRecoveryRatio = other.PriceRecoveryRatio;
          }
          if (other.HasConversionPrice) {
            ConversionPrice = other.ConversionPrice;
          }
          if (other.HasStreetRate) {
            StreetRate = other.StreetRate;
          }
          if (other.HasStreetVol) {
            StreetVol = other.StreetVol;
          }
          if (other.HasAmplitude) {
            Amplitude = other.Amplitude;
          }
          if (other.HasIssueSize) {
            IssueSize = other.IssueSize;
          }
          if (other.HasHighPrice) {
            HighPrice = other.HighPrice;
          }
          if (other.HasLowPrice) {
            LowPrice = other.LowPrice;
          }
          if (other.HasImpliedVolatility) {
            ImpliedVolatility = other.ImpliedVolatility;
          }
          if (other.HasDelta) {
            Delta = other.Delta;
          }
          if (other.HasEffectiveLeverage) {
            EffectiveLeverage = other.EffectiveLeverage;
          }
          if (other.HasUpperStrikePrice) {
            UpperStrikePrice = other.UpperStrikePrice;
          }
          if (other.HasLowerStrikePrice) {
            LowerStrikePrice = other.LowerStrikePrice;
          }
          if (other.HasInLinePriceStatus) {
            InLinePriceStatus = other.InLinePriceStatus;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_warrantDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _warrantDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasStock) {
                  subBuilder.MergeFrom(Stock);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Stock = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
              case 24: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 32: {
                result.hasIssuer = input.ReadInt32(ref result.issuer_);
                break;
              }
              case 42: {
                result.hasMaturityTime = input.ReadString(ref result.maturityTime_);
                break;
              }
              case 49: {
                result.hasMaturityTimestamp = input.ReadDouble(ref result.maturityTimestamp_);
                break;
              }
              case 58: {
                result.hasListTime = input.ReadString(ref result.listTime_);
                break;
              }
              case 65: {
                result.hasListTimestamp = input.ReadDouble(ref result.listTimestamp_);
                break;
              }
              case 74: {
                result.hasLastTradeTime = input.ReadString(ref result.lastTradeTime_);
                break;
              }
              case 81: {
                result.hasLastTradeTimestamp = input.ReadDouble(ref result.lastTradeTimestamp_);
                break;
              }
              case 89: {
                result.hasRecoveryPrice = input.ReadDouble(ref result.recoveryPrice_);
                break;
              }
              case 97: {
                result.hasConversionRatio = input.ReadDouble(ref result.conversionRatio_);
                break;
              }
              case 104: {
                result.hasLotSize = input.ReadInt32(ref result.lotSize_);
                break;
              }
              case 113: {
                result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
                break;
              }
              case 121: {
                result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
                break;
              }
              case 130: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 137: {
                result.hasCurPrice = input.ReadDouble(ref result.curPrice_);
                break;
              }
              case 145: {
                result.hasPriceChangeVal = input.ReadDouble(ref result.priceChangeVal_);
                break;
              }
              case 153: {
                result.hasChangeRate = input.ReadDouble(ref result.changeRate_);
                break;
              }
              case 160: {
                result.hasStatus = input.ReadInt32(ref result.status_);
                break;
              }
              case 169: {
                result.hasBidPrice = input.ReadDouble(ref result.bidPrice_);
                break;
              }
              case 177: {
                result.hasAskPrice = input.ReadDouble(ref result.askPrice_);
                break;
              }
              case 184: {
                result.hasBidVol = input.ReadInt64(ref result.bidVol_);
                break;
              }
              case 192: {
                result.hasAskVol = input.ReadInt64(ref result.askVol_);
                break;
              }
              case 200: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 209: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 217: {
                result.hasScore = input.ReadDouble(ref result.score_);
                break;
              }
              case 225: {
                result.hasPremium = input.ReadDouble(ref result.premium_);
                break;
              }
              case 233: {
                result.hasBreakEvenPoint = input.ReadDouble(ref result.breakEvenPoint_);
                break;
              }
              case 241: {
                result.hasLeverage = input.ReadDouble(ref result.leverage_);
                break;
              }
              case 249: {
                result.hasIpop = input.ReadDouble(ref result.ipop_);
                break;
              }
              case 257: {
                result.hasPriceRecoveryRatio = input.ReadDouble(ref result.priceRecoveryRatio_);
                break;
              }
              case 265: {
                result.hasConversionPrice = input.ReadDouble(ref result.conversionPrice_);
                break;
              }
              case 273: {
                result.hasStreetRate = input.ReadDouble(ref result.streetRate_);
                break;
              }
              case 280: {
                result.hasStreetVol = input.ReadInt64(ref result.streetVol_);
                break;
              }
              case 289: {
                result.hasAmplitude = input.ReadDouble(ref result.amplitude_);
                break;
              }
              case 296: {
                result.hasIssueSize = input.ReadInt64(ref result.issueSize_);
                break;
              }
              case 313: {
                result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
                break;
              }
              case 321: {
                result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
                break;
              }
              case 329: {
                result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
                break;
              }
              case 337: {
                result.hasDelta = input.ReadDouble(ref result.delta_);
                break;
              }
              case 345: {
                result.hasEffectiveLeverage = input.ReadDouble(ref result.effectiveLeverage_);
                break;
              }
              case 353: {
                result.hasUpperStrikePrice = input.ReadDouble(ref result.upperStrikePrice_);
                break;
              }
              case 361: {
                result.hasLowerStrikePrice = input.ReadDouble(ref result.lowerStrikePrice_);
                break;
              }
              case 368: {
                result.hasInLinePriceStatus = input.ReadInt32(ref result.inLinePriceStatus_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasStock {
         get { return result.hasStock; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Stock {
          get { return result.Stock; }
          set { SetStock(value); }
        }
        public Builder SetStock(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasStock = true;
          result.stock_ = value;
          return this;
        }
        public Builder SetStock(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasStock = true;
          result.stock_ = builderForValue.Build();
          return this;
        }
        public Builder MergeStock(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasStock &&
              result.stock_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.stock_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.stock_).MergeFrom(value).BuildPartial();
          } else {
            result.stock_ = value;
          }
          result.hasStock = true;
          return this;
        }
        public Builder ClearStock() {
          PrepareBuilder();
          result.hasStock = false;
          result.stock_ = null;
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasIssuer {
          get { return result.hasIssuer; }
        }
        public int Issuer {
          get { return result.Issuer; }
          set { SetIssuer(value); }
        }
        public Builder SetIssuer(int value) {
          PrepareBuilder();
          result.hasIssuer = true;
          result.issuer_ = value;
          return this;
        }
        public Builder ClearIssuer() {
          PrepareBuilder();
          result.hasIssuer = false;
          result.issuer_ = 0;
          return this;
        }
        
        public bool HasMaturityTime {
          get { return result.hasMaturityTime; }
        }
        public string MaturityTime {
          get { return result.MaturityTime; }
          set { SetMaturityTime(value); }
        }
        public Builder SetMaturityTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMaturityTime = true;
          result.maturityTime_ = value;
          return this;
        }
        public Builder ClearMaturityTime() {
          PrepareBuilder();
          result.hasMaturityTime = false;
          result.maturityTime_ = "";
          return this;
        }
        
        public bool HasMaturityTimestamp {
          get { return result.hasMaturityTimestamp; }
        }
        public double MaturityTimestamp {
          get { return result.MaturityTimestamp; }
          set { SetMaturityTimestamp(value); }
        }
        public Builder SetMaturityTimestamp(double value) {
          PrepareBuilder();
          result.hasMaturityTimestamp = true;
          result.maturityTimestamp_ = value;
          return this;
        }
        public Builder ClearMaturityTimestamp() {
          PrepareBuilder();
          result.hasMaturityTimestamp = false;
          result.maturityTimestamp_ = 0D;
          return this;
        }
        
        public bool HasListTime {
          get { return result.hasListTime; }
        }
        public string ListTime {
          get { return result.ListTime; }
          set { SetListTime(value); }
        }
        public Builder SetListTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasListTime = true;
          result.listTime_ = value;
          return this;
        }
        public Builder ClearListTime() {
          PrepareBuilder();
          result.hasListTime = false;
          result.listTime_ = "";
          return this;
        }
        
        public bool HasListTimestamp {
          get { return result.hasListTimestamp; }
        }
        public double ListTimestamp {
          get { return result.ListTimestamp; }
          set { SetListTimestamp(value); }
        }
        public Builder SetListTimestamp(double value) {
          PrepareBuilder();
          result.hasListTimestamp = true;
          result.listTimestamp_ = value;
          return this;
        }
        public Builder ClearListTimestamp() {
          PrepareBuilder();
          result.hasListTimestamp = false;
          result.listTimestamp_ = 0D;
          return this;
        }
        
        public bool HasLastTradeTime {
          get { return result.hasLastTradeTime; }
        }
        public string LastTradeTime {
          get { return result.LastTradeTime; }
          set { SetLastTradeTime(value); }
        }
        public Builder SetLastTradeTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasLastTradeTime = true;
          result.lastTradeTime_ = value;
          return this;
        }
        public Builder ClearLastTradeTime() {
          PrepareBuilder();
          result.hasLastTradeTime = false;
          result.lastTradeTime_ = "";
          return this;
        }
        
        public bool HasLastTradeTimestamp {
          get { return result.hasLastTradeTimestamp; }
        }
        public double LastTradeTimestamp {
          get { return result.LastTradeTimestamp; }
          set { SetLastTradeTimestamp(value); }
        }
        public Builder SetLastTradeTimestamp(double value) {
          PrepareBuilder();
          result.hasLastTradeTimestamp = true;
          result.lastTradeTimestamp_ = value;
          return this;
        }
        public Builder ClearLastTradeTimestamp() {
          PrepareBuilder();
          result.hasLastTradeTimestamp = false;
          result.lastTradeTimestamp_ = 0D;
          return this;
        }
        
        public bool HasRecoveryPrice {
          get { return result.hasRecoveryPrice; }
        }
        public double RecoveryPrice {
          get { return result.RecoveryPrice; }
          set { SetRecoveryPrice(value); }
        }
        public Builder SetRecoveryPrice(double value) {
          PrepareBuilder();
          result.hasRecoveryPrice = true;
          result.recoveryPrice_ = value;
          return this;
        }
        public Builder ClearRecoveryPrice() {
          PrepareBuilder();
          result.hasRecoveryPrice = false;
          result.recoveryPrice_ = 0D;
          return this;
        }
        
        public bool HasConversionRatio {
          get { return result.hasConversionRatio; }
        }
        public double ConversionRatio {
          get { return result.ConversionRatio; }
          set { SetConversionRatio(value); }
        }
        public Builder SetConversionRatio(double value) {
          PrepareBuilder();
          result.hasConversionRatio = true;
          result.conversionRatio_ = value;
          return this;
        }
        public Builder ClearConversionRatio() {
          PrepareBuilder();
          result.hasConversionRatio = false;
          result.conversionRatio_ = 0D;
          return this;
        }
        
        public bool HasLotSize {
          get { return result.hasLotSize; }
        }
        public int LotSize {
          get { return result.LotSize; }
          set { SetLotSize(value); }
        }
        public Builder SetLotSize(int value) {
          PrepareBuilder();
          result.hasLotSize = true;
          result.lotSize_ = value;
          return this;
        }
        public Builder ClearLotSize() {
          PrepareBuilder();
          result.hasLotSize = false;
          result.lotSize_ = 0;
          return this;
        }
        
        public bool HasStrikePrice {
          get { return result.hasStrikePrice; }
        }
        public double StrikePrice {
          get { return result.StrikePrice; }
          set { SetStrikePrice(value); }
        }
        public Builder SetStrikePrice(double value) {
          PrepareBuilder();
          result.hasStrikePrice = true;
          result.strikePrice_ = value;
          return this;
        }
        public Builder ClearStrikePrice() {
          PrepareBuilder();
          result.hasStrikePrice = false;
          result.strikePrice_ = 0D;
          return this;
        }
        
        public bool HasLastClosePrice {
          get { return result.hasLastClosePrice; }
        }
        public double LastClosePrice {
          get { return result.LastClosePrice; }
          set { SetLastClosePrice(value); }
        }
        public Builder SetLastClosePrice(double value) {
          PrepareBuilder();
          result.hasLastClosePrice = true;
          result.lastClosePrice_ = value;
          return this;
        }
        public Builder ClearLastClosePrice() {
          PrepareBuilder();
          result.hasLastClosePrice = false;
          result.lastClosePrice_ = 0D;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasCurPrice {
          get { return result.hasCurPrice; }
        }
        public double CurPrice {
          get { return result.CurPrice; }
          set { SetCurPrice(value); }
        }
        public Builder SetCurPrice(double value) {
          PrepareBuilder();
          result.hasCurPrice = true;
          result.curPrice_ = value;
          return this;
        }
        public Builder ClearCurPrice() {
          PrepareBuilder();
          result.hasCurPrice = false;
          result.curPrice_ = 0D;
          return this;
        }
        
        public bool HasPriceChangeVal {
          get { return result.hasPriceChangeVal; }
        }
        public double PriceChangeVal {
          get { return result.PriceChangeVal; }
          set { SetPriceChangeVal(value); }
        }
        public Builder SetPriceChangeVal(double value) {
          PrepareBuilder();
          result.hasPriceChangeVal = true;
          result.priceChangeVal_ = value;
          return this;
        }
        public Builder ClearPriceChangeVal() {
          PrepareBuilder();
          result.hasPriceChangeVal = false;
          result.priceChangeVal_ = 0D;
          return this;
        }
        
        public bool HasChangeRate {
          get { return result.hasChangeRate; }
        }
        public double ChangeRate {
          get { return result.ChangeRate; }
          set { SetChangeRate(value); }
        }
        public Builder SetChangeRate(double value) {
          PrepareBuilder();
          result.hasChangeRate = true;
          result.changeRate_ = value;
          return this;
        }
        public Builder ClearChangeRate() {
          PrepareBuilder();
          result.hasChangeRate = false;
          result.changeRate_ = 0D;
          return this;
        }
        
        public bool HasStatus {
          get { return result.hasStatus; }
        }
        public int Status {
          get { return result.Status; }
          set { SetStatus(value); }
        }
        public Builder SetStatus(int value) {
          PrepareBuilder();
          result.hasStatus = true;
          result.status_ = value;
          return this;
        }
        public Builder ClearStatus() {
          PrepareBuilder();
          result.hasStatus = false;
          result.status_ = 0;
          return this;
        }
        
        public bool HasBidPrice {
          get { return result.hasBidPrice; }
        }
        public double BidPrice {
          get { return result.BidPrice; }
          set { SetBidPrice(value); }
        }
        public Builder SetBidPrice(double value) {
          PrepareBuilder();
          result.hasBidPrice = true;
          result.bidPrice_ = value;
          return this;
        }
        public Builder ClearBidPrice() {
          PrepareBuilder();
          result.hasBidPrice = false;
          result.bidPrice_ = 0D;
          return this;
        }
        
        public bool HasAskPrice {
          get { return result.hasAskPrice; }
        }
        public double AskPrice {
          get { return result.AskPrice; }
          set { SetAskPrice(value); }
        }
        public Builder SetAskPrice(double value) {
          PrepareBuilder();
          result.hasAskPrice = true;
          result.askPrice_ = value;
          return this;
        }
        public Builder ClearAskPrice() {
          PrepareBuilder();
          result.hasAskPrice = false;
          result.askPrice_ = 0D;
          return this;
        }
        
        public bool HasBidVol {
          get { return result.hasBidVol; }
        }
        public long BidVol {
          get { return result.BidVol; }
          set { SetBidVol(value); }
        }
        public Builder SetBidVol(long value) {
          PrepareBuilder();
          result.hasBidVol = true;
          result.bidVol_ = value;
          return this;
        }
        public Builder ClearBidVol() {
          PrepareBuilder();
          result.hasBidVol = false;
          result.bidVol_ = 0L;
          return this;
        }
        
        public bool HasAskVol {
          get { return result.hasAskVol; }
        }
        public long AskVol {
          get { return result.AskVol; }
          set { SetAskVol(value); }
        }
        public Builder SetAskVol(long value) {
          PrepareBuilder();
          result.hasAskVol = true;
          result.askVol_ = value;
          return this;
        }
        public Builder ClearAskVol() {
          PrepareBuilder();
          result.hasAskVol = false;
          result.askVol_ = 0L;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasScore {
          get { return result.hasScore; }
        }
        public double Score {
          get { return result.Score; }
          set { SetScore(value); }
        }
        public Builder SetScore(double value) {
          PrepareBuilder();
          result.hasScore = true;
          result.score_ = value;
          return this;
        }
        public Builder ClearScore() {
          PrepareBuilder();
          result.hasScore = false;
          result.score_ = 0D;
          return this;
        }
        
        public bool HasPremium {
          get { return result.hasPremium; }
        }
        public double Premium {
          get { return result.Premium; }
          set { SetPremium(value); }
        }
        public Builder SetPremium(double value) {
          PrepareBuilder();
          result.hasPremium = true;
          result.premium_ = value;
          return this;
        }
        public Builder ClearPremium() {
          PrepareBuilder();
          result.hasPremium = false;
          result.premium_ = 0D;
          return this;
        }
        
        public bool HasBreakEvenPoint {
          get { return result.hasBreakEvenPoint; }
        }
        public double BreakEvenPoint {
          get { return result.BreakEvenPoint; }
          set { SetBreakEvenPoint(value); }
        }
        public Builder SetBreakEvenPoint(double value) {
          PrepareBuilder();
          result.hasBreakEvenPoint = true;
          result.breakEvenPoint_ = value;
          return this;
        }
        public Builder ClearBreakEvenPoint() {
          PrepareBuilder();
          result.hasBreakEvenPoint = false;
          result.breakEvenPoint_ = 0D;
          return this;
        }
        
        public bool HasLeverage {
          get { return result.hasLeverage; }
        }
        public double Leverage {
          get { return result.Leverage; }
          set { SetLeverage(value); }
        }
        public Builder SetLeverage(double value) {
          PrepareBuilder();
          result.hasLeverage = true;
          result.leverage_ = value;
          return this;
        }
        public Builder ClearLeverage() {
          PrepareBuilder();
          result.hasLeverage = false;
          result.leverage_ = 0D;
          return this;
        }
        
        public bool HasIpop {
          get { return result.hasIpop; }
        }
        public double Ipop {
          get { return result.Ipop; }
          set { SetIpop(value); }
        }
        public Builder SetIpop(double value) {
          PrepareBuilder();
          result.hasIpop = true;
          result.ipop_ = value;
          return this;
        }
        public Builder ClearIpop() {
          PrepareBuilder();
          result.hasIpop = false;
          result.ipop_ = 0D;
          return this;
        }
        
        public bool HasPriceRecoveryRatio {
          get { return result.hasPriceRecoveryRatio; }
        }
        public double PriceRecoveryRatio {
          get { return result.PriceRecoveryRatio; }
          set { SetPriceRecoveryRatio(value); }
        }
        public Builder SetPriceRecoveryRatio(double value) {
          PrepareBuilder();
          result.hasPriceRecoveryRatio = true;
          result.priceRecoveryRatio_ = value;
          return this;
        }
        public Builder ClearPriceRecoveryRatio() {
          PrepareBuilder();
          result.hasPriceRecoveryRatio = false;
          result.priceRecoveryRatio_ = 0D;
          return this;
        }
        
        public bool HasConversionPrice {
          get { return result.hasConversionPrice; }
        }
        public double ConversionPrice {
          get { return result.ConversionPrice; }
          set { SetConversionPrice(value); }
        }
        public Builder SetConversionPrice(double value) {
          PrepareBuilder();
          result.hasConversionPrice = true;
          result.conversionPrice_ = value;
          return this;
        }
        public Builder ClearConversionPrice() {
          PrepareBuilder();
          result.hasConversionPrice = false;
          result.conversionPrice_ = 0D;
          return this;
        }
        
        public bool HasStreetRate {
          get { return result.hasStreetRate; }
        }
        public double StreetRate {
          get { return result.StreetRate; }
          set { SetStreetRate(value); }
        }
        public Builder SetStreetRate(double value) {
          PrepareBuilder();
          result.hasStreetRate = true;
          result.streetRate_ = value;
          return this;
        }
        public Builder ClearStreetRate() {
          PrepareBuilder();
          result.hasStreetRate = false;
          result.streetRate_ = 0D;
          return this;
        }
        
        public bool HasStreetVol {
          get { return result.hasStreetVol; }
        }
        public long StreetVol {
          get { return result.StreetVol; }
          set { SetStreetVol(value); }
        }
        public Builder SetStreetVol(long value) {
          PrepareBuilder();
          result.hasStreetVol = true;
          result.streetVol_ = value;
          return this;
        }
        public Builder ClearStreetVol() {
          PrepareBuilder();
          result.hasStreetVol = false;
          result.streetVol_ = 0L;
          return this;
        }
        
        public bool HasAmplitude {
          get { return result.hasAmplitude; }
        }
        public double Amplitude {
          get { return result.Amplitude; }
          set { SetAmplitude(value); }
        }
        public Builder SetAmplitude(double value) {
          PrepareBuilder();
          result.hasAmplitude = true;
          result.amplitude_ = value;
          return this;
        }
        public Builder ClearAmplitude() {
          PrepareBuilder();
          result.hasAmplitude = false;
          result.amplitude_ = 0D;
          return this;
        }
        
        public bool HasIssueSize {
          get { return result.hasIssueSize; }
        }
        public long IssueSize {
          get { return result.IssueSize; }
          set { SetIssueSize(value); }
        }
        public Builder SetIssueSize(long value) {
          PrepareBuilder();
          result.hasIssueSize = true;
          result.issueSize_ = value;
          return this;
        }
        public Builder ClearIssueSize() {
          PrepareBuilder();
          result.hasIssueSize = false;
          result.issueSize_ = 0L;
          return this;
        }
        
        public bool HasHighPrice {
          get { return result.hasHighPrice; }
        }
        public double HighPrice {
          get { return result.HighPrice; }
          set { SetHighPrice(value); }
        }
        public Builder SetHighPrice(double value) {
          PrepareBuilder();
          result.hasHighPrice = true;
          result.highPrice_ = value;
          return this;
        }
        public Builder ClearHighPrice() {
          PrepareBuilder();
          result.hasHighPrice = false;
          result.highPrice_ = 0D;
          return this;
        }
        
        public bool HasLowPrice {
          get { return result.hasLowPrice; }
        }
        public double LowPrice {
          get { return result.LowPrice; }
          set { SetLowPrice(value); }
        }
        public Builder SetLowPrice(double value) {
          PrepareBuilder();
          result.hasLowPrice = true;
          result.lowPrice_ = value;
          return this;
        }
        public Builder ClearLowPrice() {
          PrepareBuilder();
          result.hasLowPrice = false;
          result.lowPrice_ = 0D;
          return this;
        }
        
        public bool HasImpliedVolatility {
          get { return result.hasImpliedVolatility; }
        }
        public double ImpliedVolatility {
          get { return result.ImpliedVolatility; }
          set { SetImpliedVolatility(value); }
        }
        public Builder SetImpliedVolatility(double value) {
          PrepareBuilder();
          result.hasImpliedVolatility = true;
          result.impliedVolatility_ = value;
          return this;
        }
        public Builder ClearImpliedVolatility() {
          PrepareBuilder();
          result.hasImpliedVolatility = false;
          result.impliedVolatility_ = 0D;
          return this;
        }
        
        public bool HasDelta {
          get { return result.hasDelta; }
        }
        public double Delta {
          get { return result.Delta; }
          set { SetDelta(value); }
        }
        public Builder SetDelta(double value) {
          PrepareBuilder();
          result.hasDelta = true;
          result.delta_ = value;
          return this;
        }
        public Builder ClearDelta() {
          PrepareBuilder();
          result.hasDelta = false;
          result.delta_ = 0D;
          return this;
        }
        
        public bool HasEffectiveLeverage {
          get { return result.hasEffectiveLeverage; }
        }
        public double EffectiveLeverage {
          get { return result.EffectiveLeverage; }
          set { SetEffectiveLeverage(value); }
        }
        public Builder SetEffectiveLeverage(double value) {
          PrepareBuilder();
          result.hasEffectiveLeverage = true;
          result.effectiveLeverage_ = value;
          return this;
        }
        public Builder ClearEffectiveLeverage() {
          PrepareBuilder();
          result.hasEffectiveLeverage = false;
          result.effectiveLeverage_ = 0D;
          return this;
        }
        
        public bool HasUpperStrikePrice {
          get { return result.hasUpperStrikePrice; }
        }
        public double UpperStrikePrice {
          get { return result.UpperStrikePrice; }
          set { SetUpperStrikePrice(value); }
        }
        public Builder SetUpperStrikePrice(double value) {
          PrepareBuilder();
          result.hasUpperStrikePrice = true;
          result.upperStrikePrice_ = value;
          return this;
        }
        public Builder ClearUpperStrikePrice() {
          PrepareBuilder();
          result.hasUpperStrikePrice = false;
          result.upperStrikePrice_ = 0D;
          return this;
        }
        
        public bool HasLowerStrikePrice {
          get { return result.hasLowerStrikePrice; }
        }
        public double LowerStrikePrice {
          get { return result.LowerStrikePrice; }
          set { SetLowerStrikePrice(value); }
        }
        public Builder SetLowerStrikePrice(double value) {
          PrepareBuilder();
          result.hasLowerStrikePrice = true;
          result.lowerStrikePrice_ = value;
          return this;
        }
        public Builder ClearLowerStrikePrice() {
          PrepareBuilder();
          result.hasLowerStrikePrice = false;
          result.lowerStrikePrice_ = 0D;
          return this;
        }
        
        public bool HasInLinePriceStatus {
          get { return result.hasInLinePriceStatus; }
        }
        public int InLinePriceStatus {
          get { return result.InLinePriceStatus; }
          set { SetInLinePriceStatus(value); }
        }
        public Builder SetInLinePriceStatus(int value) {
          PrepareBuilder();
          result.hasInLinePriceStatus = true;
          result.inLinePriceStatus_ = value;
          return this;
        }
        public Builder ClearInLinePriceStatus() {
          PrepareBuilder();
          result.hasInLinePriceStatus = false;
          result.inLinePriceStatus_ = 0;
          return this;
        }
      }
      static WarrantData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetWarrant.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "allCount", "lastPage", "warrantDataList" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 16, 8, 26 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_S2C__FieldAccessorTable; }
      }
      
      public const int LastPageFieldNumber = 1;
      private bool hasLastPage;
      private bool lastPage_;
      public bool HasLastPage {
        get { return hasLastPage; }
      }
      public bool LastPage {
        get { return lastPage_; }
      }
      
      public const int AllCountFieldNumber = 2;
      private bool hasAllCount;
      private int allCount_;
      public bool HasAllCount {
        get { return hasAllCount; }
      }
      public int AllCount {
        get { return allCount_; }
      }
      
      public const int WarrantDataListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData> warrantDataList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData>();
      public scg::IList<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData> WarrantDataListList {
        get { return warrantDataList_; }
      }
      public int WarrantDataListCount {
        get { return warrantDataList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData GetWarrantDataList(int index) {
        return warrantDataList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasLastPage) return false;
          if (!hasAllCount) return false;
          foreach (global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData element in WarrantDataListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (hasLastPage) {
          output.WriteBool(1, field_names[1], LastPage);
        }
        if (hasAllCount) {
          output.WriteInt32(2, field_names[0], AllCount);
        }
        if (warrantDataList_.Count > 0) {
          output.WriteMessageArray(3, field_names[2], warrantDataList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastPage) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, LastPage);
        }
        if (hasAllCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AllCount);
        }
        foreach (global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData element in WarrantDataListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        warrantDataList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.QotGetWarrant.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasLastPage) {
            LastPage = other.LastPage;
          }
          if (other.HasAllCount) {
            AllCount = other.AllCount;
          }
          if (other.warrantDataList_.Count != 0) {
            result.warrantDataList_.Add(other.warrantDataList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasLastPage = input.ReadBool(ref result.lastPage_);
                break;
              }
              case 16: {
                result.hasAllCount = input.ReadInt32(ref result.allCount_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.warrantDataList_, global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasLastPage {
          get { return result.hasLastPage; }
        }
        public bool LastPage {
          get { return result.LastPage; }
          set { SetLastPage(value); }
        }
        public Builder SetLastPage(bool value) {
          PrepareBuilder();
          result.hasLastPage = true;
          result.lastPage_ = value;
          return this;
        }
        public Builder ClearLastPage() {
          PrepareBuilder();
          result.hasLastPage = false;
          result.lastPage_ = false;
          return this;
        }
        
        public bool HasAllCount {
          get { return result.hasAllCount; }
        }
        public int AllCount {
          get { return result.AllCount; }
          set { SetAllCount(value); }
        }
        public Builder SetAllCount(int value) {
          PrepareBuilder();
          result.hasAllCount = true;
          result.allCount_ = value;
          return this;
        }
        public Builder ClearAllCount() {
          PrepareBuilder();
          result.hasAllCount = false;
          result.allCount_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData> WarrantDataListList {
          get { return PrepareBuilder().warrantDataList_; }
        }
        public int WarrantDataListCount {
          get { return result.WarrantDataListCount; }
        }
        public global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData GetWarrantDataList(int index) {
          return result.GetWarrantDataList(index);
        }
        public Builder SetWarrantDataList(int index, global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.warrantDataList_[index] = value;
          return this;
        }
        public Builder SetWarrantDataList(int index, global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.warrantDataList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddWarrantDataList(global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.warrantDataList_.Add(value);
          return this;
        }
        public Builder AddWarrantDataList(global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.warrantDataList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeWarrantDataList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotGetWarrant.WarrantData> values) {
          PrepareBuilder();
          result.warrantDataList_.Add(values);
          return this;
        }
        public Builder ClearWarrantDataList() {
          PrepareBuilder();
          result.warrantDataList_.Clear();
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetWarrant.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.QotGetWarrant.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.QotGetWarrant.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.QotGetWarrant.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.QotGetWarrant.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotGetWarrant.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetWarrant.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.QotGetWarrant.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotGetWarrant.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotGetWarrant.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.QotGetWarrant.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.QotGetWarrant.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.QotGetWarrant.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetWarrant.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetWarrant.internal__static_Qot_GetWarrant_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.QotGetWarrant.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.QotGetWarrant.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.QotGetWarrant.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetWarrant.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.QotGetWarrant.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotGetWarrant.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetWarrant.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.QotGetWarrant.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotGetWarrant.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotGetWarrant.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.QotGetWarrant.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.QotGetWarrant.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.QotGetWarrant.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetWarrant.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
