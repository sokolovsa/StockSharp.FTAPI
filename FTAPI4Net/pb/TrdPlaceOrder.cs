// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TrdPlaceOrder {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Trd_PlaceOrder_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S, global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.Builder> internal__static_Trd_PlaceOrder_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_PlaceOrder_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C, global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.Builder> internal__static_Trd_PlaceOrder_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_PlaceOrder_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.Request, global::Futu.OpenApi.Pb.TrdPlaceOrder.Request.Builder> internal__static_Trd_PlaceOrder_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_PlaceOrder_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.Response, global::Futu.OpenApi.Pb.TrdPlaceOrder.Response.Builder> internal__static_Trd_PlaceOrder_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static TrdPlaceOrder() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRUcmRfUGxhY2VPcmRlci5wcm90bxIOVHJkX1BsYWNlT3JkZXIaDENvbW1v", 
            "bi5wcm90bxoQVHJkX0NvbW1vbi5wcm90byKoAwoDQzJTEiwKCHBhY2tldElE", 
            "GAEgAigLMhAuQ29tbW9uLlBhY2tldElEUghwYWNrZXRJRBItCgZoZWFkZXIY", 
            "AiACKAsyFS5UcmRfQ29tbW9uLlRyZEhlYWRlclIGaGVhZGVyEhgKB3RyZFNp", 
            "ZGUYAyACKAVSB3RyZFNpZGUSHAoJb3JkZXJUeXBlGAQgAigFUglvcmRlclR5", 
            "cGUSEgoEY29kZRgFIAIoCVIEY29kZRIQCgNxdHkYBiACKAFSA3F0eRIUCgVw", 
            "cmljZRgHIAEoAVIFcHJpY2USIAoLYWRqdXN0UHJpY2UYCCABKAhSC2FkanVz", 
            "dFByaWNlEi4KEmFkanVzdFNpZGVBbmRMaW1pdBgJIAEoAVISYWRqdXN0U2lk", 
            "ZUFuZExpbWl0EhwKCXNlY01hcmtldBgKIAEoBVIJc2VjTWFya2V0EhYKBnJl", 
            "bWFyaxgLIAEoCVIGcmVtYXJrEiAKC3RpbWVJbkZvcmNlGAwgASgFUgt0aW1l", 
            "SW5Gb3JjZRImCg5maWxsT3V0c2lkZVJUSBgNIAEoCFIOZmlsbE91dHNpZGVS", 
            "VEgiTgoDUzJDEi0KBmhlYWRlchgBIAIoCzIVLlRyZF9Db21tb24uVHJkSGVh", 
            "ZGVyUgZoZWFkZXISGAoHb3JkZXJJRBgCIAEoBFIHb3JkZXJJRCIwCgdSZXF1", 
            "ZXN0EiUKA2MycxgBIAIoCzITLlRyZF9QbGFjZU9yZGVyLkMyU1IDYzJzIoMB", 
            "CghSZXNwb25zZRIeCgdyZXRUeXBlGAEgAigFOgQtNDAwUgdyZXRUeXBlEhYK", 
            "BnJldE1zZxgCIAEoCVIGcmV0TXNnEhgKB2VyckNvZGUYAyABKAVSB2VyckNv", 
            "ZGUSJQoDczJjGAQgASgLMhMuVHJkX1BsYWNlT3JkZXIuUzJDUgNzMmNCRAoT", 
            "Y29tLmZ1dHUub3BlbmFwaS5wYlotZ2l0aHViLmNvbS9mdXR1b3Blbi9mdGFw", 
          "aTRnby9wYi90cmRwbGFjZW9yZGVy"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Trd_PlaceOrder_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Trd_PlaceOrder_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S, global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.Builder>(internal__static_Trd_PlaceOrder_C2S__Descriptor,
                new string[] { "PacketID", "Header", "TrdSide", "OrderType", "Code", "Qty", "Price", "AdjustPrice", "AdjustSideAndLimit", "SecMarket", "Remark", "TimeInForce", "FillOutsideRTH", });
        internal__static_Trd_PlaceOrder_S2C__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Trd_PlaceOrder_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C, global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.Builder>(internal__static_Trd_PlaceOrder_S2C__Descriptor,
                new string[] { "Header", "OrderID", });
        internal__static_Trd_PlaceOrder_Request__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Trd_PlaceOrder_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.Request, global::Futu.OpenApi.Pb.TrdPlaceOrder.Request.Builder>(internal__static_Trd_PlaceOrder_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Trd_PlaceOrder_Response__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Trd_PlaceOrder_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdPlaceOrder.Response, global::Futu.OpenApi.Pb.TrdPlaceOrder.Response.Builder>(internal__static_Trd_PlaceOrder_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.TrdCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          global::Futu.OpenApi.Pb.TrdCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "adjustPrice", "adjustSideAndLimit", "code", "fillOutsideRTH", "header", "orderType", "packetID", "price", "qty", "remark", "secMarket", "timeInForce", "trdSide" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 64, 73, 42, 104, 18, 32, 10, 57, 49, 90, 80, 96, 24 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_C2S__FieldAccessorTable; }
      }
      
      public const int PacketIDFieldNumber = 1;
      private bool hasPacketID;
      private global::Futu.OpenApi.Pb.Common.PacketID packetID_;
      public bool HasPacketID {
        get { return hasPacketID; }
      }
      public global::Futu.OpenApi.Pb.Common.PacketID PacketID {
        get { return packetID_ ?? global::Futu.OpenApi.Pb.Common.PacketID.DefaultInstance; }
      }
      
      public const int HeaderFieldNumber = 2;
      private bool hasHeader;
      private global::Futu.OpenApi.Pb.TrdCommon.TrdHeader header_;
      public bool HasHeader {
        get { return hasHeader; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
        get { return header_ ?? global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
      }
      
      public const int TrdSideFieldNumber = 3;
      private bool hasTrdSide;
      private int trdSide_;
      public bool HasTrdSide {
        get { return hasTrdSide; }
      }
      public int TrdSide {
        get { return trdSide_; }
      }
      
      public const int OrderTypeFieldNumber = 4;
      private bool hasOrderType;
      private int orderType_;
      public bool HasOrderType {
        get { return hasOrderType; }
      }
      public int OrderType {
        get { return orderType_; }
      }
      
      public const int CodeFieldNumber = 5;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int QtyFieldNumber = 6;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int PriceFieldNumber = 7;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int AdjustPriceFieldNumber = 8;
      private bool hasAdjustPrice;
      private bool adjustPrice_;
      public bool HasAdjustPrice {
        get { return hasAdjustPrice; }
      }
      public bool AdjustPrice {
        get { return adjustPrice_; }
      }
      
      public const int AdjustSideAndLimitFieldNumber = 9;
      private bool hasAdjustSideAndLimit;
      private double adjustSideAndLimit_;
      public bool HasAdjustSideAndLimit {
        get { return hasAdjustSideAndLimit; }
      }
      public double AdjustSideAndLimit {
        get { return adjustSideAndLimit_; }
      }
      
      public const int SecMarketFieldNumber = 10;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int RemarkFieldNumber = 11;
      private bool hasRemark;
      private string remark_ = "";
      public bool HasRemark {
        get { return hasRemark; }
      }
      public string Remark {
        get { return remark_; }
      }
      
      public const int TimeInForceFieldNumber = 12;
      private bool hasTimeInForce;
      private int timeInForce_;
      public bool HasTimeInForce {
        get { return hasTimeInForce; }
      }
      public int TimeInForce {
        get { return timeInForce_; }
      }
      
      public const int FillOutsideRTHFieldNumber = 13;
      private bool hasFillOutsideRTH;
      private bool fillOutsideRTH_;
      public bool HasFillOutsideRTH {
        get { return hasFillOutsideRTH; }
      }
      public bool FillOutsideRTH {
        get { return fillOutsideRTH_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPacketID) return false;
          if (!hasHeader) return false;
          if (!hasTrdSide) return false;
          if (!hasOrderType) return false;
          if (!hasCode) return false;
          if (!hasQty) return false;
          if (!PacketID.IsInitialized) return false;
          if (!Header.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (hasPacketID) {
          output.WriteMessage(1, field_names[6], PacketID);
        }
        if (hasHeader) {
          output.WriteMessage(2, field_names[4], Header);
        }
        if (hasTrdSide) {
          output.WriteInt32(3, field_names[12], TrdSide);
        }
        if (hasOrderType) {
          output.WriteInt32(4, field_names[5], OrderType);
        }
        if (hasCode) {
          output.WriteString(5, field_names[2], Code);
        }
        if (hasQty) {
          output.WriteDouble(6, field_names[8], Qty);
        }
        if (hasPrice) {
          output.WriteDouble(7, field_names[7], Price);
        }
        if (hasAdjustPrice) {
          output.WriteBool(8, field_names[0], AdjustPrice);
        }
        if (hasAdjustSideAndLimit) {
          output.WriteDouble(9, field_names[1], AdjustSideAndLimit);
        }
        if (hasSecMarket) {
          output.WriteInt32(10, field_names[10], SecMarket);
        }
        if (hasRemark) {
          output.WriteString(11, field_names[9], Remark);
        }
        if (hasTimeInForce) {
          output.WriteInt32(12, field_names[11], TimeInForce);
        }
        if (hasFillOutsideRTH) {
          output.WriteBool(13, field_names[3], FillOutsideRTH);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPacketID) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, PacketID);
        }
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Header);
        }
        if (hasTrdSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TrdSide);
        }
        if (hasOrderType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, OrderType);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Code);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, Qty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Price);
        }
        if (hasAdjustPrice) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, AdjustPrice);
        }
        if (hasAdjustSideAndLimit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, AdjustSideAndLimit);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, SecMarket);
        }
        if (hasRemark) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Remark);
        }
        if (hasTimeInForce) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, TimeInForce);
        }
        if (hasFillOutsideRTH) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, FillOutsideRTH);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPacketID) {
            MergePacketID(other.PacketID);
          }
          if (other.HasHeader) {
            MergeHeader(other.Header);
          }
          if (other.HasTrdSide) {
            TrdSide = other.TrdSide;
          }
          if (other.HasOrderType) {
            OrderType = other.OrderType;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasAdjustPrice) {
            AdjustPrice = other.AdjustPrice;
          }
          if (other.HasAdjustSideAndLimit) {
            AdjustSideAndLimit = other.AdjustSideAndLimit;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasRemark) {
            Remark = other.Remark;
          }
          if (other.HasTimeInForce) {
            TimeInForce = other.TimeInForce;
          }
          if (other.HasFillOutsideRTH) {
            FillOutsideRTH = other.FillOutsideRTH;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.Common.PacketID.Builder subBuilder = global::Futu.OpenApi.Pb.Common.PacketID.CreateBuilder();
                if (result.hasPacketID) {
                  subBuilder.MergeFrom(PacketID);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                PacketID = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder subBuilder = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder();
                if (result.hasHeader) {
                  subBuilder.MergeFrom(Header);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Header = subBuilder.BuildPartial();
                break;
              }
              case 24: {
                result.hasTrdSide = input.ReadInt32(ref result.trdSide_);
                break;
              }
              case 32: {
                result.hasOrderType = input.ReadInt32(ref result.orderType_);
                break;
              }
              case 42: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 49: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 57: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 64: {
                result.hasAdjustPrice = input.ReadBool(ref result.adjustPrice_);
                break;
              }
              case 73: {
                result.hasAdjustSideAndLimit = input.ReadDouble(ref result.adjustSideAndLimit_);
                break;
              }
              case 80: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 90: {
                result.hasRemark = input.ReadString(ref result.remark_);
                break;
              }
              case 96: {
                result.hasTimeInForce = input.ReadInt32(ref result.timeInForce_);
                break;
              }
              case 104: {
                result.hasFillOutsideRTH = input.ReadBool(ref result.fillOutsideRTH_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPacketID {
         get { return result.hasPacketID; }
        }
        public global::Futu.OpenApi.Pb.Common.PacketID PacketID {
          get { return result.PacketID; }
          set { SetPacketID(value); }
        }
        public Builder SetPacketID(global::Futu.OpenApi.Pb.Common.PacketID value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPacketID = true;
          result.packetID_ = value;
          return this;
        }
        public Builder SetPacketID(global::Futu.OpenApi.Pb.Common.PacketID.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPacketID = true;
          result.packetID_ = builderForValue.Build();
          return this;
        }
        public Builder MergePacketID(global::Futu.OpenApi.Pb.Common.PacketID value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPacketID &&
              result.packetID_ != global::Futu.OpenApi.Pb.Common.PacketID.DefaultInstance) {
              result.packetID_ = global::Futu.OpenApi.Pb.Common.PacketID.CreateBuilder(result.packetID_).MergeFrom(value).BuildPartial();
          } else {
            result.packetID_ = value;
          }
          result.hasPacketID = true;
          return this;
        }
        public Builder ClearPacketID() {
          PrepareBuilder();
          result.hasPacketID = false;
          result.packetID_ = null;
          return this;
        }
        
        public bool HasHeader {
         get { return result.hasHeader; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
          get { return result.Header; }
          set { SetHeader(value); }
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = value;
          return this;
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = builderForValue.Build();
          return this;
        }
        public Builder MergeHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasHeader &&
              result.header_ != global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) {
              result.header_ = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
          } else {
            result.header_ = value;
          }
          result.hasHeader = true;
          return this;
        }
        public Builder ClearHeader() {
          PrepareBuilder();
          result.hasHeader = false;
          result.header_ = null;
          return this;
        }
        
        public bool HasTrdSide {
          get { return result.hasTrdSide; }
        }
        public int TrdSide {
          get { return result.TrdSide; }
          set { SetTrdSide(value); }
        }
        public Builder SetTrdSide(int value) {
          PrepareBuilder();
          result.hasTrdSide = true;
          result.trdSide_ = value;
          return this;
        }
        public Builder ClearTrdSide() {
          PrepareBuilder();
          result.hasTrdSide = false;
          result.trdSide_ = 0;
          return this;
        }
        
        public bool HasOrderType {
          get { return result.hasOrderType; }
        }
        public int OrderType {
          get { return result.OrderType; }
          set { SetOrderType(value); }
        }
        public Builder SetOrderType(int value) {
          PrepareBuilder();
          result.hasOrderType = true;
          result.orderType_ = value;
          return this;
        }
        public Builder ClearOrderType() {
          PrepareBuilder();
          result.hasOrderType = false;
          result.orderType_ = 0;
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasAdjustPrice {
          get { return result.hasAdjustPrice; }
        }
        public bool AdjustPrice {
          get { return result.AdjustPrice; }
          set { SetAdjustPrice(value); }
        }
        public Builder SetAdjustPrice(bool value) {
          PrepareBuilder();
          result.hasAdjustPrice = true;
          result.adjustPrice_ = value;
          return this;
        }
        public Builder ClearAdjustPrice() {
          PrepareBuilder();
          result.hasAdjustPrice = false;
          result.adjustPrice_ = false;
          return this;
        }
        
        public bool HasAdjustSideAndLimit {
          get { return result.hasAdjustSideAndLimit; }
        }
        public double AdjustSideAndLimit {
          get { return result.AdjustSideAndLimit; }
          set { SetAdjustSideAndLimit(value); }
        }
        public Builder SetAdjustSideAndLimit(double value) {
          PrepareBuilder();
          result.hasAdjustSideAndLimit = true;
          result.adjustSideAndLimit_ = value;
          return this;
        }
        public Builder ClearAdjustSideAndLimit() {
          PrepareBuilder();
          result.hasAdjustSideAndLimit = false;
          result.adjustSideAndLimit_ = 0D;
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasRemark {
          get { return result.hasRemark; }
        }
        public string Remark {
          get { return result.Remark; }
          set { SetRemark(value); }
        }
        public Builder SetRemark(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRemark = true;
          result.remark_ = value;
          return this;
        }
        public Builder ClearRemark() {
          PrepareBuilder();
          result.hasRemark = false;
          result.remark_ = "";
          return this;
        }
        
        public bool HasTimeInForce {
          get { return result.hasTimeInForce; }
        }
        public int TimeInForce {
          get { return result.TimeInForce; }
          set { SetTimeInForce(value); }
        }
        public Builder SetTimeInForce(int value) {
          PrepareBuilder();
          result.hasTimeInForce = true;
          result.timeInForce_ = value;
          return this;
        }
        public Builder ClearTimeInForce() {
          PrepareBuilder();
          result.hasTimeInForce = false;
          result.timeInForce_ = 0;
          return this;
        }
        
        public bool HasFillOutsideRTH {
          get { return result.hasFillOutsideRTH; }
        }
        public bool FillOutsideRTH {
          get { return result.FillOutsideRTH; }
          set { SetFillOutsideRTH(value); }
        }
        public Builder SetFillOutsideRTH(bool value) {
          PrepareBuilder();
          result.hasFillOutsideRTH = true;
          result.fillOutsideRTH_ = value;
          return this;
        }
        public Builder ClearFillOutsideRTH() {
          PrepareBuilder();
          result.hasFillOutsideRTH = false;
          result.fillOutsideRTH_ = false;
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdPlaceOrder.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "header", "orderID" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 10, 16 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_S2C__FieldAccessorTable; }
      }
      
      public const int HeaderFieldNumber = 1;
      private bool hasHeader;
      private global::Futu.OpenApi.Pb.TrdCommon.TrdHeader header_;
      public bool HasHeader {
        get { return hasHeader; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
        get { return header_ ?? global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
      }
      
      public const int OrderIDFieldNumber = 2;
      private bool hasOrderID;
      private ulong orderID_;
      public bool HasOrderID {
        get { return hasOrderID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OrderID {
        get { return orderID_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasHeader) return false;
          if (!Header.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (hasHeader) {
          output.WriteMessage(1, field_names[0], Header);
        }
        if (hasOrderID) {
          output.WriteUInt64(2, field_names[1], OrderID);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, OrderID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasHeader) {
            MergeHeader(other.Header);
          }
          if (other.HasOrderID) {
            OrderID = other.OrderID;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder subBuilder = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder();
                if (result.hasHeader) {
                  subBuilder.MergeFrom(Header);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Header = subBuilder.BuildPartial();
                break;
              }
              case 16: {
                result.hasOrderID = input.ReadUInt64(ref result.orderID_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasHeader {
         get { return result.hasHeader; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
          get { return result.Header; }
          set { SetHeader(value); }
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = value;
          return this;
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = builderForValue.Build();
          return this;
        }
        public Builder MergeHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasHeader &&
              result.header_ != global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) {
              result.header_ = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
          } else {
            result.header_ = value;
          }
          result.hasHeader = true;
          return this;
        }
        public Builder ClearHeader() {
          PrepareBuilder();
          result.hasHeader = false;
          result.header_ = null;
          return this;
        }
        
        public bool HasOrderID {
          get { return result.hasOrderID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong OrderID {
          get { return result.OrderID; }
          set { SetOrderID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetOrderID(ulong value) {
          PrepareBuilder();
          result.hasOrderID = true;
          result.orderID_ = value;
          return this;
        }
        public Builder ClearOrderID() {
          PrepareBuilder();
          result.hasOrderID = false;
          result.orderID_ = 0UL;
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdPlaceOrder.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.TrdPlaceOrder.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.TrdPlaceOrder.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdPlaceOrder.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.internal__static_Trd_PlaceOrder_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdPlaceOrder.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.TrdPlaceOrder.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.TrdPlaceOrder.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdPlaceOrder.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
