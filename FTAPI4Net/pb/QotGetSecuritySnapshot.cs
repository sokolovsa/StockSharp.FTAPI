// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotGetSecuritySnapshot {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.Builder> internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.Builder> internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.Builder> internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.Builder> internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.Builder> internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request.Builder> internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_GetSecuritySnapshot_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response.Builder> internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static QotGetSecuritySnapshot() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5wcm90bxIXUW90X0dldFNlY3Vy", 
            "aXR5U25hcHNob3QaDENvbW1vbi5wcm90bxoQUW90X0NvbW1vbi5wcm90byI/", 
            "CgNDMlMSOAoMc2VjdXJpdHlMaXN0GAEgAygLMhQuUW90X0NvbW1vbi5TZWN1", 
            "cml0eVIMc2VjdXJpdHlMaXN0ItoEChRFcXVpdHlTbmFwc2hvdEV4RGF0YRIi", 
            "Cgxpc3N1ZWRTaGFyZXMYASACKANSDGlzc3VlZFNoYXJlcxIoCg9pc3N1ZWRN", 
            "YXJrZXRWYWwYAiACKAFSD2lzc3VlZE1hcmtldFZhbBIaCghuZXRBc3NldBgD", 
            "IAIoAVIIbmV0QXNzZXQSHAoJbmV0UHJvZml0GAQgAigBUgluZXRQcm9maXQS", 
            "KgoQZWFybmluZ3NQZXJzaGFyZRgFIAIoAVIQZWFybmluZ3NQZXJzaGFyZRIs", 
            "ChFvdXRzdGFuZGluZ1NoYXJlcxgGIAIoA1IRb3V0c3RhbmRpbmdTaGFyZXMS", 
            "MgoUb3V0c3RhbmRpbmdNYXJrZXRWYWwYByACKAFSFG91dHN0YW5kaW5nTWFy", 
            "a2V0VmFsEioKEG5ldEFzc2V0UGVyc2hhcmUYCCACKAFSEG5ldEFzc2V0UGVy", 
            "c2hhcmUSFgoGZXlSYXRlGAkgAigBUgZleVJhdGUSFgoGcGVSYXRlGAogAigB", 
            "UgZwZVJhdGUSFgoGcGJSYXRlGAsgAigBUgZwYlJhdGUSHAoJcGVUVE1SYXRl", 
            "GAwgAigBUglwZVRUTVJhdGUSIAoLZGl2aWRlbmRUVE0YDSABKAFSC2Rpdmlk", 
            "ZW5kVFRNEioKEGRpdmlkZW5kUmF0aW9UVE0YDiABKAFSEGRpdmlkZW5kUmF0", 
            "aW9UVE0SIAoLZGl2aWRlbmRMRlkYDyABKAFSC2RpdmlkZW5kTEZZEioKEGRp", 
            "dmlkZW5kTEZZUmF0aW8YECABKAFSEGRpdmlkZW5kTEZZUmF0aW8iqwcKFVdh", 
            "cnJhbnRTbmFwc2hvdEV4RGF0YRImCg5jb252ZXJzaW9uUmF0ZRgBIAIoAVIO", 
            "Y29udmVyc2lvblJhdGUSIAoLd2FycmFudFR5cGUYAiACKAVSC3dhcnJhbnRU", 
            "eXBlEiAKC3N0cmlrZVByaWNlGAMgAigBUgtzdHJpa2VQcmljZRIiCgxtYXR1", 
            "cml0eVRpbWUYBCACKAlSDG1hdHVyaXR5VGltZRIiCgxlbmRUcmFkZVRpbWUY", 
            "BSACKAlSDGVuZFRyYWRlVGltZRIqCgVvd25lchgGIAIoCzIULlFvdF9Db21t", 
            "b24uU2VjdXJpdHlSBW93bmVyEiQKDXJlY292ZXJ5UHJpY2UYByACKAFSDXJl", 
            "Y292ZXJ5UHJpY2USIgoMc3RyZWV0Vm9sdW1uGAggAigDUgxzdHJlZXRWb2x1", 
            "bW4SIAoLaXNzdWVWb2x1bW4YCSACKANSC2lzc3VlVm9sdW1uEh4KCnN0cmVl", 
            "dFJhdGUYCiACKAFSCnN0cmVldFJhdGUSFAoFZGVsdGEYCyACKAFSBWRlbHRh", 
            "EiwKEWltcGxpZWRWb2xhdGlsaXR5GAwgAigBUhFpbXBsaWVkVm9sYXRpbGl0", 
            "eRIYCgdwcmVtaXVtGA0gAigBUgdwcmVtaXVtEiwKEW1hdHVyaXR5VGltZXN0", 
            "YW1wGA4gASgBUhFtYXR1cml0eVRpbWVzdGFtcBIsChFlbmRUcmFkZVRpbWVz", 
            "dGFtcBgPIAEoAVIRZW5kVHJhZGVUaW1lc3RhbXASGgoIbGV2ZXJhZ2UYECAB", 
            "KAFSCGxldmVyYWdlEhIKBGlwb3AYESABKAFSBGlwb3ASJgoOYnJlYWtFdmVu", 
            "UG9pbnQYEiABKAFSDmJyZWFrRXZlblBvaW50EigKD2NvbnZlcnNpb25Qcmlj", 
            "ZRgTIAEoAVIPY29udmVyc2lvblByaWNlEi4KEnByaWNlUmVjb3ZlcnlSYXRp", 
            "bxgUIAEoAVIScHJpY2VSZWNvdmVyeVJhdGlvEhQKBXNjb3JlGBUgASgBUgVz", 
            "Y29yZRIqChB1cHBlclN0cmlrZVByaWNlGBYgASgBUhB1cHBlclN0cmlrZVBy", 
            "aWNlEioKEGxvd2VyU3RyaWtlUHJpY2UYFyABKAFSEGxvd2VyU3RyaWtlUHJp", 
            "Y2USLAoRaW5MaW5lUHJpY2VTdGF0dXMYGCABKAVSEWluTGluZVByaWNlU3Rh", 
            "dHVzEh4KCmlzc3VlckNvZGUYGSABKAlSCmlzc3VlckNvZGUiqAYKFE9wdGlv", 
            "blNuYXBzaG90RXhEYXRhEhIKBHR5cGUYASACKAVSBHR5cGUSKgoFb3duZXIY", 
            "AiACKAsyFC5Rb3RfQ29tbW9uLlNlY3VyaXR5UgVvd25lchIeCgpzdHJpa2VU", 
            "aW1lGAMgAigJUgpzdHJpa2VUaW1lEiAKC3N0cmlrZVByaWNlGAQgAigBUgtz", 
            "dHJpa2VQcmljZRIiCgxjb250cmFjdFNpemUYBSACKAVSDGNvbnRyYWN0U2l6", 
            "ZRIsChFjb250cmFjdFNpemVGbG9hdBgWIAEoAVIRY29udHJhY3RTaXplRmxv", 
            "YXQSIgoMb3BlbkludGVyZXN0GAYgAigFUgxvcGVuSW50ZXJlc3QSLAoRaW1w", 
            "bGllZFZvbGF0aWxpdHkYByACKAFSEWltcGxpZWRWb2xhdGlsaXR5EhgKB3By", 
            "ZW1pdW0YCCACKAFSB3ByZW1pdW0SFAoFZGVsdGEYCSACKAFSBWRlbHRhEhQK", 
            "BWdhbW1hGAogAigBUgVnYW1tYRISCgR2ZWdhGAsgAigBUgR2ZWdhEhQKBXRo", 
            "ZXRhGAwgAigBUgV0aGV0YRIQCgNyaG8YDSACKAFSA3JobxIoCg9zdHJpa2VU", 
            "aW1lc3RhbXAYDiABKAFSD3N0cmlrZVRpbWVzdGFtcBIoCg9pbmRleE9wdGlv", 
            "blR5cGUYDyABKAVSD2luZGV4T3B0aW9uVHlwZRIoCg9uZXRPcGVuSW50ZXJl", 
            "c3QYECABKAVSD25ldE9wZW5JbnRlcmVzdBIuChJleHBpcnlEYXRlRGlzdGFu", 
            "Y2UYESABKAVSEmV4cGlyeURhdGVEaXN0YW5jZRIyChRjb250cmFjdE5vbWlu", 
            "YWxWYWx1ZRgSIAEoAVIUY29udHJhY3ROb21pbmFsVmFsdWUSLgoSb3duZXJM", 
            "b3RNdWx0aXBsaWVyGBMgASgBUhJvd25lckxvdE11bHRpcGxpZXISJgoOb3B0", 
            "aW9uQXJlYVR5cGUYFCABKAVSDm9wdGlvbkFyZWFUeXBlEi4KEmNvbnRyYWN0", 
            "TXVsdGlwbGllchgVIAEoAVISY29udHJhY3RNdWx0aXBsaWVyInMKE0luZGV4", 
            "U25hcHNob3RFeERhdGESHgoKcmFpc2VDb3VudBgBIAIoBVIKcmFpc2VDb3Vu", 
            "dBIcCglmYWxsQ291bnQYAiACKAVSCWZhbGxDb3VudBIeCgplcXVhbENvdW50", 
            "GAMgAigFUgplcXVhbENvdW50InMKE1BsYXRlU25hcHNob3RFeERhdGESHgoK", 
            "cmFpc2VDb3VudBgBIAIoBVIKcmFpc2VDb3VudBIcCglmYWxsQ291bnQYAiAC", 
            "KAVSCWZhbGxDb3VudBIeCgplcXVhbENvdW50GAMgAigFUgplcXVhbENvdW50", 
            "IoICChRGdXR1cmVTbmFwc2hvdEV4RGF0YRIoCg9sYXN0U2V0dGxlUHJpY2UY", 
            "ASACKAFSD2xhc3RTZXR0bGVQcmljZRIaCghwb3NpdGlvbhgCIAIoBVIIcG9z", 
            "aXRpb24SJgoOcG9zaXRpb25DaGFuZ2UYAyACKAVSDnBvc2l0aW9uQ2hhbmdl", 
            "EiQKDWxhc3RUcmFkZVRpbWUYBCACKAlSDWxhc3RUcmFkZVRpbWUSLgoSbGFz", 
            "dFRyYWRlVGltZXN0YW1wGAUgASgBUhJsYXN0VHJhZGVUaW1lc3RhbXASJgoO", 
            "aXNNYWluQ29udHJhY3QYBiACKAhSDmlzTWFpbkNvbnRyYWN0ItkBChNUcnVz", 
            "dFNuYXBzaG90RXhEYXRhEiQKDWRpdmlkZW5kWWllbGQYASACKAFSDWRpdmlk", 
            "ZW5kWWllbGQSEAoDYXVtGAIgAigBUgNhdW0SKgoQb3V0c3RhbmRpbmdVbml0", 
            "cxgDIAIoA1IQb3V0c3RhbmRpbmdVbml0cxIkCg1uZXRBc3NldFZhbHVlGAQg", 
            "AigBUg1uZXRBc3NldFZhbHVlEhgKB3ByZW1pdW0YBSACKAFSB3ByZW1pdW0S", 
            "HgoKYXNzZXRDbGFzcxgGIAIoBVIKYXNzZXRDbGFzcyLpCwoRU25hcHNob3RC", 
            "YXNpY0RhdGESMAoIc2VjdXJpdHkYASACKAsyFC5Rb3RfQ29tbW9uLlNlY3Vy", 
            "aXR5UghzZWN1cml0eRISCgR0eXBlGAIgAigFUgR0eXBlEhwKCWlzU3VzcGVu", 
            "ZBgDIAIoCFIJaXNTdXNwZW5kEhoKCGxpc3RUaW1lGAQgAigJUghsaXN0VGlt", 
            "ZRIYCgdsb3RTaXplGAUgAigFUgdsb3RTaXplEiAKC3ByaWNlU3ByZWFkGAYg", 
            "AigBUgtwcmljZVNwcmVhZBIeCgp1cGRhdGVUaW1lGAcgAigJUgp1cGRhdGVU", 
            "aW1lEhwKCWhpZ2hQcmljZRgIIAIoAVIJaGlnaFByaWNlEhwKCW9wZW5Qcmlj", 
            "ZRgJIAIoAVIJb3BlblByaWNlEhoKCGxvd1ByaWNlGAogAigBUghsb3dQcmlj", 
            "ZRImCg5sYXN0Q2xvc2VQcmljZRgLIAIoAVIObGFzdENsb3NlUHJpY2USGgoI", 
            "Y3VyUHJpY2UYDCACKAFSCGN1clByaWNlEhYKBnZvbHVtZRgNIAIoA1IGdm9s", 
            "dW1lEhoKCHR1cm5vdmVyGA4gAigBUgh0dXJub3ZlchIiCgx0dXJub3ZlclJh", 
            "dGUYDyACKAFSDHR1cm5vdmVyUmF0ZRIkCg1saXN0VGltZXN0YW1wGBAgASgB", 
            "Ug1saXN0VGltZXN0YW1wEigKD3VwZGF0ZVRpbWVzdGFtcBgRIAEoAVIPdXBk", 
            "YXRlVGltZXN0YW1wEhoKCGFza1ByaWNlGBIgASgBUghhc2tQcmljZRIaCghi", 
            "aWRQcmljZRgTIAEoAVIIYmlkUHJpY2USFgoGYXNrVm9sGBQgASgDUgZhc2tW", 
            "b2wSFgoGYmlkVm9sGBUgASgDUgZiaWRWb2wSIgoMZW5hYmxlTWFyZ2luGBYg", 
            "ASgIUgxlbmFibGVNYXJnaW4SJAoNbW9ydGdhZ2VSYXRpbxgXIAEoAVINbW9y", 
            "dGdhZ2VSYXRpbxI2ChZsb25nTWFyZ2luSW5pdGlhbFJhdGlvGBggASgBUhZs", 
            "b25nTWFyZ2luSW5pdGlhbFJhdGlvEigKD2VuYWJsZVNob3J0U2VsbBgZIAEo", 
            "CFIPZW5hYmxlU2hvcnRTZWxsEiQKDXNob3J0U2VsbFJhdGUYGiABKAFSDXNo", 
            "b3J0U2VsbFJhdGUSMgoUc2hvcnRBdmFpbGFibGVWb2x1bWUYGyABKANSFHNo", 
            "b3J0QXZhaWxhYmxlVm9sdW1lEjgKF3Nob3J0TWFyZ2luSW5pdGlhbFJhdGlv", 
            "GBwgASgBUhdzaG9ydE1hcmdpbkluaXRpYWxSYXRpbxIcCglhbXBsaXR1ZGUY", 
            "HSABKAFSCWFtcGxpdHVkZRIaCghhdmdQcmljZRgeIAEoAVIIYXZnUHJpY2US", 
            "IAoLYmlkQXNrUmF0aW8YHyABKAFSC2JpZEFza1JhdGlvEiAKC3ZvbHVtZVJh", 
            "dGlvGCAgASgBUgt2b2x1bWVSYXRpbxIwChNoaWdoZXN0NTJXZWVrc1ByaWNl", 
            "GCEgASgBUhNoaWdoZXN0NTJXZWVrc1ByaWNlEi4KEmxvd2VzdDUyV2Vla3NQ", 
            "cmljZRgiIAEoAVISbG93ZXN0NTJXZWVrc1ByaWNlEjAKE2hpZ2hlc3RIaXN0", 
            "b3J5UHJpY2UYIyABKAFSE2hpZ2hlc3RIaXN0b3J5UHJpY2USLgoSbG93ZXN0", 
            "SGlzdG9yeVByaWNlGCQgASgBUhJsb3dlc3RIaXN0b3J5UHJpY2USPAoJcHJl", 
            "TWFya2V0GCUgASgLMh4uUW90X0NvbW1vbi5QcmVBZnRlck1hcmtldERhdGFS", 
            "CXByZU1hcmtldBJACgthZnRlck1hcmtldBgmIAEoCzIeLlFvdF9Db21tb24u", 
            "UHJlQWZ0ZXJNYXJrZXREYXRhUgthZnRlck1hcmtldBIcCglzZWNTdGF0dXMY", 
            "JyABKAVSCXNlY1N0YXR1cxIsChFjbG9zZVByaWNlNU1pbnV0ZRgoIAEoAVIR", 
            "Y2xvc2VQcmljZTVNaW51dGUiiwUKCFNuYXBzaG90EkAKBWJhc2ljGAEgAigL", 
            "MiouUW90X0dldFNlY3VyaXR5U25hcHNob3QuU25hcHNob3RCYXNpY0RhdGFS", 
            "BWJhc2ljElEKDGVxdWl0eUV4RGF0YRgCIAEoCzItLlFvdF9HZXRTZWN1cml0", 
            "eVNuYXBzaG90LkVxdWl0eVNuYXBzaG90RXhEYXRhUgxlcXVpdHlFeERhdGES", 
            "VAoNd2FycmFudEV4RGF0YRgDIAEoCzIuLlFvdF9HZXRTZWN1cml0eVNuYXBz", 
            "aG90LldhcnJhbnRTbmFwc2hvdEV4RGF0YVINd2FycmFudEV4RGF0YRJRCgxv", 
            "cHRpb25FeERhdGEYBCABKAsyLS5Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5P", 
            "cHRpb25TbmFwc2hvdEV4RGF0YVIMb3B0aW9uRXhEYXRhEk4KC2luZGV4RXhE", 
            "YXRhGAUgASgLMiwuUW90X0dldFNlY3VyaXR5U25hcHNob3QuSW5kZXhTbmFw", 
            "c2hvdEV4RGF0YVILaW5kZXhFeERhdGESTgoLcGxhdGVFeERhdGEYBiABKAsy", 
            "LC5Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5QbGF0ZVNuYXBzaG90RXhEYXRh", 
            "UgtwbGF0ZUV4RGF0YRJRCgxmdXR1cmVFeERhdGEYByABKAsyLS5Rb3RfR2V0", 
            "U2VjdXJpdHlTbmFwc2hvdC5GdXR1cmVTbmFwc2hvdEV4RGF0YVIMZnV0dXJl", 
            "RXhEYXRhEk4KC3RydXN0RXhEYXRhGAggASgLMiwuUW90X0dldFNlY3VyaXR5", 
            "U25hcHNob3QuVHJ1c3RTbmFwc2hvdEV4RGF0YVILdHJ1c3RFeERhdGEiTAoD", 
            "UzJDEkUKDHNuYXBzaG90TGlzdBgBIAMoCzIhLlFvdF9HZXRTZWN1cml0eVNu", 
            "YXBzaG90LlNuYXBzaG90UgxzbmFwc2hvdExpc3QiOQoHUmVxdWVzdBIuCgNj", 
            "MnMYASACKAsyHC5Rb3RfR2V0U2VjdXJpdHlTbmFwc2hvdC5DMlNSA2MycyKM", 
            "AQoIUmVzcG9uc2USHgoHcmV0VHlwZRgBIAIoBToELTQwMFIHcmV0VHlwZRIW", 
            "CgZyZXRNc2cYAiABKAlSBnJldE1zZxIYCgdlcnJDb2RlGAMgASgFUgdlcnJD", 
            "b2RlEi4KA3MyYxgEIAEoCzIcLlFvdF9HZXRTZWN1cml0eVNuYXBzaG90LlMy", 
            "Q1IDczJjQk0KE2NvbS5mdXR1Lm9wZW5hcGkucGJaNmdpdGh1Yi5jb20vZnV0", 
          "dW9wZW4vZnRhcGk0Z28vcGIvcW90Z2V0c2VjdXJpdHlzbmFwc2hvdA=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.Builder>(internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor,
                new string[] { "SecurityList", });
        internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor,
                new string[] { "IssuedShares", "IssuedMarketVal", "NetAsset", "NetProfit", "EarningsPershare", "OutstandingShares", "OutstandingMarketVal", "NetAssetPershare", "EyRate", "PeRate", "PbRate", "PeTTMRate", "DividendTTM", "DividendRatioTTM", "DividendLFY", "DividendLFYRatio", });
        internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor,
                new string[] { "ConversionRate", "WarrantType", "StrikePrice", "MaturityTime", "EndTradeTime", "Owner", "RecoveryPrice", "StreetVolumn", "IssueVolumn", "StreetRate", "Delta", "ImpliedVolatility", "Premium", "MaturityTimestamp", "EndTradeTimestamp", "Leverage", "Ipop", "BreakEvenPoint", "ConversionPrice", "PriceRecoveryRatio", "Score", "UpperStrikePrice", "LowerStrikePrice", "InLinePriceStatus", "IssuerCode", });
        internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor,
                new string[] { "Type", "Owner", "StrikeTime", "StrikePrice", "ContractSize", "ContractSizeFloat", "OpenInterest", "ImpliedVolatility", "Premium", "Delta", "Gamma", "Vega", "Theta", "Rho", "StrikeTimestamp", "IndexOptionType", "NetOpenInterest", "ExpiryDateDistance", "ContractNominalValue", "OwnerLotMultiplier", "OptionAreaType", "ContractMultiplier", });
        internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__Descriptor,
                new string[] { "RaiseCount", "FallCount", "EqualCount", });
        internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__Descriptor,
                new string[] { "RaiseCount", "FallCount", "EqualCount", });
        internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__Descriptor,
                new string[] { "LastSettlePrice", "Position", "PositionChange", "LastTradeTime", "LastTradeTimestamp", "IsMainContract", });
        internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.Builder>(internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__Descriptor,
                new string[] { "DividendYield", "Aum", "OutstandingUnits", "NetAssetValue", "Premium", "AssetClass", });
        internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.Builder>(internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor,
                new string[] { "Security", "Type", "IsSuspend", "ListTime", "LotSize", "PriceSpread", "UpdateTime", "HighPrice", "OpenPrice", "LowPrice", "LastClosePrice", "CurPrice", "Volume", "Turnover", "TurnoverRate", "ListTimestamp", "UpdateTimestamp", "AskPrice", "BidPrice", "AskVol", "BidVol", "EnableMargin", "MortgageRatio", "LongMarginInitialRatio", "EnableShortSell", "ShortSellRate", "ShortAvailableVolume", "ShortMarginInitialRatio", "Amplitude", "AvgPrice", "BidAskRatio", "VolumeRatio", "Highest52WeeksPrice", "Lowest52WeeksPrice", "HighestHistoryPrice", "LowestHistoryPrice", "PreMarket", "AfterMarket", "SecStatus", "ClosePrice5Minute", });
        internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.Builder>(internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor,
                new string[] { "Basic", "EquityExData", "WarrantExData", "OptionExData", "IndexExData", "PlateExData", "FutureExData", "TrustExData", });
        internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.Builder>(internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor,
                new string[] { "SnapshotList", });
        internal__static_Qot_GetSecuritySnapshot_Request__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request.Builder>(internal__static_Qot_GetSecuritySnapshot_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Qot_GetSecuritySnapshot_Response__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response.Builder>(internal__static_Qot_GetSecuritySnapshot_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.QotCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          global::Futu.OpenApi.Pb.QotCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "securityList" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 10 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_C2S__FieldAccessorTable; }
      }
      
      public const int SecurityListFieldNumber = 1;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security> securityList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security>();
      public scg::IList<global::Futu.OpenApi.Pb.QotCommon.Security> SecurityListList {
        get { return securityList_; }
      }
      public int SecurityListCount {
        get { return securityList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security GetSecurityList(int index) {
        return securityList_[index];
      }
      
      public override bool IsInitialized {
        get {
          foreach (global::Futu.OpenApi.Pb.QotCommon.Security element in SecurityListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (securityList_.Count > 0) {
          output.WriteMessageArray(1, field_names[0], securityList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Futu.OpenApi.Pb.QotCommon.Security element in SecurityListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        securityList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.securityList_.Count != 0) {
            result.securityList_.Add(other.securityList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                input.ReadMessageArray(tag, field_name, result.securityList_, global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security> SecurityListList {
          get { return PrepareBuilder().securityList_; }
        }
        public int SecurityListCount {
          get { return result.SecurityListCount; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security GetSecurityList(int index) {
          return result.GetSecurityList(index);
        }
        public Builder SetSecurityList(int index, global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.securityList_[index] = value;
          return this;
        }
        public Builder SetSecurityList(int index, global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.securityList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddSecurityList(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.securityList_.Add(value);
          return this;
        }
        public Builder AddSecurityList(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.securityList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeSecurityList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotCommon.Security> values) {
          PrepareBuilder();
          result.securityList_.Add(values);
          return this;
        }
        public Builder ClearSecurityList() {
          PrepareBuilder();
          result.securityList_.Clear();
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class EquitySnapshotExData : pb::GeneratedMessage<EquitySnapshotExData, EquitySnapshotExData.Builder> {
      private EquitySnapshotExData() { }
      private static readonly EquitySnapshotExData defaultInstance = new EquitySnapshotExData().MakeReadOnly();
      private static readonly string[] _equitySnapshotExDataFieldNames = new string[] { "dividendLFY", "dividendLFYRatio", "dividendRatioTTM", "dividendTTM", "earningsPershare", "eyRate", "issuedMarketVal", "issuedShares", "netAsset", "netAssetPershare", "netProfit", "outstandingMarketVal", "outstandingShares", "pbRate", "peRate", "peTTMRate" };
      private static readonly uint[] _equitySnapshotExDataFieldTags = new uint[] { 121, 129, 113, 105, 41, 73, 17, 8, 25, 65, 33, 57, 48, 89, 81, 97 };
      public static EquitySnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override EquitySnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override EquitySnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<EquitySnapshotExData, EquitySnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_EquitySnapshotExData__FieldAccessorTable; }
      }
      
      public const int IssuedSharesFieldNumber = 1;
      private bool hasIssuedShares;
      private long issuedShares_;
      public bool HasIssuedShares {
        get { return hasIssuedShares; }
      }
      public long IssuedShares {
        get { return issuedShares_; }
      }
      
      public const int IssuedMarketValFieldNumber = 2;
      private bool hasIssuedMarketVal;
      private double issuedMarketVal_;
      public bool HasIssuedMarketVal {
        get { return hasIssuedMarketVal; }
      }
      public double IssuedMarketVal {
        get { return issuedMarketVal_; }
      }
      
      public const int NetAssetFieldNumber = 3;
      private bool hasNetAsset;
      private double netAsset_;
      public bool HasNetAsset {
        get { return hasNetAsset; }
      }
      public double NetAsset {
        get { return netAsset_; }
      }
      
      public const int NetProfitFieldNumber = 4;
      private bool hasNetProfit;
      private double netProfit_;
      public bool HasNetProfit {
        get { return hasNetProfit; }
      }
      public double NetProfit {
        get { return netProfit_; }
      }
      
      public const int EarningsPershareFieldNumber = 5;
      private bool hasEarningsPershare;
      private double earningsPershare_;
      public bool HasEarningsPershare {
        get { return hasEarningsPershare; }
      }
      public double EarningsPershare {
        get { return earningsPershare_; }
      }
      
      public const int OutstandingSharesFieldNumber = 6;
      private bool hasOutstandingShares;
      private long outstandingShares_;
      public bool HasOutstandingShares {
        get { return hasOutstandingShares; }
      }
      public long OutstandingShares {
        get { return outstandingShares_; }
      }
      
      public const int OutstandingMarketValFieldNumber = 7;
      private bool hasOutstandingMarketVal;
      private double outstandingMarketVal_;
      public bool HasOutstandingMarketVal {
        get { return hasOutstandingMarketVal; }
      }
      public double OutstandingMarketVal {
        get { return outstandingMarketVal_; }
      }
      
      public const int NetAssetPershareFieldNumber = 8;
      private bool hasNetAssetPershare;
      private double netAssetPershare_;
      public bool HasNetAssetPershare {
        get { return hasNetAssetPershare; }
      }
      public double NetAssetPershare {
        get { return netAssetPershare_; }
      }
      
      public const int EyRateFieldNumber = 9;
      private bool hasEyRate;
      private double eyRate_;
      public bool HasEyRate {
        get { return hasEyRate; }
      }
      public double EyRate {
        get { return eyRate_; }
      }
      
      public const int PeRateFieldNumber = 10;
      private bool hasPeRate;
      private double peRate_;
      public bool HasPeRate {
        get { return hasPeRate; }
      }
      public double PeRate {
        get { return peRate_; }
      }
      
      public const int PbRateFieldNumber = 11;
      private bool hasPbRate;
      private double pbRate_;
      public bool HasPbRate {
        get { return hasPbRate; }
      }
      public double PbRate {
        get { return pbRate_; }
      }
      
      public const int PeTTMRateFieldNumber = 12;
      private bool hasPeTTMRate;
      private double peTTMRate_;
      public bool HasPeTTMRate {
        get { return hasPeTTMRate; }
      }
      public double PeTTMRate {
        get { return peTTMRate_; }
      }
      
      public const int DividendTTMFieldNumber = 13;
      private bool hasDividendTTM;
      private double dividendTTM_;
      public bool HasDividendTTM {
        get { return hasDividendTTM; }
      }
      public double DividendTTM {
        get { return dividendTTM_; }
      }
      
      public const int DividendRatioTTMFieldNumber = 14;
      private bool hasDividendRatioTTM;
      private double dividendRatioTTM_;
      public bool HasDividendRatioTTM {
        get { return hasDividendRatioTTM; }
      }
      public double DividendRatioTTM {
        get { return dividendRatioTTM_; }
      }
      
      public const int DividendLFYFieldNumber = 15;
      private bool hasDividendLFY;
      private double dividendLFY_;
      public bool HasDividendLFY {
        get { return hasDividendLFY; }
      }
      public double DividendLFY {
        get { return dividendLFY_; }
      }
      
      public const int DividendLFYRatioFieldNumber = 16;
      private bool hasDividendLFYRatio;
      private double dividendLFYRatio_;
      public bool HasDividendLFYRatio {
        get { return hasDividendLFYRatio; }
      }
      public double DividendLFYRatio {
        get { return dividendLFYRatio_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasIssuedShares) return false;
          if (!hasIssuedMarketVal) return false;
          if (!hasNetAsset) return false;
          if (!hasNetProfit) return false;
          if (!hasEarningsPershare) return false;
          if (!hasOutstandingShares) return false;
          if (!hasOutstandingMarketVal) return false;
          if (!hasNetAssetPershare) return false;
          if (!hasEyRate) return false;
          if (!hasPeRate) return false;
          if (!hasPbRate) return false;
          if (!hasPeTTMRate) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _equitySnapshotExDataFieldNames;
        if (hasIssuedShares) {
          output.WriteInt64(1, field_names[7], IssuedShares);
        }
        if (hasIssuedMarketVal) {
          output.WriteDouble(2, field_names[6], IssuedMarketVal);
        }
        if (hasNetAsset) {
          output.WriteDouble(3, field_names[8], NetAsset);
        }
        if (hasNetProfit) {
          output.WriteDouble(4, field_names[10], NetProfit);
        }
        if (hasEarningsPershare) {
          output.WriteDouble(5, field_names[4], EarningsPershare);
        }
        if (hasOutstandingShares) {
          output.WriteInt64(6, field_names[12], OutstandingShares);
        }
        if (hasOutstandingMarketVal) {
          output.WriteDouble(7, field_names[11], OutstandingMarketVal);
        }
        if (hasNetAssetPershare) {
          output.WriteDouble(8, field_names[9], NetAssetPershare);
        }
        if (hasEyRate) {
          output.WriteDouble(9, field_names[5], EyRate);
        }
        if (hasPeRate) {
          output.WriteDouble(10, field_names[14], PeRate);
        }
        if (hasPbRate) {
          output.WriteDouble(11, field_names[13], PbRate);
        }
        if (hasPeTTMRate) {
          output.WriteDouble(12, field_names[15], PeTTMRate);
        }
        if (hasDividendTTM) {
          output.WriteDouble(13, field_names[3], DividendTTM);
        }
        if (hasDividendRatioTTM) {
          output.WriteDouble(14, field_names[2], DividendRatioTTM);
        }
        if (hasDividendLFY) {
          output.WriteDouble(15, field_names[0], DividendLFY);
        }
        if (hasDividendLFYRatio) {
          output.WriteDouble(16, field_names[1], DividendLFYRatio);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIssuedShares) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, IssuedShares);
        }
        if (hasIssuedMarketVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, IssuedMarketVal);
        }
        if (hasNetAsset) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, NetAsset);
        }
        if (hasNetProfit) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, NetProfit);
        }
        if (hasEarningsPershare) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, EarningsPershare);
        }
        if (hasOutstandingShares) {
          size += pb::CodedOutputStream.ComputeInt64Size(6, OutstandingShares);
        }
        if (hasOutstandingMarketVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, OutstandingMarketVal);
        }
        if (hasNetAssetPershare) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, NetAssetPershare);
        }
        if (hasEyRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, EyRate);
        }
        if (hasPeRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, PeRate);
        }
        if (hasPbRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, PbRate);
        }
        if (hasPeTTMRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, PeTTMRate);
        }
        if (hasDividendTTM) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, DividendTTM);
        }
        if (hasDividendRatioTTM) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, DividendRatioTTM);
        }
        if (hasDividendLFY) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, DividendLFY);
        }
        if (hasDividendLFYRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, DividendLFYRatio);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static EquitySnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static EquitySnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static EquitySnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static EquitySnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private EquitySnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(EquitySnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<EquitySnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(EquitySnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private EquitySnapshotExData result;
        
        private EquitySnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            EquitySnapshotExData original = result;
            result = new EquitySnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override EquitySnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.Descriptor; }
        }
        
        public override EquitySnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.DefaultInstance; }
        }
        
        public override EquitySnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is EquitySnapshotExData) {
            return MergeFrom((EquitySnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(EquitySnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasIssuedShares) {
            IssuedShares = other.IssuedShares;
          }
          if (other.HasIssuedMarketVal) {
            IssuedMarketVal = other.IssuedMarketVal;
          }
          if (other.HasNetAsset) {
            NetAsset = other.NetAsset;
          }
          if (other.HasNetProfit) {
            NetProfit = other.NetProfit;
          }
          if (other.HasEarningsPershare) {
            EarningsPershare = other.EarningsPershare;
          }
          if (other.HasOutstandingShares) {
            OutstandingShares = other.OutstandingShares;
          }
          if (other.HasOutstandingMarketVal) {
            OutstandingMarketVal = other.OutstandingMarketVal;
          }
          if (other.HasNetAssetPershare) {
            NetAssetPershare = other.NetAssetPershare;
          }
          if (other.HasEyRate) {
            EyRate = other.EyRate;
          }
          if (other.HasPeRate) {
            PeRate = other.PeRate;
          }
          if (other.HasPbRate) {
            PbRate = other.PbRate;
          }
          if (other.HasPeTTMRate) {
            PeTTMRate = other.PeTTMRate;
          }
          if (other.HasDividendTTM) {
            DividendTTM = other.DividendTTM;
          }
          if (other.HasDividendRatioTTM) {
            DividendRatioTTM = other.DividendRatioTTM;
          }
          if (other.HasDividendLFY) {
            DividendLFY = other.DividendLFY;
          }
          if (other.HasDividendLFYRatio) {
            DividendLFYRatio = other.DividendLFYRatio;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_equitySnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _equitySnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasIssuedShares = input.ReadInt64(ref result.issuedShares_);
                break;
              }
              case 17: {
                result.hasIssuedMarketVal = input.ReadDouble(ref result.issuedMarketVal_);
                break;
              }
              case 25: {
                result.hasNetAsset = input.ReadDouble(ref result.netAsset_);
                break;
              }
              case 33: {
                result.hasNetProfit = input.ReadDouble(ref result.netProfit_);
                break;
              }
              case 41: {
                result.hasEarningsPershare = input.ReadDouble(ref result.earningsPershare_);
                break;
              }
              case 48: {
                result.hasOutstandingShares = input.ReadInt64(ref result.outstandingShares_);
                break;
              }
              case 57: {
                result.hasOutstandingMarketVal = input.ReadDouble(ref result.outstandingMarketVal_);
                break;
              }
              case 65: {
                result.hasNetAssetPershare = input.ReadDouble(ref result.netAssetPershare_);
                break;
              }
              case 73: {
                result.hasEyRate = input.ReadDouble(ref result.eyRate_);
                break;
              }
              case 81: {
                result.hasPeRate = input.ReadDouble(ref result.peRate_);
                break;
              }
              case 89: {
                result.hasPbRate = input.ReadDouble(ref result.pbRate_);
                break;
              }
              case 97: {
                result.hasPeTTMRate = input.ReadDouble(ref result.peTTMRate_);
                break;
              }
              case 105: {
                result.hasDividendTTM = input.ReadDouble(ref result.dividendTTM_);
                break;
              }
              case 113: {
                result.hasDividendRatioTTM = input.ReadDouble(ref result.dividendRatioTTM_);
                break;
              }
              case 121: {
                result.hasDividendLFY = input.ReadDouble(ref result.dividendLFY_);
                break;
              }
              case 129: {
                result.hasDividendLFYRatio = input.ReadDouble(ref result.dividendLFYRatio_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasIssuedShares {
          get { return result.hasIssuedShares; }
        }
        public long IssuedShares {
          get { return result.IssuedShares; }
          set { SetIssuedShares(value); }
        }
        public Builder SetIssuedShares(long value) {
          PrepareBuilder();
          result.hasIssuedShares = true;
          result.issuedShares_ = value;
          return this;
        }
        public Builder ClearIssuedShares() {
          PrepareBuilder();
          result.hasIssuedShares = false;
          result.issuedShares_ = 0L;
          return this;
        }
        
        public bool HasIssuedMarketVal {
          get { return result.hasIssuedMarketVal; }
        }
        public double IssuedMarketVal {
          get { return result.IssuedMarketVal; }
          set { SetIssuedMarketVal(value); }
        }
        public Builder SetIssuedMarketVal(double value) {
          PrepareBuilder();
          result.hasIssuedMarketVal = true;
          result.issuedMarketVal_ = value;
          return this;
        }
        public Builder ClearIssuedMarketVal() {
          PrepareBuilder();
          result.hasIssuedMarketVal = false;
          result.issuedMarketVal_ = 0D;
          return this;
        }
        
        public bool HasNetAsset {
          get { return result.hasNetAsset; }
        }
        public double NetAsset {
          get { return result.NetAsset; }
          set { SetNetAsset(value); }
        }
        public Builder SetNetAsset(double value) {
          PrepareBuilder();
          result.hasNetAsset = true;
          result.netAsset_ = value;
          return this;
        }
        public Builder ClearNetAsset() {
          PrepareBuilder();
          result.hasNetAsset = false;
          result.netAsset_ = 0D;
          return this;
        }
        
        public bool HasNetProfit {
          get { return result.hasNetProfit; }
        }
        public double NetProfit {
          get { return result.NetProfit; }
          set { SetNetProfit(value); }
        }
        public Builder SetNetProfit(double value) {
          PrepareBuilder();
          result.hasNetProfit = true;
          result.netProfit_ = value;
          return this;
        }
        public Builder ClearNetProfit() {
          PrepareBuilder();
          result.hasNetProfit = false;
          result.netProfit_ = 0D;
          return this;
        }
        
        public bool HasEarningsPershare {
          get { return result.hasEarningsPershare; }
        }
        public double EarningsPershare {
          get { return result.EarningsPershare; }
          set { SetEarningsPershare(value); }
        }
        public Builder SetEarningsPershare(double value) {
          PrepareBuilder();
          result.hasEarningsPershare = true;
          result.earningsPershare_ = value;
          return this;
        }
        public Builder ClearEarningsPershare() {
          PrepareBuilder();
          result.hasEarningsPershare = false;
          result.earningsPershare_ = 0D;
          return this;
        }
        
        public bool HasOutstandingShares {
          get { return result.hasOutstandingShares; }
        }
        public long OutstandingShares {
          get { return result.OutstandingShares; }
          set { SetOutstandingShares(value); }
        }
        public Builder SetOutstandingShares(long value) {
          PrepareBuilder();
          result.hasOutstandingShares = true;
          result.outstandingShares_ = value;
          return this;
        }
        public Builder ClearOutstandingShares() {
          PrepareBuilder();
          result.hasOutstandingShares = false;
          result.outstandingShares_ = 0L;
          return this;
        }
        
        public bool HasOutstandingMarketVal {
          get { return result.hasOutstandingMarketVal; }
        }
        public double OutstandingMarketVal {
          get { return result.OutstandingMarketVal; }
          set { SetOutstandingMarketVal(value); }
        }
        public Builder SetOutstandingMarketVal(double value) {
          PrepareBuilder();
          result.hasOutstandingMarketVal = true;
          result.outstandingMarketVal_ = value;
          return this;
        }
        public Builder ClearOutstandingMarketVal() {
          PrepareBuilder();
          result.hasOutstandingMarketVal = false;
          result.outstandingMarketVal_ = 0D;
          return this;
        }
        
        public bool HasNetAssetPershare {
          get { return result.hasNetAssetPershare; }
        }
        public double NetAssetPershare {
          get { return result.NetAssetPershare; }
          set { SetNetAssetPershare(value); }
        }
        public Builder SetNetAssetPershare(double value) {
          PrepareBuilder();
          result.hasNetAssetPershare = true;
          result.netAssetPershare_ = value;
          return this;
        }
        public Builder ClearNetAssetPershare() {
          PrepareBuilder();
          result.hasNetAssetPershare = false;
          result.netAssetPershare_ = 0D;
          return this;
        }
        
        public bool HasEyRate {
          get { return result.hasEyRate; }
        }
        public double EyRate {
          get { return result.EyRate; }
          set { SetEyRate(value); }
        }
        public Builder SetEyRate(double value) {
          PrepareBuilder();
          result.hasEyRate = true;
          result.eyRate_ = value;
          return this;
        }
        public Builder ClearEyRate() {
          PrepareBuilder();
          result.hasEyRate = false;
          result.eyRate_ = 0D;
          return this;
        }
        
        public bool HasPeRate {
          get { return result.hasPeRate; }
        }
        public double PeRate {
          get { return result.PeRate; }
          set { SetPeRate(value); }
        }
        public Builder SetPeRate(double value) {
          PrepareBuilder();
          result.hasPeRate = true;
          result.peRate_ = value;
          return this;
        }
        public Builder ClearPeRate() {
          PrepareBuilder();
          result.hasPeRate = false;
          result.peRate_ = 0D;
          return this;
        }
        
        public bool HasPbRate {
          get { return result.hasPbRate; }
        }
        public double PbRate {
          get { return result.PbRate; }
          set { SetPbRate(value); }
        }
        public Builder SetPbRate(double value) {
          PrepareBuilder();
          result.hasPbRate = true;
          result.pbRate_ = value;
          return this;
        }
        public Builder ClearPbRate() {
          PrepareBuilder();
          result.hasPbRate = false;
          result.pbRate_ = 0D;
          return this;
        }
        
        public bool HasPeTTMRate {
          get { return result.hasPeTTMRate; }
        }
        public double PeTTMRate {
          get { return result.PeTTMRate; }
          set { SetPeTTMRate(value); }
        }
        public Builder SetPeTTMRate(double value) {
          PrepareBuilder();
          result.hasPeTTMRate = true;
          result.peTTMRate_ = value;
          return this;
        }
        public Builder ClearPeTTMRate() {
          PrepareBuilder();
          result.hasPeTTMRate = false;
          result.peTTMRate_ = 0D;
          return this;
        }
        
        public bool HasDividendTTM {
          get { return result.hasDividendTTM; }
        }
        public double DividendTTM {
          get { return result.DividendTTM; }
          set { SetDividendTTM(value); }
        }
        public Builder SetDividendTTM(double value) {
          PrepareBuilder();
          result.hasDividendTTM = true;
          result.dividendTTM_ = value;
          return this;
        }
        public Builder ClearDividendTTM() {
          PrepareBuilder();
          result.hasDividendTTM = false;
          result.dividendTTM_ = 0D;
          return this;
        }
        
        public bool HasDividendRatioTTM {
          get { return result.hasDividendRatioTTM; }
        }
        public double DividendRatioTTM {
          get { return result.DividendRatioTTM; }
          set { SetDividendRatioTTM(value); }
        }
        public Builder SetDividendRatioTTM(double value) {
          PrepareBuilder();
          result.hasDividendRatioTTM = true;
          result.dividendRatioTTM_ = value;
          return this;
        }
        public Builder ClearDividendRatioTTM() {
          PrepareBuilder();
          result.hasDividendRatioTTM = false;
          result.dividendRatioTTM_ = 0D;
          return this;
        }
        
        public bool HasDividendLFY {
          get { return result.hasDividendLFY; }
        }
        public double DividendLFY {
          get { return result.DividendLFY; }
          set { SetDividendLFY(value); }
        }
        public Builder SetDividendLFY(double value) {
          PrepareBuilder();
          result.hasDividendLFY = true;
          result.dividendLFY_ = value;
          return this;
        }
        public Builder ClearDividendLFY() {
          PrepareBuilder();
          result.hasDividendLFY = false;
          result.dividendLFY_ = 0D;
          return this;
        }
        
        public bool HasDividendLFYRatio {
          get { return result.hasDividendLFYRatio; }
        }
        public double DividendLFYRatio {
          get { return result.DividendLFYRatio; }
          set { SetDividendLFYRatio(value); }
        }
        public Builder SetDividendLFYRatio(double value) {
          PrepareBuilder();
          result.hasDividendLFYRatio = true;
          result.dividendLFYRatio_ = value;
          return this;
        }
        public Builder ClearDividendLFYRatio() {
          PrepareBuilder();
          result.hasDividendLFYRatio = false;
          result.dividendLFYRatio_ = 0D;
          return this;
        }
      }
      static EquitySnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class WarrantSnapshotExData : pb::GeneratedMessage<WarrantSnapshotExData, WarrantSnapshotExData.Builder> {
      private WarrantSnapshotExData() { }
      private static readonly WarrantSnapshotExData defaultInstance = new WarrantSnapshotExData().MakeReadOnly();
      private static readonly string[] _warrantSnapshotExDataFieldNames = new string[] { "breakEvenPoint", "conversionPrice", "conversionRate", "delta", "endTradeTime", "endTradeTimestamp", "impliedVolatility", "inLinePriceStatus", "ipop", "issueVolumn", "issuerCode", "leverage", "lowerStrikePrice", "maturityTime", "maturityTimestamp", "owner", "premium", "priceRecoveryRatio", "recoveryPrice", "score", "streetRate", "streetVolumn", "strikePrice", "upperStrikePrice", "warrantType" };
      private static readonly uint[] _warrantSnapshotExDataFieldTags = new uint[] { 145, 153, 9, 89, 42, 121, 97, 192, 137, 72, 202, 129, 185, 34, 113, 50, 105, 161, 57, 169, 81, 64, 25, 177, 16 };
      public static WarrantSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override WarrantSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override WarrantSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<WarrantSnapshotExData, WarrantSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_WarrantSnapshotExData__FieldAccessorTable; }
      }
      
      public const int ConversionRateFieldNumber = 1;
      private bool hasConversionRate;
      private double conversionRate_;
      public bool HasConversionRate {
        get { return hasConversionRate; }
      }
      public double ConversionRate {
        get { return conversionRate_; }
      }
      
      public const int WarrantTypeFieldNumber = 2;
      private bool hasWarrantType;
      private int warrantType_;
      public bool HasWarrantType {
        get { return hasWarrantType; }
      }
      public int WarrantType {
        get { return warrantType_; }
      }
      
      public const int StrikePriceFieldNumber = 3;
      private bool hasStrikePrice;
      private double strikePrice_;
      public bool HasStrikePrice {
        get { return hasStrikePrice; }
      }
      public double StrikePrice {
        get { return strikePrice_; }
      }
      
      public const int MaturityTimeFieldNumber = 4;
      private bool hasMaturityTime;
      private string maturityTime_ = "";
      public bool HasMaturityTime {
        get { return hasMaturityTime; }
      }
      public string MaturityTime {
        get { return maturityTime_; }
      }
      
      public const int EndTradeTimeFieldNumber = 5;
      private bool hasEndTradeTime;
      private string endTradeTime_ = "";
      public bool HasEndTradeTime {
        get { return hasEndTradeTime; }
      }
      public string EndTradeTime {
        get { return endTradeTime_; }
      }
      
      public const int OwnerFieldNumber = 6;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int RecoveryPriceFieldNumber = 7;
      private bool hasRecoveryPrice;
      private double recoveryPrice_;
      public bool HasRecoveryPrice {
        get { return hasRecoveryPrice; }
      }
      public double RecoveryPrice {
        get { return recoveryPrice_; }
      }
      
      public const int StreetVolumnFieldNumber = 8;
      private bool hasStreetVolumn;
      private long streetVolumn_;
      public bool HasStreetVolumn {
        get { return hasStreetVolumn; }
      }
      public long StreetVolumn {
        get { return streetVolumn_; }
      }
      
      public const int IssueVolumnFieldNumber = 9;
      private bool hasIssueVolumn;
      private long issueVolumn_;
      public bool HasIssueVolumn {
        get { return hasIssueVolumn; }
      }
      public long IssueVolumn {
        get { return issueVolumn_; }
      }
      
      public const int StreetRateFieldNumber = 10;
      private bool hasStreetRate;
      private double streetRate_;
      public bool HasStreetRate {
        get { return hasStreetRate; }
      }
      public double StreetRate {
        get { return streetRate_; }
      }
      
      public const int DeltaFieldNumber = 11;
      private bool hasDelta;
      private double delta_;
      public bool HasDelta {
        get { return hasDelta; }
      }
      public double Delta {
        get { return delta_; }
      }
      
      public const int ImpliedVolatilityFieldNumber = 12;
      private bool hasImpliedVolatility;
      private double impliedVolatility_;
      public bool HasImpliedVolatility {
        get { return hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return impliedVolatility_; }
      }
      
      public const int PremiumFieldNumber = 13;
      private bool hasPremium;
      private double premium_;
      public bool HasPremium {
        get { return hasPremium; }
      }
      public double Premium {
        get { return premium_; }
      }
      
      public const int MaturityTimestampFieldNumber = 14;
      private bool hasMaturityTimestamp;
      private double maturityTimestamp_;
      public bool HasMaturityTimestamp {
        get { return hasMaturityTimestamp; }
      }
      public double MaturityTimestamp {
        get { return maturityTimestamp_; }
      }
      
      public const int EndTradeTimestampFieldNumber = 15;
      private bool hasEndTradeTimestamp;
      private double endTradeTimestamp_;
      public bool HasEndTradeTimestamp {
        get { return hasEndTradeTimestamp; }
      }
      public double EndTradeTimestamp {
        get { return endTradeTimestamp_; }
      }
      
      public const int LeverageFieldNumber = 16;
      private bool hasLeverage;
      private double leverage_;
      public bool HasLeverage {
        get { return hasLeverage; }
      }
      public double Leverage {
        get { return leverage_; }
      }
      
      public const int IpopFieldNumber = 17;
      private bool hasIpop;
      private double ipop_;
      public bool HasIpop {
        get { return hasIpop; }
      }
      public double Ipop {
        get { return ipop_; }
      }
      
      public const int BreakEvenPointFieldNumber = 18;
      private bool hasBreakEvenPoint;
      private double breakEvenPoint_;
      public bool HasBreakEvenPoint {
        get { return hasBreakEvenPoint; }
      }
      public double BreakEvenPoint {
        get { return breakEvenPoint_; }
      }
      
      public const int ConversionPriceFieldNumber = 19;
      private bool hasConversionPrice;
      private double conversionPrice_;
      public bool HasConversionPrice {
        get { return hasConversionPrice; }
      }
      public double ConversionPrice {
        get { return conversionPrice_; }
      }
      
      public const int PriceRecoveryRatioFieldNumber = 20;
      private bool hasPriceRecoveryRatio;
      private double priceRecoveryRatio_;
      public bool HasPriceRecoveryRatio {
        get { return hasPriceRecoveryRatio; }
      }
      public double PriceRecoveryRatio {
        get { return priceRecoveryRatio_; }
      }
      
      public const int ScoreFieldNumber = 21;
      private bool hasScore;
      private double score_;
      public bool HasScore {
        get { return hasScore; }
      }
      public double Score {
        get { return score_; }
      }
      
      public const int UpperStrikePriceFieldNumber = 22;
      private bool hasUpperStrikePrice;
      private double upperStrikePrice_;
      public bool HasUpperStrikePrice {
        get { return hasUpperStrikePrice; }
      }
      public double UpperStrikePrice {
        get { return upperStrikePrice_; }
      }
      
      public const int LowerStrikePriceFieldNumber = 23;
      private bool hasLowerStrikePrice;
      private double lowerStrikePrice_;
      public bool HasLowerStrikePrice {
        get { return hasLowerStrikePrice; }
      }
      public double LowerStrikePrice {
        get { return lowerStrikePrice_; }
      }
      
      public const int InLinePriceStatusFieldNumber = 24;
      private bool hasInLinePriceStatus;
      private int inLinePriceStatus_;
      public bool HasInLinePriceStatus {
        get { return hasInLinePriceStatus; }
      }
      public int InLinePriceStatus {
        get { return inLinePriceStatus_; }
      }
      
      public const int IssuerCodeFieldNumber = 25;
      private bool hasIssuerCode;
      private string issuerCode_ = "";
      public bool HasIssuerCode {
        get { return hasIssuerCode; }
      }
      public string IssuerCode {
        get { return issuerCode_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasConversionRate) return false;
          if (!hasWarrantType) return false;
          if (!hasStrikePrice) return false;
          if (!hasMaturityTime) return false;
          if (!hasEndTradeTime) return false;
          if (!hasOwner) return false;
          if (!hasRecoveryPrice) return false;
          if (!hasStreetVolumn) return false;
          if (!hasIssueVolumn) return false;
          if (!hasStreetRate) return false;
          if (!hasDelta) return false;
          if (!hasImpliedVolatility) return false;
          if (!hasPremium) return false;
          if (!Owner.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _warrantSnapshotExDataFieldNames;
        if (hasConversionRate) {
          output.WriteDouble(1, field_names[2], ConversionRate);
        }
        if (hasWarrantType) {
          output.WriteInt32(2, field_names[24], WarrantType);
        }
        if (hasStrikePrice) {
          output.WriteDouble(3, field_names[22], StrikePrice);
        }
        if (hasMaturityTime) {
          output.WriteString(4, field_names[13], MaturityTime);
        }
        if (hasEndTradeTime) {
          output.WriteString(5, field_names[4], EndTradeTime);
        }
        if (hasOwner) {
          output.WriteMessage(6, field_names[15], Owner);
        }
        if (hasRecoveryPrice) {
          output.WriteDouble(7, field_names[18], RecoveryPrice);
        }
        if (hasStreetVolumn) {
          output.WriteInt64(8, field_names[21], StreetVolumn);
        }
        if (hasIssueVolumn) {
          output.WriteInt64(9, field_names[9], IssueVolumn);
        }
        if (hasStreetRate) {
          output.WriteDouble(10, field_names[20], StreetRate);
        }
        if (hasDelta) {
          output.WriteDouble(11, field_names[3], Delta);
        }
        if (hasImpliedVolatility) {
          output.WriteDouble(12, field_names[6], ImpliedVolatility);
        }
        if (hasPremium) {
          output.WriteDouble(13, field_names[16], Premium);
        }
        if (hasMaturityTimestamp) {
          output.WriteDouble(14, field_names[14], MaturityTimestamp);
        }
        if (hasEndTradeTimestamp) {
          output.WriteDouble(15, field_names[5], EndTradeTimestamp);
        }
        if (hasLeverage) {
          output.WriteDouble(16, field_names[11], Leverage);
        }
        if (hasIpop) {
          output.WriteDouble(17, field_names[8], Ipop);
        }
        if (hasBreakEvenPoint) {
          output.WriteDouble(18, field_names[0], BreakEvenPoint);
        }
        if (hasConversionPrice) {
          output.WriteDouble(19, field_names[1], ConversionPrice);
        }
        if (hasPriceRecoveryRatio) {
          output.WriteDouble(20, field_names[17], PriceRecoveryRatio);
        }
        if (hasScore) {
          output.WriteDouble(21, field_names[19], Score);
        }
        if (hasUpperStrikePrice) {
          output.WriteDouble(22, field_names[23], UpperStrikePrice);
        }
        if (hasLowerStrikePrice) {
          output.WriteDouble(23, field_names[12], LowerStrikePrice);
        }
        if (hasInLinePriceStatus) {
          output.WriteInt32(24, field_names[7], InLinePriceStatus);
        }
        if (hasIssuerCode) {
          output.WriteString(25, field_names[10], IssuerCode);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasConversionRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, ConversionRate);
        }
        if (hasWarrantType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, WarrantType);
        }
        if (hasStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, StrikePrice);
        }
        if (hasMaturityTime) {
          size += pb::CodedOutputStream.ComputeStringSize(4, MaturityTime);
        }
        if (hasEndTradeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(5, EndTradeTime);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Owner);
        }
        if (hasRecoveryPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, RecoveryPrice);
        }
        if (hasStreetVolumn) {
          size += pb::CodedOutputStream.ComputeInt64Size(8, StreetVolumn);
        }
        if (hasIssueVolumn) {
          size += pb::CodedOutputStream.ComputeInt64Size(9, IssueVolumn);
        }
        if (hasStreetRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, StreetRate);
        }
        if (hasDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Delta);
        }
        if (hasImpliedVolatility) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, ImpliedVolatility);
        }
        if (hasPremium) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Premium);
        }
        if (hasMaturityTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, MaturityTimestamp);
        }
        if (hasEndTradeTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, EndTradeTimestamp);
        }
        if (hasLeverage) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, Leverage);
        }
        if (hasIpop) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, Ipop);
        }
        if (hasBreakEvenPoint) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, BreakEvenPoint);
        }
        if (hasConversionPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, ConversionPrice);
        }
        if (hasPriceRecoveryRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, PriceRecoveryRatio);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, Score);
        }
        if (hasUpperStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, UpperStrikePrice);
        }
        if (hasLowerStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, LowerStrikePrice);
        }
        if (hasInLinePriceStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, InLinePriceStatus);
        }
        if (hasIssuerCode) {
          size += pb::CodedOutputStream.ComputeStringSize(25, IssuerCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static WarrantSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static WarrantSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private WarrantSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(WarrantSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<WarrantSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(WarrantSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private WarrantSnapshotExData result;
        
        private WarrantSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            WarrantSnapshotExData original = result;
            result = new WarrantSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override WarrantSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.Descriptor; }
        }
        
        public override WarrantSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance; }
        }
        
        public override WarrantSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is WarrantSnapshotExData) {
            return MergeFrom((WarrantSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(WarrantSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasConversionRate) {
            ConversionRate = other.ConversionRate;
          }
          if (other.HasWarrantType) {
            WarrantType = other.WarrantType;
          }
          if (other.HasStrikePrice) {
            StrikePrice = other.StrikePrice;
          }
          if (other.HasMaturityTime) {
            MaturityTime = other.MaturityTime;
          }
          if (other.HasEndTradeTime) {
            EndTradeTime = other.EndTradeTime;
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          if (other.HasRecoveryPrice) {
            RecoveryPrice = other.RecoveryPrice;
          }
          if (other.HasStreetVolumn) {
            StreetVolumn = other.StreetVolumn;
          }
          if (other.HasIssueVolumn) {
            IssueVolumn = other.IssueVolumn;
          }
          if (other.HasStreetRate) {
            StreetRate = other.StreetRate;
          }
          if (other.HasDelta) {
            Delta = other.Delta;
          }
          if (other.HasImpliedVolatility) {
            ImpliedVolatility = other.ImpliedVolatility;
          }
          if (other.HasPremium) {
            Premium = other.Premium;
          }
          if (other.HasMaturityTimestamp) {
            MaturityTimestamp = other.MaturityTimestamp;
          }
          if (other.HasEndTradeTimestamp) {
            EndTradeTimestamp = other.EndTradeTimestamp;
          }
          if (other.HasLeverage) {
            Leverage = other.Leverage;
          }
          if (other.HasIpop) {
            Ipop = other.Ipop;
          }
          if (other.HasBreakEvenPoint) {
            BreakEvenPoint = other.BreakEvenPoint;
          }
          if (other.HasConversionPrice) {
            ConversionPrice = other.ConversionPrice;
          }
          if (other.HasPriceRecoveryRatio) {
            PriceRecoveryRatio = other.PriceRecoveryRatio;
          }
          if (other.HasScore) {
            Score = other.Score;
          }
          if (other.HasUpperStrikePrice) {
            UpperStrikePrice = other.UpperStrikePrice;
          }
          if (other.HasLowerStrikePrice) {
            LowerStrikePrice = other.LowerStrikePrice;
          }
          if (other.HasInLinePriceStatus) {
            InLinePriceStatus = other.InLinePriceStatus;
          }
          if (other.HasIssuerCode) {
            IssuerCode = other.IssuerCode;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_warrantSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _warrantSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasConversionRate = input.ReadDouble(ref result.conversionRate_);
                break;
              }
              case 16: {
                result.hasWarrantType = input.ReadInt32(ref result.warrantType_);
                break;
              }
              case 25: {
                result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
                break;
              }
              case 34: {
                result.hasMaturityTime = input.ReadString(ref result.maturityTime_);
                break;
              }
              case 42: {
                result.hasEndTradeTime = input.ReadString(ref result.endTradeTime_);
                break;
              }
              case 50: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
              case 57: {
                result.hasRecoveryPrice = input.ReadDouble(ref result.recoveryPrice_);
                break;
              }
              case 64: {
                result.hasStreetVolumn = input.ReadInt64(ref result.streetVolumn_);
                break;
              }
              case 72: {
                result.hasIssueVolumn = input.ReadInt64(ref result.issueVolumn_);
                break;
              }
              case 81: {
                result.hasStreetRate = input.ReadDouble(ref result.streetRate_);
                break;
              }
              case 89: {
                result.hasDelta = input.ReadDouble(ref result.delta_);
                break;
              }
              case 97: {
                result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
                break;
              }
              case 105: {
                result.hasPremium = input.ReadDouble(ref result.premium_);
                break;
              }
              case 113: {
                result.hasMaturityTimestamp = input.ReadDouble(ref result.maturityTimestamp_);
                break;
              }
              case 121: {
                result.hasEndTradeTimestamp = input.ReadDouble(ref result.endTradeTimestamp_);
                break;
              }
              case 129: {
                result.hasLeverage = input.ReadDouble(ref result.leverage_);
                break;
              }
              case 137: {
                result.hasIpop = input.ReadDouble(ref result.ipop_);
                break;
              }
              case 145: {
                result.hasBreakEvenPoint = input.ReadDouble(ref result.breakEvenPoint_);
                break;
              }
              case 153: {
                result.hasConversionPrice = input.ReadDouble(ref result.conversionPrice_);
                break;
              }
              case 161: {
                result.hasPriceRecoveryRatio = input.ReadDouble(ref result.priceRecoveryRatio_);
                break;
              }
              case 169: {
                result.hasScore = input.ReadDouble(ref result.score_);
                break;
              }
              case 177: {
                result.hasUpperStrikePrice = input.ReadDouble(ref result.upperStrikePrice_);
                break;
              }
              case 185: {
                result.hasLowerStrikePrice = input.ReadDouble(ref result.lowerStrikePrice_);
                break;
              }
              case 192: {
                result.hasInLinePriceStatus = input.ReadInt32(ref result.inLinePriceStatus_);
                break;
              }
              case 202: {
                result.hasIssuerCode = input.ReadString(ref result.issuerCode_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasConversionRate {
          get { return result.hasConversionRate; }
        }
        public double ConversionRate {
          get { return result.ConversionRate; }
          set { SetConversionRate(value); }
        }
        public Builder SetConversionRate(double value) {
          PrepareBuilder();
          result.hasConversionRate = true;
          result.conversionRate_ = value;
          return this;
        }
        public Builder ClearConversionRate() {
          PrepareBuilder();
          result.hasConversionRate = false;
          result.conversionRate_ = 0D;
          return this;
        }
        
        public bool HasWarrantType {
          get { return result.hasWarrantType; }
        }
        public int WarrantType {
          get { return result.WarrantType; }
          set { SetWarrantType(value); }
        }
        public Builder SetWarrantType(int value) {
          PrepareBuilder();
          result.hasWarrantType = true;
          result.warrantType_ = value;
          return this;
        }
        public Builder ClearWarrantType() {
          PrepareBuilder();
          result.hasWarrantType = false;
          result.warrantType_ = 0;
          return this;
        }
        
        public bool HasStrikePrice {
          get { return result.hasStrikePrice; }
        }
        public double StrikePrice {
          get { return result.StrikePrice; }
          set { SetStrikePrice(value); }
        }
        public Builder SetStrikePrice(double value) {
          PrepareBuilder();
          result.hasStrikePrice = true;
          result.strikePrice_ = value;
          return this;
        }
        public Builder ClearStrikePrice() {
          PrepareBuilder();
          result.hasStrikePrice = false;
          result.strikePrice_ = 0D;
          return this;
        }
        
        public bool HasMaturityTime {
          get { return result.hasMaturityTime; }
        }
        public string MaturityTime {
          get { return result.MaturityTime; }
          set { SetMaturityTime(value); }
        }
        public Builder SetMaturityTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMaturityTime = true;
          result.maturityTime_ = value;
          return this;
        }
        public Builder ClearMaturityTime() {
          PrepareBuilder();
          result.hasMaturityTime = false;
          result.maturityTime_ = "";
          return this;
        }
        
        public bool HasEndTradeTime {
          get { return result.hasEndTradeTime; }
        }
        public string EndTradeTime {
          get { return result.EndTradeTime; }
          set { SetEndTradeTime(value); }
        }
        public Builder SetEndTradeTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasEndTradeTime = true;
          result.endTradeTime_ = value;
          return this;
        }
        public Builder ClearEndTradeTime() {
          PrepareBuilder();
          result.hasEndTradeTime = false;
          result.endTradeTime_ = "";
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
        
        public bool HasRecoveryPrice {
          get { return result.hasRecoveryPrice; }
        }
        public double RecoveryPrice {
          get { return result.RecoveryPrice; }
          set { SetRecoveryPrice(value); }
        }
        public Builder SetRecoveryPrice(double value) {
          PrepareBuilder();
          result.hasRecoveryPrice = true;
          result.recoveryPrice_ = value;
          return this;
        }
        public Builder ClearRecoveryPrice() {
          PrepareBuilder();
          result.hasRecoveryPrice = false;
          result.recoveryPrice_ = 0D;
          return this;
        }
        
        public bool HasStreetVolumn {
          get { return result.hasStreetVolumn; }
        }
        public long StreetVolumn {
          get { return result.StreetVolumn; }
          set { SetStreetVolumn(value); }
        }
        public Builder SetStreetVolumn(long value) {
          PrepareBuilder();
          result.hasStreetVolumn = true;
          result.streetVolumn_ = value;
          return this;
        }
        public Builder ClearStreetVolumn() {
          PrepareBuilder();
          result.hasStreetVolumn = false;
          result.streetVolumn_ = 0L;
          return this;
        }
        
        public bool HasIssueVolumn {
          get { return result.hasIssueVolumn; }
        }
        public long IssueVolumn {
          get { return result.IssueVolumn; }
          set { SetIssueVolumn(value); }
        }
        public Builder SetIssueVolumn(long value) {
          PrepareBuilder();
          result.hasIssueVolumn = true;
          result.issueVolumn_ = value;
          return this;
        }
        public Builder ClearIssueVolumn() {
          PrepareBuilder();
          result.hasIssueVolumn = false;
          result.issueVolumn_ = 0L;
          return this;
        }
        
        public bool HasStreetRate {
          get { return result.hasStreetRate; }
        }
        public double StreetRate {
          get { return result.StreetRate; }
          set { SetStreetRate(value); }
        }
        public Builder SetStreetRate(double value) {
          PrepareBuilder();
          result.hasStreetRate = true;
          result.streetRate_ = value;
          return this;
        }
        public Builder ClearStreetRate() {
          PrepareBuilder();
          result.hasStreetRate = false;
          result.streetRate_ = 0D;
          return this;
        }
        
        public bool HasDelta {
          get { return result.hasDelta; }
        }
        public double Delta {
          get { return result.Delta; }
          set { SetDelta(value); }
        }
        public Builder SetDelta(double value) {
          PrepareBuilder();
          result.hasDelta = true;
          result.delta_ = value;
          return this;
        }
        public Builder ClearDelta() {
          PrepareBuilder();
          result.hasDelta = false;
          result.delta_ = 0D;
          return this;
        }
        
        public bool HasImpliedVolatility {
          get { return result.hasImpliedVolatility; }
        }
        public double ImpliedVolatility {
          get { return result.ImpliedVolatility; }
          set { SetImpliedVolatility(value); }
        }
        public Builder SetImpliedVolatility(double value) {
          PrepareBuilder();
          result.hasImpliedVolatility = true;
          result.impliedVolatility_ = value;
          return this;
        }
        public Builder ClearImpliedVolatility() {
          PrepareBuilder();
          result.hasImpliedVolatility = false;
          result.impliedVolatility_ = 0D;
          return this;
        }
        
        public bool HasPremium {
          get { return result.hasPremium; }
        }
        public double Premium {
          get { return result.Premium; }
          set { SetPremium(value); }
        }
        public Builder SetPremium(double value) {
          PrepareBuilder();
          result.hasPremium = true;
          result.premium_ = value;
          return this;
        }
        public Builder ClearPremium() {
          PrepareBuilder();
          result.hasPremium = false;
          result.premium_ = 0D;
          return this;
        }
        
        public bool HasMaturityTimestamp {
          get { return result.hasMaturityTimestamp; }
        }
        public double MaturityTimestamp {
          get { return result.MaturityTimestamp; }
          set { SetMaturityTimestamp(value); }
        }
        public Builder SetMaturityTimestamp(double value) {
          PrepareBuilder();
          result.hasMaturityTimestamp = true;
          result.maturityTimestamp_ = value;
          return this;
        }
        public Builder ClearMaturityTimestamp() {
          PrepareBuilder();
          result.hasMaturityTimestamp = false;
          result.maturityTimestamp_ = 0D;
          return this;
        }
        
        public bool HasEndTradeTimestamp {
          get { return result.hasEndTradeTimestamp; }
        }
        public double EndTradeTimestamp {
          get { return result.EndTradeTimestamp; }
          set { SetEndTradeTimestamp(value); }
        }
        public Builder SetEndTradeTimestamp(double value) {
          PrepareBuilder();
          result.hasEndTradeTimestamp = true;
          result.endTradeTimestamp_ = value;
          return this;
        }
        public Builder ClearEndTradeTimestamp() {
          PrepareBuilder();
          result.hasEndTradeTimestamp = false;
          result.endTradeTimestamp_ = 0D;
          return this;
        }
        
        public bool HasLeverage {
          get { return result.hasLeverage; }
        }
        public double Leverage {
          get { return result.Leverage; }
          set { SetLeverage(value); }
        }
        public Builder SetLeverage(double value) {
          PrepareBuilder();
          result.hasLeverage = true;
          result.leverage_ = value;
          return this;
        }
        public Builder ClearLeverage() {
          PrepareBuilder();
          result.hasLeverage = false;
          result.leverage_ = 0D;
          return this;
        }
        
        public bool HasIpop {
          get { return result.hasIpop; }
        }
        public double Ipop {
          get { return result.Ipop; }
          set { SetIpop(value); }
        }
        public Builder SetIpop(double value) {
          PrepareBuilder();
          result.hasIpop = true;
          result.ipop_ = value;
          return this;
        }
        public Builder ClearIpop() {
          PrepareBuilder();
          result.hasIpop = false;
          result.ipop_ = 0D;
          return this;
        }
        
        public bool HasBreakEvenPoint {
          get { return result.hasBreakEvenPoint; }
        }
        public double BreakEvenPoint {
          get { return result.BreakEvenPoint; }
          set { SetBreakEvenPoint(value); }
        }
        public Builder SetBreakEvenPoint(double value) {
          PrepareBuilder();
          result.hasBreakEvenPoint = true;
          result.breakEvenPoint_ = value;
          return this;
        }
        public Builder ClearBreakEvenPoint() {
          PrepareBuilder();
          result.hasBreakEvenPoint = false;
          result.breakEvenPoint_ = 0D;
          return this;
        }
        
        public bool HasConversionPrice {
          get { return result.hasConversionPrice; }
        }
        public double ConversionPrice {
          get { return result.ConversionPrice; }
          set { SetConversionPrice(value); }
        }
        public Builder SetConversionPrice(double value) {
          PrepareBuilder();
          result.hasConversionPrice = true;
          result.conversionPrice_ = value;
          return this;
        }
        public Builder ClearConversionPrice() {
          PrepareBuilder();
          result.hasConversionPrice = false;
          result.conversionPrice_ = 0D;
          return this;
        }
        
        public bool HasPriceRecoveryRatio {
          get { return result.hasPriceRecoveryRatio; }
        }
        public double PriceRecoveryRatio {
          get { return result.PriceRecoveryRatio; }
          set { SetPriceRecoveryRatio(value); }
        }
        public Builder SetPriceRecoveryRatio(double value) {
          PrepareBuilder();
          result.hasPriceRecoveryRatio = true;
          result.priceRecoveryRatio_ = value;
          return this;
        }
        public Builder ClearPriceRecoveryRatio() {
          PrepareBuilder();
          result.hasPriceRecoveryRatio = false;
          result.priceRecoveryRatio_ = 0D;
          return this;
        }
        
        public bool HasScore {
          get { return result.hasScore; }
        }
        public double Score {
          get { return result.Score; }
          set { SetScore(value); }
        }
        public Builder SetScore(double value) {
          PrepareBuilder();
          result.hasScore = true;
          result.score_ = value;
          return this;
        }
        public Builder ClearScore() {
          PrepareBuilder();
          result.hasScore = false;
          result.score_ = 0D;
          return this;
        }
        
        public bool HasUpperStrikePrice {
          get { return result.hasUpperStrikePrice; }
        }
        public double UpperStrikePrice {
          get { return result.UpperStrikePrice; }
          set { SetUpperStrikePrice(value); }
        }
        public Builder SetUpperStrikePrice(double value) {
          PrepareBuilder();
          result.hasUpperStrikePrice = true;
          result.upperStrikePrice_ = value;
          return this;
        }
        public Builder ClearUpperStrikePrice() {
          PrepareBuilder();
          result.hasUpperStrikePrice = false;
          result.upperStrikePrice_ = 0D;
          return this;
        }
        
        public bool HasLowerStrikePrice {
          get { return result.hasLowerStrikePrice; }
        }
        public double LowerStrikePrice {
          get { return result.LowerStrikePrice; }
          set { SetLowerStrikePrice(value); }
        }
        public Builder SetLowerStrikePrice(double value) {
          PrepareBuilder();
          result.hasLowerStrikePrice = true;
          result.lowerStrikePrice_ = value;
          return this;
        }
        public Builder ClearLowerStrikePrice() {
          PrepareBuilder();
          result.hasLowerStrikePrice = false;
          result.lowerStrikePrice_ = 0D;
          return this;
        }
        
        public bool HasInLinePriceStatus {
          get { return result.hasInLinePriceStatus; }
        }
        public int InLinePriceStatus {
          get { return result.InLinePriceStatus; }
          set { SetInLinePriceStatus(value); }
        }
        public Builder SetInLinePriceStatus(int value) {
          PrepareBuilder();
          result.hasInLinePriceStatus = true;
          result.inLinePriceStatus_ = value;
          return this;
        }
        public Builder ClearInLinePriceStatus() {
          PrepareBuilder();
          result.hasInLinePriceStatus = false;
          result.inLinePriceStatus_ = 0;
          return this;
        }
        
        public bool HasIssuerCode {
          get { return result.hasIssuerCode; }
        }
        public string IssuerCode {
          get { return result.IssuerCode; }
          set { SetIssuerCode(value); }
        }
        public Builder SetIssuerCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasIssuerCode = true;
          result.issuerCode_ = value;
          return this;
        }
        public Builder ClearIssuerCode() {
          PrepareBuilder();
          result.hasIssuerCode = false;
          result.issuerCode_ = "";
          return this;
        }
      }
      static WarrantSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OptionSnapshotExData : pb::GeneratedMessage<OptionSnapshotExData, OptionSnapshotExData.Builder> {
      private OptionSnapshotExData() { }
      private static readonly OptionSnapshotExData defaultInstance = new OptionSnapshotExData().MakeReadOnly();
      private static readonly string[] _optionSnapshotExDataFieldNames = new string[] { "contractMultiplier", "contractNominalValue", "contractSize", "contractSizeFloat", "delta", "expiryDateDistance", "gamma", "impliedVolatility", "indexOptionType", "netOpenInterest", "openInterest", "optionAreaType", "owner", "ownerLotMultiplier", "premium", "rho", "strikePrice", "strikeTime", "strikeTimestamp", "theta", "type", "vega" };
      private static readonly uint[] _optionSnapshotExDataFieldTags = new uint[] { 169, 145, 40, 177, 73, 136, 81, 57, 120, 128, 48, 160, 18, 153, 65, 105, 33, 26, 113, 97, 8, 89 };
      public static OptionSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OptionSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OptionSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OptionSnapshotExData, OptionSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_OptionSnapshotExData__FieldAccessorTable; }
      }
      
      public const int TypeFieldNumber = 1;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int OwnerFieldNumber = 2;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int StrikeTimeFieldNumber = 3;
      private bool hasStrikeTime;
      private string strikeTime_ = "";
      public bool HasStrikeTime {
        get { return hasStrikeTime; }
      }
      public string StrikeTime {
        get { return strikeTime_; }
      }
      
      public const int StrikePriceFieldNumber = 4;
      private bool hasStrikePrice;
      private double strikePrice_;
      public bool HasStrikePrice {
        get { return hasStrikePrice; }
      }
      public double StrikePrice {
        get { return strikePrice_; }
      }
      
      public const int ContractSizeFieldNumber = 5;
      private bool hasContractSize;
      private int contractSize_;
      public bool HasContractSize {
        get { return hasContractSize; }
      }
      public int ContractSize {
        get { return contractSize_; }
      }
      
      public const int ContractSizeFloatFieldNumber = 22;
      private bool hasContractSizeFloat;
      private double contractSizeFloat_;
      public bool HasContractSizeFloat {
        get { return hasContractSizeFloat; }
      }
      public double ContractSizeFloat {
        get { return contractSizeFloat_; }
      }
      
      public const int OpenInterestFieldNumber = 6;
      private bool hasOpenInterest;
      private int openInterest_;
      public bool HasOpenInterest {
        get { return hasOpenInterest; }
      }
      public int OpenInterest {
        get { return openInterest_; }
      }
      
      public const int ImpliedVolatilityFieldNumber = 7;
      private bool hasImpliedVolatility;
      private double impliedVolatility_;
      public bool HasImpliedVolatility {
        get { return hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return impliedVolatility_; }
      }
      
      public const int PremiumFieldNumber = 8;
      private bool hasPremium;
      private double premium_;
      public bool HasPremium {
        get { return hasPremium; }
      }
      public double Premium {
        get { return premium_; }
      }
      
      public const int DeltaFieldNumber = 9;
      private bool hasDelta;
      private double delta_;
      public bool HasDelta {
        get { return hasDelta; }
      }
      public double Delta {
        get { return delta_; }
      }
      
      public const int GammaFieldNumber = 10;
      private bool hasGamma;
      private double gamma_;
      public bool HasGamma {
        get { return hasGamma; }
      }
      public double Gamma {
        get { return gamma_; }
      }
      
      public const int VegaFieldNumber = 11;
      private bool hasVega;
      private double vega_;
      public bool HasVega {
        get { return hasVega; }
      }
      public double Vega {
        get { return vega_; }
      }
      
      public const int ThetaFieldNumber = 12;
      private bool hasTheta;
      private double theta_;
      public bool HasTheta {
        get { return hasTheta; }
      }
      public double Theta {
        get { return theta_; }
      }
      
      public const int RhoFieldNumber = 13;
      private bool hasRho;
      private double rho_;
      public bool HasRho {
        get { return hasRho; }
      }
      public double Rho {
        get { return rho_; }
      }
      
      public const int StrikeTimestampFieldNumber = 14;
      private bool hasStrikeTimestamp;
      private double strikeTimestamp_;
      public bool HasStrikeTimestamp {
        get { return hasStrikeTimestamp; }
      }
      public double StrikeTimestamp {
        get { return strikeTimestamp_; }
      }
      
      public const int IndexOptionTypeFieldNumber = 15;
      private bool hasIndexOptionType;
      private int indexOptionType_;
      public bool HasIndexOptionType {
        get { return hasIndexOptionType; }
      }
      public int IndexOptionType {
        get { return indexOptionType_; }
      }
      
      public const int NetOpenInterestFieldNumber = 16;
      private bool hasNetOpenInterest;
      private int netOpenInterest_;
      public bool HasNetOpenInterest {
        get { return hasNetOpenInterest; }
      }
      public int NetOpenInterest {
        get { return netOpenInterest_; }
      }
      
      public const int ExpiryDateDistanceFieldNumber = 17;
      private bool hasExpiryDateDistance;
      private int expiryDateDistance_;
      public bool HasExpiryDateDistance {
        get { return hasExpiryDateDistance; }
      }
      public int ExpiryDateDistance {
        get { return expiryDateDistance_; }
      }
      
      public const int ContractNominalValueFieldNumber = 18;
      private bool hasContractNominalValue;
      private double contractNominalValue_;
      public bool HasContractNominalValue {
        get { return hasContractNominalValue; }
      }
      public double ContractNominalValue {
        get { return contractNominalValue_; }
      }
      
      public const int OwnerLotMultiplierFieldNumber = 19;
      private bool hasOwnerLotMultiplier;
      private double ownerLotMultiplier_;
      public bool HasOwnerLotMultiplier {
        get { return hasOwnerLotMultiplier; }
      }
      public double OwnerLotMultiplier {
        get { return ownerLotMultiplier_; }
      }
      
      public const int OptionAreaTypeFieldNumber = 20;
      private bool hasOptionAreaType;
      private int optionAreaType_;
      public bool HasOptionAreaType {
        get { return hasOptionAreaType; }
      }
      public int OptionAreaType {
        get { return optionAreaType_; }
      }
      
      public const int ContractMultiplierFieldNumber = 21;
      private bool hasContractMultiplier;
      private double contractMultiplier_;
      public bool HasContractMultiplier {
        get { return hasContractMultiplier; }
      }
      public double ContractMultiplier {
        get { return contractMultiplier_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasType) return false;
          if (!hasOwner) return false;
          if (!hasStrikeTime) return false;
          if (!hasStrikePrice) return false;
          if (!hasContractSize) return false;
          if (!hasOpenInterest) return false;
          if (!hasImpliedVolatility) return false;
          if (!hasPremium) return false;
          if (!hasDelta) return false;
          if (!hasGamma) return false;
          if (!hasVega) return false;
          if (!hasTheta) return false;
          if (!hasRho) return false;
          if (!Owner.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _optionSnapshotExDataFieldNames;
        if (hasType) {
          output.WriteInt32(1, field_names[20], Type);
        }
        if (hasOwner) {
          output.WriteMessage(2, field_names[12], Owner);
        }
        if (hasStrikeTime) {
          output.WriteString(3, field_names[17], StrikeTime);
        }
        if (hasStrikePrice) {
          output.WriteDouble(4, field_names[16], StrikePrice);
        }
        if (hasContractSize) {
          output.WriteInt32(5, field_names[2], ContractSize);
        }
        if (hasOpenInterest) {
          output.WriteInt32(6, field_names[10], OpenInterest);
        }
        if (hasImpliedVolatility) {
          output.WriteDouble(7, field_names[7], ImpliedVolatility);
        }
        if (hasPremium) {
          output.WriteDouble(8, field_names[14], Premium);
        }
        if (hasDelta) {
          output.WriteDouble(9, field_names[4], Delta);
        }
        if (hasGamma) {
          output.WriteDouble(10, field_names[6], Gamma);
        }
        if (hasVega) {
          output.WriteDouble(11, field_names[21], Vega);
        }
        if (hasTheta) {
          output.WriteDouble(12, field_names[19], Theta);
        }
        if (hasRho) {
          output.WriteDouble(13, field_names[15], Rho);
        }
        if (hasStrikeTimestamp) {
          output.WriteDouble(14, field_names[18], StrikeTimestamp);
        }
        if (hasIndexOptionType) {
          output.WriteInt32(15, field_names[8], IndexOptionType);
        }
        if (hasNetOpenInterest) {
          output.WriteInt32(16, field_names[9], NetOpenInterest);
        }
        if (hasExpiryDateDistance) {
          output.WriteInt32(17, field_names[5], ExpiryDateDistance);
        }
        if (hasContractNominalValue) {
          output.WriteDouble(18, field_names[1], ContractNominalValue);
        }
        if (hasOwnerLotMultiplier) {
          output.WriteDouble(19, field_names[13], OwnerLotMultiplier);
        }
        if (hasOptionAreaType) {
          output.WriteInt32(20, field_names[11], OptionAreaType);
        }
        if (hasContractMultiplier) {
          output.WriteDouble(21, field_names[0], ContractMultiplier);
        }
        if (hasContractSizeFloat) {
          output.WriteDouble(22, field_names[3], ContractSizeFloat);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
        }
        if (hasStrikeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, StrikeTime);
        }
        if (hasStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, StrikePrice);
        }
        if (hasContractSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ContractSize);
        }
        if (hasContractSizeFloat) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, ContractSizeFloat);
        }
        if (hasOpenInterest) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, OpenInterest);
        }
        if (hasImpliedVolatility) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, ImpliedVolatility);
        }
        if (hasPremium) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Premium);
        }
        if (hasDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Delta);
        }
        if (hasGamma) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, Gamma);
        }
        if (hasVega) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Vega);
        }
        if (hasTheta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, Theta);
        }
        if (hasRho) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Rho);
        }
        if (hasStrikeTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, StrikeTimestamp);
        }
        if (hasIndexOptionType) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, IndexOptionType);
        }
        if (hasNetOpenInterest) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, NetOpenInterest);
        }
        if (hasExpiryDateDistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, ExpiryDateDistance);
        }
        if (hasContractNominalValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, ContractNominalValue);
        }
        if (hasOwnerLotMultiplier) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, OwnerLotMultiplier);
        }
        if (hasOptionAreaType) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, OptionAreaType);
        }
        if (hasContractMultiplier) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, ContractMultiplier);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OptionSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OptionSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OptionSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OptionSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OptionSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OptionSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OptionSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OptionSnapshotExData result;
        
        private OptionSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            OptionSnapshotExData original = result;
            result = new OptionSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OptionSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.Descriptor; }
        }
        
        public override OptionSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.DefaultInstance; }
        }
        
        public override OptionSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OptionSnapshotExData) {
            return MergeFrom((OptionSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OptionSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          if (other.HasStrikeTime) {
            StrikeTime = other.StrikeTime;
          }
          if (other.HasStrikePrice) {
            StrikePrice = other.StrikePrice;
          }
          if (other.HasContractSize) {
            ContractSize = other.ContractSize;
          }
          if (other.HasContractSizeFloat) {
            ContractSizeFloat = other.ContractSizeFloat;
          }
          if (other.HasOpenInterest) {
            OpenInterest = other.OpenInterest;
          }
          if (other.HasImpliedVolatility) {
            ImpliedVolatility = other.ImpliedVolatility;
          }
          if (other.HasPremium) {
            Premium = other.Premium;
          }
          if (other.HasDelta) {
            Delta = other.Delta;
          }
          if (other.HasGamma) {
            Gamma = other.Gamma;
          }
          if (other.HasVega) {
            Vega = other.Vega;
          }
          if (other.HasTheta) {
            Theta = other.Theta;
          }
          if (other.HasRho) {
            Rho = other.Rho;
          }
          if (other.HasStrikeTimestamp) {
            StrikeTimestamp = other.StrikeTimestamp;
          }
          if (other.HasIndexOptionType) {
            IndexOptionType = other.IndexOptionType;
          }
          if (other.HasNetOpenInterest) {
            NetOpenInterest = other.NetOpenInterest;
          }
          if (other.HasExpiryDateDistance) {
            ExpiryDateDistance = other.ExpiryDateDistance;
          }
          if (other.HasContractNominalValue) {
            ContractNominalValue = other.ContractNominalValue;
          }
          if (other.HasOwnerLotMultiplier) {
            OwnerLotMultiplier = other.OwnerLotMultiplier;
          }
          if (other.HasOptionAreaType) {
            OptionAreaType = other.OptionAreaType;
          }
          if (other.HasContractMultiplier) {
            ContractMultiplier = other.ContractMultiplier;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_optionSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _optionSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
              case 26: {
                result.hasStrikeTime = input.ReadString(ref result.strikeTime_);
                break;
              }
              case 33: {
                result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
                break;
              }
              case 40: {
                result.hasContractSize = input.ReadInt32(ref result.contractSize_);
                break;
              }
              case 48: {
                result.hasOpenInterest = input.ReadInt32(ref result.openInterest_);
                break;
              }
              case 57: {
                result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
                break;
              }
              case 65: {
                result.hasPremium = input.ReadDouble(ref result.premium_);
                break;
              }
              case 73: {
                result.hasDelta = input.ReadDouble(ref result.delta_);
                break;
              }
              case 81: {
                result.hasGamma = input.ReadDouble(ref result.gamma_);
                break;
              }
              case 89: {
                result.hasVega = input.ReadDouble(ref result.vega_);
                break;
              }
              case 97: {
                result.hasTheta = input.ReadDouble(ref result.theta_);
                break;
              }
              case 105: {
                result.hasRho = input.ReadDouble(ref result.rho_);
                break;
              }
              case 113: {
                result.hasStrikeTimestamp = input.ReadDouble(ref result.strikeTimestamp_);
                break;
              }
              case 120: {
                result.hasIndexOptionType = input.ReadInt32(ref result.indexOptionType_);
                break;
              }
              case 128: {
                result.hasNetOpenInterest = input.ReadInt32(ref result.netOpenInterest_);
                break;
              }
              case 136: {
                result.hasExpiryDateDistance = input.ReadInt32(ref result.expiryDateDistance_);
                break;
              }
              case 145: {
                result.hasContractNominalValue = input.ReadDouble(ref result.contractNominalValue_);
                break;
              }
              case 153: {
                result.hasOwnerLotMultiplier = input.ReadDouble(ref result.ownerLotMultiplier_);
                break;
              }
              case 160: {
                result.hasOptionAreaType = input.ReadInt32(ref result.optionAreaType_);
                break;
              }
              case 169: {
                result.hasContractMultiplier = input.ReadDouble(ref result.contractMultiplier_);
                break;
              }
              case 177: {
                result.hasContractSizeFloat = input.ReadDouble(ref result.contractSizeFloat_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
        
        public bool HasStrikeTime {
          get { return result.hasStrikeTime; }
        }
        public string StrikeTime {
          get { return result.StrikeTime; }
          set { SetStrikeTime(value); }
        }
        public Builder SetStrikeTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasStrikeTime = true;
          result.strikeTime_ = value;
          return this;
        }
        public Builder ClearStrikeTime() {
          PrepareBuilder();
          result.hasStrikeTime = false;
          result.strikeTime_ = "";
          return this;
        }
        
        public bool HasStrikePrice {
          get { return result.hasStrikePrice; }
        }
        public double StrikePrice {
          get { return result.StrikePrice; }
          set { SetStrikePrice(value); }
        }
        public Builder SetStrikePrice(double value) {
          PrepareBuilder();
          result.hasStrikePrice = true;
          result.strikePrice_ = value;
          return this;
        }
        public Builder ClearStrikePrice() {
          PrepareBuilder();
          result.hasStrikePrice = false;
          result.strikePrice_ = 0D;
          return this;
        }
        
        public bool HasContractSize {
          get { return result.hasContractSize; }
        }
        public int ContractSize {
          get { return result.ContractSize; }
          set { SetContractSize(value); }
        }
        public Builder SetContractSize(int value) {
          PrepareBuilder();
          result.hasContractSize = true;
          result.contractSize_ = value;
          return this;
        }
        public Builder ClearContractSize() {
          PrepareBuilder();
          result.hasContractSize = false;
          result.contractSize_ = 0;
          return this;
        }
        
        public bool HasContractSizeFloat {
          get { return result.hasContractSizeFloat; }
        }
        public double ContractSizeFloat {
          get { return result.ContractSizeFloat; }
          set { SetContractSizeFloat(value); }
        }
        public Builder SetContractSizeFloat(double value) {
          PrepareBuilder();
          result.hasContractSizeFloat = true;
          result.contractSizeFloat_ = value;
          return this;
        }
        public Builder ClearContractSizeFloat() {
          PrepareBuilder();
          result.hasContractSizeFloat = false;
          result.contractSizeFloat_ = 0D;
          return this;
        }
        
        public bool HasOpenInterest {
          get { return result.hasOpenInterest; }
        }
        public int OpenInterest {
          get { return result.OpenInterest; }
          set { SetOpenInterest(value); }
        }
        public Builder SetOpenInterest(int value) {
          PrepareBuilder();
          result.hasOpenInterest = true;
          result.openInterest_ = value;
          return this;
        }
        public Builder ClearOpenInterest() {
          PrepareBuilder();
          result.hasOpenInterest = false;
          result.openInterest_ = 0;
          return this;
        }
        
        public bool HasImpliedVolatility {
          get { return result.hasImpliedVolatility; }
        }
        public double ImpliedVolatility {
          get { return result.ImpliedVolatility; }
          set { SetImpliedVolatility(value); }
        }
        public Builder SetImpliedVolatility(double value) {
          PrepareBuilder();
          result.hasImpliedVolatility = true;
          result.impliedVolatility_ = value;
          return this;
        }
        public Builder ClearImpliedVolatility() {
          PrepareBuilder();
          result.hasImpliedVolatility = false;
          result.impliedVolatility_ = 0D;
          return this;
        }
        
        public bool HasPremium {
          get { return result.hasPremium; }
        }
        public double Premium {
          get { return result.Premium; }
          set { SetPremium(value); }
        }
        public Builder SetPremium(double value) {
          PrepareBuilder();
          result.hasPremium = true;
          result.premium_ = value;
          return this;
        }
        public Builder ClearPremium() {
          PrepareBuilder();
          result.hasPremium = false;
          result.premium_ = 0D;
          return this;
        }
        
        public bool HasDelta {
          get { return result.hasDelta; }
        }
        public double Delta {
          get { return result.Delta; }
          set { SetDelta(value); }
        }
        public Builder SetDelta(double value) {
          PrepareBuilder();
          result.hasDelta = true;
          result.delta_ = value;
          return this;
        }
        public Builder ClearDelta() {
          PrepareBuilder();
          result.hasDelta = false;
          result.delta_ = 0D;
          return this;
        }
        
        public bool HasGamma {
          get { return result.hasGamma; }
        }
        public double Gamma {
          get { return result.Gamma; }
          set { SetGamma(value); }
        }
        public Builder SetGamma(double value) {
          PrepareBuilder();
          result.hasGamma = true;
          result.gamma_ = value;
          return this;
        }
        public Builder ClearGamma() {
          PrepareBuilder();
          result.hasGamma = false;
          result.gamma_ = 0D;
          return this;
        }
        
        public bool HasVega {
          get { return result.hasVega; }
        }
        public double Vega {
          get { return result.Vega; }
          set { SetVega(value); }
        }
        public Builder SetVega(double value) {
          PrepareBuilder();
          result.hasVega = true;
          result.vega_ = value;
          return this;
        }
        public Builder ClearVega() {
          PrepareBuilder();
          result.hasVega = false;
          result.vega_ = 0D;
          return this;
        }
        
        public bool HasTheta {
          get { return result.hasTheta; }
        }
        public double Theta {
          get { return result.Theta; }
          set { SetTheta(value); }
        }
        public Builder SetTheta(double value) {
          PrepareBuilder();
          result.hasTheta = true;
          result.theta_ = value;
          return this;
        }
        public Builder ClearTheta() {
          PrepareBuilder();
          result.hasTheta = false;
          result.theta_ = 0D;
          return this;
        }
        
        public bool HasRho {
          get { return result.hasRho; }
        }
        public double Rho {
          get { return result.Rho; }
          set { SetRho(value); }
        }
        public Builder SetRho(double value) {
          PrepareBuilder();
          result.hasRho = true;
          result.rho_ = value;
          return this;
        }
        public Builder ClearRho() {
          PrepareBuilder();
          result.hasRho = false;
          result.rho_ = 0D;
          return this;
        }
        
        public bool HasStrikeTimestamp {
          get { return result.hasStrikeTimestamp; }
        }
        public double StrikeTimestamp {
          get { return result.StrikeTimestamp; }
          set { SetStrikeTimestamp(value); }
        }
        public Builder SetStrikeTimestamp(double value) {
          PrepareBuilder();
          result.hasStrikeTimestamp = true;
          result.strikeTimestamp_ = value;
          return this;
        }
        public Builder ClearStrikeTimestamp() {
          PrepareBuilder();
          result.hasStrikeTimestamp = false;
          result.strikeTimestamp_ = 0D;
          return this;
        }
        
        public bool HasIndexOptionType {
          get { return result.hasIndexOptionType; }
        }
        public int IndexOptionType {
          get { return result.IndexOptionType; }
          set { SetIndexOptionType(value); }
        }
        public Builder SetIndexOptionType(int value) {
          PrepareBuilder();
          result.hasIndexOptionType = true;
          result.indexOptionType_ = value;
          return this;
        }
        public Builder ClearIndexOptionType() {
          PrepareBuilder();
          result.hasIndexOptionType = false;
          result.indexOptionType_ = 0;
          return this;
        }
        
        public bool HasNetOpenInterest {
          get { return result.hasNetOpenInterest; }
        }
        public int NetOpenInterest {
          get { return result.NetOpenInterest; }
          set { SetNetOpenInterest(value); }
        }
        public Builder SetNetOpenInterest(int value) {
          PrepareBuilder();
          result.hasNetOpenInterest = true;
          result.netOpenInterest_ = value;
          return this;
        }
        public Builder ClearNetOpenInterest() {
          PrepareBuilder();
          result.hasNetOpenInterest = false;
          result.netOpenInterest_ = 0;
          return this;
        }
        
        public bool HasExpiryDateDistance {
          get { return result.hasExpiryDateDistance; }
        }
        public int ExpiryDateDistance {
          get { return result.ExpiryDateDistance; }
          set { SetExpiryDateDistance(value); }
        }
        public Builder SetExpiryDateDistance(int value) {
          PrepareBuilder();
          result.hasExpiryDateDistance = true;
          result.expiryDateDistance_ = value;
          return this;
        }
        public Builder ClearExpiryDateDistance() {
          PrepareBuilder();
          result.hasExpiryDateDistance = false;
          result.expiryDateDistance_ = 0;
          return this;
        }
        
        public bool HasContractNominalValue {
          get { return result.hasContractNominalValue; }
        }
        public double ContractNominalValue {
          get { return result.ContractNominalValue; }
          set { SetContractNominalValue(value); }
        }
        public Builder SetContractNominalValue(double value) {
          PrepareBuilder();
          result.hasContractNominalValue = true;
          result.contractNominalValue_ = value;
          return this;
        }
        public Builder ClearContractNominalValue() {
          PrepareBuilder();
          result.hasContractNominalValue = false;
          result.contractNominalValue_ = 0D;
          return this;
        }
        
        public bool HasOwnerLotMultiplier {
          get { return result.hasOwnerLotMultiplier; }
        }
        public double OwnerLotMultiplier {
          get { return result.OwnerLotMultiplier; }
          set { SetOwnerLotMultiplier(value); }
        }
        public Builder SetOwnerLotMultiplier(double value) {
          PrepareBuilder();
          result.hasOwnerLotMultiplier = true;
          result.ownerLotMultiplier_ = value;
          return this;
        }
        public Builder ClearOwnerLotMultiplier() {
          PrepareBuilder();
          result.hasOwnerLotMultiplier = false;
          result.ownerLotMultiplier_ = 0D;
          return this;
        }
        
        public bool HasOptionAreaType {
          get { return result.hasOptionAreaType; }
        }
        public int OptionAreaType {
          get { return result.OptionAreaType; }
          set { SetOptionAreaType(value); }
        }
        public Builder SetOptionAreaType(int value) {
          PrepareBuilder();
          result.hasOptionAreaType = true;
          result.optionAreaType_ = value;
          return this;
        }
        public Builder ClearOptionAreaType() {
          PrepareBuilder();
          result.hasOptionAreaType = false;
          result.optionAreaType_ = 0;
          return this;
        }
        
        public bool HasContractMultiplier {
          get { return result.hasContractMultiplier; }
        }
        public double ContractMultiplier {
          get { return result.ContractMultiplier; }
          set { SetContractMultiplier(value); }
        }
        public Builder SetContractMultiplier(double value) {
          PrepareBuilder();
          result.hasContractMultiplier = true;
          result.contractMultiplier_ = value;
          return this;
        }
        public Builder ClearContractMultiplier() {
          PrepareBuilder();
          result.hasContractMultiplier = false;
          result.contractMultiplier_ = 0D;
          return this;
        }
      }
      static OptionSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class IndexSnapshotExData : pb::GeneratedMessage<IndexSnapshotExData, IndexSnapshotExData.Builder> {
      private IndexSnapshotExData() { }
      private static readonly IndexSnapshotExData defaultInstance = new IndexSnapshotExData().MakeReadOnly();
      private static readonly string[] _indexSnapshotExDataFieldNames = new string[] { "equalCount", "fallCount", "raiseCount" };
      private static readonly uint[] _indexSnapshotExDataFieldTags = new uint[] { 24, 16, 8 };
      public static IndexSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override IndexSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override IndexSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<IndexSnapshotExData, IndexSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_IndexSnapshotExData__FieldAccessorTable; }
      }
      
      public const int RaiseCountFieldNumber = 1;
      private bool hasRaiseCount;
      private int raiseCount_;
      public bool HasRaiseCount {
        get { return hasRaiseCount; }
      }
      public int RaiseCount {
        get { return raiseCount_; }
      }
      
      public const int FallCountFieldNumber = 2;
      private bool hasFallCount;
      private int fallCount_;
      public bool HasFallCount {
        get { return hasFallCount; }
      }
      public int FallCount {
        get { return fallCount_; }
      }
      
      public const int EqualCountFieldNumber = 3;
      private bool hasEqualCount;
      private int equalCount_;
      public bool HasEqualCount {
        get { return hasEqualCount; }
      }
      public int EqualCount {
        get { return equalCount_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRaiseCount) return false;
          if (!hasFallCount) return false;
          if (!hasEqualCount) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _indexSnapshotExDataFieldNames;
        if (hasRaiseCount) {
          output.WriteInt32(1, field_names[2], RaiseCount);
        }
        if (hasFallCount) {
          output.WriteInt32(2, field_names[1], FallCount);
        }
        if (hasEqualCount) {
          output.WriteInt32(3, field_names[0], EqualCount);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRaiseCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RaiseCount);
        }
        if (hasFallCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, FallCount);
        }
        if (hasEqualCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, EqualCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static IndexSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static IndexSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static IndexSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static IndexSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private IndexSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(IndexSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<IndexSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(IndexSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private IndexSnapshotExData result;
        
        private IndexSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            IndexSnapshotExData original = result;
            result = new IndexSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override IndexSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.Descriptor; }
        }
        
        public override IndexSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.DefaultInstance; }
        }
        
        public override IndexSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is IndexSnapshotExData) {
            return MergeFrom((IndexSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(IndexSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRaiseCount) {
            RaiseCount = other.RaiseCount;
          }
          if (other.HasFallCount) {
            FallCount = other.FallCount;
          }
          if (other.HasEqualCount) {
            EqualCount = other.EqualCount;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_indexSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _indexSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRaiseCount = input.ReadInt32(ref result.raiseCount_);
                break;
              }
              case 16: {
                result.hasFallCount = input.ReadInt32(ref result.fallCount_);
                break;
              }
              case 24: {
                result.hasEqualCount = input.ReadInt32(ref result.equalCount_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRaiseCount {
          get { return result.hasRaiseCount; }
        }
        public int RaiseCount {
          get { return result.RaiseCount; }
          set { SetRaiseCount(value); }
        }
        public Builder SetRaiseCount(int value) {
          PrepareBuilder();
          result.hasRaiseCount = true;
          result.raiseCount_ = value;
          return this;
        }
        public Builder ClearRaiseCount() {
          PrepareBuilder();
          result.hasRaiseCount = false;
          result.raiseCount_ = 0;
          return this;
        }
        
        public bool HasFallCount {
          get { return result.hasFallCount; }
        }
        public int FallCount {
          get { return result.FallCount; }
          set { SetFallCount(value); }
        }
        public Builder SetFallCount(int value) {
          PrepareBuilder();
          result.hasFallCount = true;
          result.fallCount_ = value;
          return this;
        }
        public Builder ClearFallCount() {
          PrepareBuilder();
          result.hasFallCount = false;
          result.fallCount_ = 0;
          return this;
        }
        
        public bool HasEqualCount {
          get { return result.hasEqualCount; }
        }
        public int EqualCount {
          get { return result.EqualCount; }
          set { SetEqualCount(value); }
        }
        public Builder SetEqualCount(int value) {
          PrepareBuilder();
          result.hasEqualCount = true;
          result.equalCount_ = value;
          return this;
        }
        public Builder ClearEqualCount() {
          PrepareBuilder();
          result.hasEqualCount = false;
          result.equalCount_ = 0;
          return this;
        }
      }
      static IndexSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PlateSnapshotExData : pb::GeneratedMessage<PlateSnapshotExData, PlateSnapshotExData.Builder> {
      private PlateSnapshotExData() { }
      private static readonly PlateSnapshotExData defaultInstance = new PlateSnapshotExData().MakeReadOnly();
      private static readonly string[] _plateSnapshotExDataFieldNames = new string[] { "equalCount", "fallCount", "raiseCount" };
      private static readonly uint[] _plateSnapshotExDataFieldTags = new uint[] { 24, 16, 8 };
      public static PlateSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override PlateSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override PlateSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<PlateSnapshotExData, PlateSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_PlateSnapshotExData__FieldAccessorTable; }
      }
      
      public const int RaiseCountFieldNumber = 1;
      private bool hasRaiseCount;
      private int raiseCount_;
      public bool HasRaiseCount {
        get { return hasRaiseCount; }
      }
      public int RaiseCount {
        get { return raiseCount_; }
      }
      
      public const int FallCountFieldNumber = 2;
      private bool hasFallCount;
      private int fallCount_;
      public bool HasFallCount {
        get { return hasFallCount; }
      }
      public int FallCount {
        get { return fallCount_; }
      }
      
      public const int EqualCountFieldNumber = 3;
      private bool hasEqualCount;
      private int equalCount_;
      public bool HasEqualCount {
        get { return hasEqualCount; }
      }
      public int EqualCount {
        get { return equalCount_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRaiseCount) return false;
          if (!hasFallCount) return false;
          if (!hasEqualCount) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _plateSnapshotExDataFieldNames;
        if (hasRaiseCount) {
          output.WriteInt32(1, field_names[2], RaiseCount);
        }
        if (hasFallCount) {
          output.WriteInt32(2, field_names[1], FallCount);
        }
        if (hasEqualCount) {
          output.WriteInt32(3, field_names[0], EqualCount);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRaiseCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RaiseCount);
        }
        if (hasFallCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, FallCount);
        }
        if (hasEqualCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, EqualCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static PlateSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static PlateSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static PlateSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlateSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private PlateSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(PlateSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<PlateSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(PlateSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private PlateSnapshotExData result;
        
        private PlateSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            PlateSnapshotExData original = result;
            result = new PlateSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override PlateSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.Descriptor; }
        }
        
        public override PlateSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.DefaultInstance; }
        }
        
        public override PlateSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is PlateSnapshotExData) {
            return MergeFrom((PlateSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(PlateSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRaiseCount) {
            RaiseCount = other.RaiseCount;
          }
          if (other.HasFallCount) {
            FallCount = other.FallCount;
          }
          if (other.HasEqualCount) {
            EqualCount = other.EqualCount;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_plateSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _plateSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRaiseCount = input.ReadInt32(ref result.raiseCount_);
                break;
              }
              case 16: {
                result.hasFallCount = input.ReadInt32(ref result.fallCount_);
                break;
              }
              case 24: {
                result.hasEqualCount = input.ReadInt32(ref result.equalCount_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRaiseCount {
          get { return result.hasRaiseCount; }
        }
        public int RaiseCount {
          get { return result.RaiseCount; }
          set { SetRaiseCount(value); }
        }
        public Builder SetRaiseCount(int value) {
          PrepareBuilder();
          result.hasRaiseCount = true;
          result.raiseCount_ = value;
          return this;
        }
        public Builder ClearRaiseCount() {
          PrepareBuilder();
          result.hasRaiseCount = false;
          result.raiseCount_ = 0;
          return this;
        }
        
        public bool HasFallCount {
          get { return result.hasFallCount; }
        }
        public int FallCount {
          get { return result.FallCount; }
          set { SetFallCount(value); }
        }
        public Builder SetFallCount(int value) {
          PrepareBuilder();
          result.hasFallCount = true;
          result.fallCount_ = value;
          return this;
        }
        public Builder ClearFallCount() {
          PrepareBuilder();
          result.hasFallCount = false;
          result.fallCount_ = 0;
          return this;
        }
        
        public bool HasEqualCount {
          get { return result.hasEqualCount; }
        }
        public int EqualCount {
          get { return result.EqualCount; }
          set { SetEqualCount(value); }
        }
        public Builder SetEqualCount(int value) {
          PrepareBuilder();
          result.hasEqualCount = true;
          result.equalCount_ = value;
          return this;
        }
        public Builder ClearEqualCount() {
          PrepareBuilder();
          result.hasEqualCount = false;
          result.equalCount_ = 0;
          return this;
        }
      }
      static PlateSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FutureSnapshotExData : pb::GeneratedMessage<FutureSnapshotExData, FutureSnapshotExData.Builder> {
      private FutureSnapshotExData() { }
      private static readonly FutureSnapshotExData defaultInstance = new FutureSnapshotExData().MakeReadOnly();
      private static readonly string[] _futureSnapshotExDataFieldNames = new string[] { "isMainContract", "lastSettlePrice", "lastTradeTime", "lastTradeTimestamp", "position", "positionChange" };
      private static readonly uint[] _futureSnapshotExDataFieldTags = new uint[] { 48, 9, 34, 41, 16, 24 };
      public static FutureSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override FutureSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override FutureSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<FutureSnapshotExData, FutureSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_FutureSnapshotExData__FieldAccessorTable; }
      }
      
      public const int LastSettlePriceFieldNumber = 1;
      private bool hasLastSettlePrice;
      private double lastSettlePrice_;
      public bool HasLastSettlePrice {
        get { return hasLastSettlePrice; }
      }
      public double LastSettlePrice {
        get { return lastSettlePrice_; }
      }
      
      public const int PositionFieldNumber = 2;
      private bool hasPosition;
      private int position_;
      public bool HasPosition {
        get { return hasPosition; }
      }
      public int Position {
        get { return position_; }
      }
      
      public const int PositionChangeFieldNumber = 3;
      private bool hasPositionChange;
      private int positionChange_;
      public bool HasPositionChange {
        get { return hasPositionChange; }
      }
      public int PositionChange {
        get { return positionChange_; }
      }
      
      public const int LastTradeTimeFieldNumber = 4;
      private bool hasLastTradeTime;
      private string lastTradeTime_ = "";
      public bool HasLastTradeTime {
        get { return hasLastTradeTime; }
      }
      public string LastTradeTime {
        get { return lastTradeTime_; }
      }
      
      public const int LastTradeTimestampFieldNumber = 5;
      private bool hasLastTradeTimestamp;
      private double lastTradeTimestamp_;
      public bool HasLastTradeTimestamp {
        get { return hasLastTradeTimestamp; }
      }
      public double LastTradeTimestamp {
        get { return lastTradeTimestamp_; }
      }
      
      public const int IsMainContractFieldNumber = 6;
      private bool hasIsMainContract;
      private bool isMainContract_;
      public bool HasIsMainContract {
        get { return hasIsMainContract; }
      }
      public bool IsMainContract {
        get { return isMainContract_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasLastSettlePrice) return false;
          if (!hasPosition) return false;
          if (!hasPositionChange) return false;
          if (!hasLastTradeTime) return false;
          if (!hasIsMainContract) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _futureSnapshotExDataFieldNames;
        if (hasLastSettlePrice) {
          output.WriteDouble(1, field_names[1], LastSettlePrice);
        }
        if (hasPosition) {
          output.WriteInt32(2, field_names[4], Position);
        }
        if (hasPositionChange) {
          output.WriteInt32(3, field_names[5], PositionChange);
        }
        if (hasLastTradeTime) {
          output.WriteString(4, field_names[2], LastTradeTime);
        }
        if (hasLastTradeTimestamp) {
          output.WriteDouble(5, field_names[3], LastTradeTimestamp);
        }
        if (hasIsMainContract) {
          output.WriteBool(6, field_names[0], IsMainContract);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastSettlePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, LastSettlePrice);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Position);
        }
        if (hasPositionChange) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, PositionChange);
        }
        if (hasLastTradeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(4, LastTradeTime);
        }
        if (hasLastTradeTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, LastTradeTimestamp);
        }
        if (hasIsMainContract) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsMainContract);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static FutureSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static FutureSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static FutureSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FutureSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private FutureSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(FutureSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<FutureSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(FutureSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private FutureSnapshotExData result;
        
        private FutureSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            FutureSnapshotExData original = result;
            result = new FutureSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override FutureSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.Descriptor; }
        }
        
        public override FutureSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.DefaultInstance; }
        }
        
        public override FutureSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is FutureSnapshotExData) {
            return MergeFrom((FutureSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(FutureSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasLastSettlePrice) {
            LastSettlePrice = other.LastSettlePrice;
          }
          if (other.HasPosition) {
            Position = other.Position;
          }
          if (other.HasPositionChange) {
            PositionChange = other.PositionChange;
          }
          if (other.HasLastTradeTime) {
            LastTradeTime = other.LastTradeTime;
          }
          if (other.HasLastTradeTimestamp) {
            LastTradeTimestamp = other.LastTradeTimestamp;
          }
          if (other.HasIsMainContract) {
            IsMainContract = other.IsMainContract;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_futureSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _futureSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasLastSettlePrice = input.ReadDouble(ref result.lastSettlePrice_);
                break;
              }
              case 16: {
                result.hasPosition = input.ReadInt32(ref result.position_);
                break;
              }
              case 24: {
                result.hasPositionChange = input.ReadInt32(ref result.positionChange_);
                break;
              }
              case 34: {
                result.hasLastTradeTime = input.ReadString(ref result.lastTradeTime_);
                break;
              }
              case 41: {
                result.hasLastTradeTimestamp = input.ReadDouble(ref result.lastTradeTimestamp_);
                break;
              }
              case 48: {
                result.hasIsMainContract = input.ReadBool(ref result.isMainContract_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasLastSettlePrice {
          get { return result.hasLastSettlePrice; }
        }
        public double LastSettlePrice {
          get { return result.LastSettlePrice; }
          set { SetLastSettlePrice(value); }
        }
        public Builder SetLastSettlePrice(double value) {
          PrepareBuilder();
          result.hasLastSettlePrice = true;
          result.lastSettlePrice_ = value;
          return this;
        }
        public Builder ClearLastSettlePrice() {
          PrepareBuilder();
          result.hasLastSettlePrice = false;
          result.lastSettlePrice_ = 0D;
          return this;
        }
        
        public bool HasPosition {
          get { return result.hasPosition; }
        }
        public int Position {
          get { return result.Position; }
          set { SetPosition(value); }
        }
        public Builder SetPosition(int value) {
          PrepareBuilder();
          result.hasPosition = true;
          result.position_ = value;
          return this;
        }
        public Builder ClearPosition() {
          PrepareBuilder();
          result.hasPosition = false;
          result.position_ = 0;
          return this;
        }
        
        public bool HasPositionChange {
          get { return result.hasPositionChange; }
        }
        public int PositionChange {
          get { return result.PositionChange; }
          set { SetPositionChange(value); }
        }
        public Builder SetPositionChange(int value) {
          PrepareBuilder();
          result.hasPositionChange = true;
          result.positionChange_ = value;
          return this;
        }
        public Builder ClearPositionChange() {
          PrepareBuilder();
          result.hasPositionChange = false;
          result.positionChange_ = 0;
          return this;
        }
        
        public bool HasLastTradeTime {
          get { return result.hasLastTradeTime; }
        }
        public string LastTradeTime {
          get { return result.LastTradeTime; }
          set { SetLastTradeTime(value); }
        }
        public Builder SetLastTradeTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasLastTradeTime = true;
          result.lastTradeTime_ = value;
          return this;
        }
        public Builder ClearLastTradeTime() {
          PrepareBuilder();
          result.hasLastTradeTime = false;
          result.lastTradeTime_ = "";
          return this;
        }
        
        public bool HasLastTradeTimestamp {
          get { return result.hasLastTradeTimestamp; }
        }
        public double LastTradeTimestamp {
          get { return result.LastTradeTimestamp; }
          set { SetLastTradeTimestamp(value); }
        }
        public Builder SetLastTradeTimestamp(double value) {
          PrepareBuilder();
          result.hasLastTradeTimestamp = true;
          result.lastTradeTimestamp_ = value;
          return this;
        }
        public Builder ClearLastTradeTimestamp() {
          PrepareBuilder();
          result.hasLastTradeTimestamp = false;
          result.lastTradeTimestamp_ = 0D;
          return this;
        }
        
        public bool HasIsMainContract {
          get { return result.hasIsMainContract; }
        }
        public bool IsMainContract {
          get { return result.IsMainContract; }
          set { SetIsMainContract(value); }
        }
        public Builder SetIsMainContract(bool value) {
          PrepareBuilder();
          result.hasIsMainContract = true;
          result.isMainContract_ = value;
          return this;
        }
        public Builder ClearIsMainContract() {
          PrepareBuilder();
          result.hasIsMainContract = false;
          result.isMainContract_ = false;
          return this;
        }
      }
      static FutureSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrustSnapshotExData : pb::GeneratedMessage<TrustSnapshotExData, TrustSnapshotExData.Builder> {
      private TrustSnapshotExData() { }
      private static readonly TrustSnapshotExData defaultInstance = new TrustSnapshotExData().MakeReadOnly();
      private static readonly string[] _trustSnapshotExDataFieldNames = new string[] { "assetClass", "aum", "dividendYield", "netAssetValue", "outstandingUnits", "premium" };
      private static readonly uint[] _trustSnapshotExDataFieldTags = new uint[] { 48, 17, 9, 33, 24, 41 };
      public static TrustSnapshotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrustSnapshotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrustSnapshotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrustSnapshotExData, TrustSnapshotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_TrustSnapshotExData__FieldAccessorTable; }
      }
      
      public const int DividendYieldFieldNumber = 1;
      private bool hasDividendYield;
      private double dividendYield_;
      public bool HasDividendYield {
        get { return hasDividendYield; }
      }
      public double DividendYield {
        get { return dividendYield_; }
      }
      
      public const int AumFieldNumber = 2;
      private bool hasAum;
      private double aum_;
      public bool HasAum {
        get { return hasAum; }
      }
      public double Aum {
        get { return aum_; }
      }
      
      public const int OutstandingUnitsFieldNumber = 3;
      private bool hasOutstandingUnits;
      private long outstandingUnits_;
      public bool HasOutstandingUnits {
        get { return hasOutstandingUnits; }
      }
      public long OutstandingUnits {
        get { return outstandingUnits_; }
      }
      
      public const int NetAssetValueFieldNumber = 4;
      private bool hasNetAssetValue;
      private double netAssetValue_;
      public bool HasNetAssetValue {
        get { return hasNetAssetValue; }
      }
      public double NetAssetValue {
        get { return netAssetValue_; }
      }
      
      public const int PremiumFieldNumber = 5;
      private bool hasPremium;
      private double premium_;
      public bool HasPremium {
        get { return hasPremium; }
      }
      public double Premium {
        get { return premium_; }
      }
      
      public const int AssetClassFieldNumber = 6;
      private bool hasAssetClass;
      private int assetClass_;
      public bool HasAssetClass {
        get { return hasAssetClass; }
      }
      public int AssetClass {
        get { return assetClass_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasDividendYield) return false;
          if (!hasAum) return false;
          if (!hasOutstandingUnits) return false;
          if (!hasNetAssetValue) return false;
          if (!hasPremium) return false;
          if (!hasAssetClass) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trustSnapshotExDataFieldNames;
        if (hasDividendYield) {
          output.WriteDouble(1, field_names[2], DividendYield);
        }
        if (hasAum) {
          output.WriteDouble(2, field_names[1], Aum);
        }
        if (hasOutstandingUnits) {
          output.WriteInt64(3, field_names[4], OutstandingUnits);
        }
        if (hasNetAssetValue) {
          output.WriteDouble(4, field_names[3], NetAssetValue);
        }
        if (hasPremium) {
          output.WriteDouble(5, field_names[5], Premium);
        }
        if (hasAssetClass) {
          output.WriteInt32(6, field_names[0], AssetClass);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDividendYield) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, DividendYield);
        }
        if (hasAum) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Aum);
        }
        if (hasOutstandingUnits) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, OutstandingUnits);
        }
        if (hasNetAssetValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, NetAssetValue);
        }
        if (hasPremium) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Premium);
        }
        if (hasAssetClass) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, AssetClass);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrustSnapshotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrustSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrustSnapshotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrustSnapshotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrustSnapshotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrustSnapshotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrustSnapshotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrustSnapshotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrustSnapshotExData result;
        
        private TrustSnapshotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            TrustSnapshotExData original = result;
            result = new TrustSnapshotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrustSnapshotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.Descriptor; }
        }
        
        public override TrustSnapshotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.DefaultInstance; }
        }
        
        public override TrustSnapshotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrustSnapshotExData) {
            return MergeFrom((TrustSnapshotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrustSnapshotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasDividendYield) {
            DividendYield = other.DividendYield;
          }
          if (other.HasAum) {
            Aum = other.Aum;
          }
          if (other.HasOutstandingUnits) {
            OutstandingUnits = other.OutstandingUnits;
          }
          if (other.HasNetAssetValue) {
            NetAssetValue = other.NetAssetValue;
          }
          if (other.HasPremium) {
            Premium = other.Premium;
          }
          if (other.HasAssetClass) {
            AssetClass = other.AssetClass;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trustSnapshotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trustSnapshotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasDividendYield = input.ReadDouble(ref result.dividendYield_);
                break;
              }
              case 17: {
                result.hasAum = input.ReadDouble(ref result.aum_);
                break;
              }
              case 24: {
                result.hasOutstandingUnits = input.ReadInt64(ref result.outstandingUnits_);
                break;
              }
              case 33: {
                result.hasNetAssetValue = input.ReadDouble(ref result.netAssetValue_);
                break;
              }
              case 41: {
                result.hasPremium = input.ReadDouble(ref result.premium_);
                break;
              }
              case 48: {
                result.hasAssetClass = input.ReadInt32(ref result.assetClass_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasDividendYield {
          get { return result.hasDividendYield; }
        }
        public double DividendYield {
          get { return result.DividendYield; }
          set { SetDividendYield(value); }
        }
        public Builder SetDividendYield(double value) {
          PrepareBuilder();
          result.hasDividendYield = true;
          result.dividendYield_ = value;
          return this;
        }
        public Builder ClearDividendYield() {
          PrepareBuilder();
          result.hasDividendYield = false;
          result.dividendYield_ = 0D;
          return this;
        }
        
        public bool HasAum {
          get { return result.hasAum; }
        }
        public double Aum {
          get { return result.Aum; }
          set { SetAum(value); }
        }
        public Builder SetAum(double value) {
          PrepareBuilder();
          result.hasAum = true;
          result.aum_ = value;
          return this;
        }
        public Builder ClearAum() {
          PrepareBuilder();
          result.hasAum = false;
          result.aum_ = 0D;
          return this;
        }
        
        public bool HasOutstandingUnits {
          get { return result.hasOutstandingUnits; }
        }
        public long OutstandingUnits {
          get { return result.OutstandingUnits; }
          set { SetOutstandingUnits(value); }
        }
        public Builder SetOutstandingUnits(long value) {
          PrepareBuilder();
          result.hasOutstandingUnits = true;
          result.outstandingUnits_ = value;
          return this;
        }
        public Builder ClearOutstandingUnits() {
          PrepareBuilder();
          result.hasOutstandingUnits = false;
          result.outstandingUnits_ = 0L;
          return this;
        }
        
        public bool HasNetAssetValue {
          get { return result.hasNetAssetValue; }
        }
        public double NetAssetValue {
          get { return result.NetAssetValue; }
          set { SetNetAssetValue(value); }
        }
        public Builder SetNetAssetValue(double value) {
          PrepareBuilder();
          result.hasNetAssetValue = true;
          result.netAssetValue_ = value;
          return this;
        }
        public Builder ClearNetAssetValue() {
          PrepareBuilder();
          result.hasNetAssetValue = false;
          result.netAssetValue_ = 0D;
          return this;
        }
        
        public bool HasPremium {
          get { return result.hasPremium; }
        }
        public double Premium {
          get { return result.Premium; }
          set { SetPremium(value); }
        }
        public Builder SetPremium(double value) {
          PrepareBuilder();
          result.hasPremium = true;
          result.premium_ = value;
          return this;
        }
        public Builder ClearPremium() {
          PrepareBuilder();
          result.hasPremium = false;
          result.premium_ = 0D;
          return this;
        }
        
        public bool HasAssetClass {
          get { return result.hasAssetClass; }
        }
        public int AssetClass {
          get { return result.AssetClass; }
          set { SetAssetClass(value); }
        }
        public Builder SetAssetClass(int value) {
          PrepareBuilder();
          result.hasAssetClass = true;
          result.assetClass_ = value;
          return this;
        }
        public Builder ClearAssetClass() {
          PrepareBuilder();
          result.hasAssetClass = false;
          result.assetClass_ = 0;
          return this;
        }
      }
      static TrustSnapshotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SnapshotBasicData : pb::GeneratedMessage<SnapshotBasicData, SnapshotBasicData.Builder> {
      private SnapshotBasicData() { }
      private static readonly SnapshotBasicData defaultInstance = new SnapshotBasicData().MakeReadOnly();
      private static readonly string[] _snapshotBasicDataFieldNames = new string[] { "afterMarket", "amplitude", "askPrice", "askVol", "avgPrice", "bidAskRatio", "bidPrice", "bidVol", "closePrice5Minute", "curPrice", "enableMargin", "enableShortSell", "highPrice", "highest52WeeksPrice", "highestHistoryPrice", "isSuspend", "lastClosePrice", "listTime", "listTimestamp", "longMarginInitialRatio", "lotSize", "lowPrice", "lowest52WeeksPrice", "lowestHistoryPrice", "mortgageRatio", "openPrice", "preMarket", "priceSpread", "secStatus", "security", "shortAvailableVolume", "shortMarginInitialRatio", "shortSellRate", "turnover", "turnoverRate", "type", "updateTime", "updateTimestamp", "volume", "volumeRatio" };
      private static readonly uint[] _snapshotBasicDataFieldTags = new uint[] { 306, 233, 145, 160, 241, 249, 153, 168, 321, 97, 176, 200, 65, 265, 281, 24, 89, 34, 129, 193, 40, 81, 273, 289, 185, 73, 298, 49, 312, 10, 216, 225, 209, 113, 121, 16, 58, 137, 104, 257 };
      public static SnapshotBasicData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override SnapshotBasicData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override SnapshotBasicData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<SnapshotBasicData, SnapshotBasicData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_SnapshotBasicData__FieldAccessorTable; }
      }
      
      public const int SecurityFieldNumber = 1;
      private bool hasSecurity;
      private global::Futu.OpenApi.Pb.QotCommon.Security security_;
      public bool HasSecurity {
        get { return hasSecurity; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Security {
        get { return security_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int TypeFieldNumber = 2;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int IsSuspendFieldNumber = 3;
      private bool hasIsSuspend;
      private bool isSuspend_;
      public bool HasIsSuspend {
        get { return hasIsSuspend; }
      }
      public bool IsSuspend {
        get { return isSuspend_; }
      }
      
      public const int ListTimeFieldNumber = 4;
      private bool hasListTime;
      private string listTime_ = "";
      public bool HasListTime {
        get { return hasListTime; }
      }
      public string ListTime {
        get { return listTime_; }
      }
      
      public const int LotSizeFieldNumber = 5;
      private bool hasLotSize;
      private int lotSize_;
      public bool HasLotSize {
        get { return hasLotSize; }
      }
      public int LotSize {
        get { return lotSize_; }
      }
      
      public const int PriceSpreadFieldNumber = 6;
      private bool hasPriceSpread;
      private double priceSpread_;
      public bool HasPriceSpread {
        get { return hasPriceSpread; }
      }
      public double PriceSpread {
        get { return priceSpread_; }
      }
      
      public const int UpdateTimeFieldNumber = 7;
      private bool hasUpdateTime;
      private string updateTime_ = "";
      public bool HasUpdateTime {
        get { return hasUpdateTime; }
      }
      public string UpdateTime {
        get { return updateTime_; }
      }
      
      public const int HighPriceFieldNumber = 8;
      private bool hasHighPrice;
      private double highPrice_;
      public bool HasHighPrice {
        get { return hasHighPrice; }
      }
      public double HighPrice {
        get { return highPrice_; }
      }
      
      public const int OpenPriceFieldNumber = 9;
      private bool hasOpenPrice;
      private double openPrice_;
      public bool HasOpenPrice {
        get { return hasOpenPrice; }
      }
      public double OpenPrice {
        get { return openPrice_; }
      }
      
      public const int LowPriceFieldNumber = 10;
      private bool hasLowPrice;
      private double lowPrice_;
      public bool HasLowPrice {
        get { return hasLowPrice; }
      }
      public double LowPrice {
        get { return lowPrice_; }
      }
      
      public const int LastClosePriceFieldNumber = 11;
      private bool hasLastClosePrice;
      private double lastClosePrice_;
      public bool HasLastClosePrice {
        get { return hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return lastClosePrice_; }
      }
      
      public const int CurPriceFieldNumber = 12;
      private bool hasCurPrice;
      private double curPrice_;
      public bool HasCurPrice {
        get { return hasCurPrice; }
      }
      public double CurPrice {
        get { return curPrice_; }
      }
      
      public const int VolumeFieldNumber = 13;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 14;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int TurnoverRateFieldNumber = 15;
      private bool hasTurnoverRate;
      private double turnoverRate_;
      public bool HasTurnoverRate {
        get { return hasTurnoverRate; }
      }
      public double TurnoverRate {
        get { return turnoverRate_; }
      }
      
      public const int ListTimestampFieldNumber = 16;
      private bool hasListTimestamp;
      private double listTimestamp_;
      public bool HasListTimestamp {
        get { return hasListTimestamp; }
      }
      public double ListTimestamp {
        get { return listTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 17;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int AskPriceFieldNumber = 18;
      private bool hasAskPrice;
      private double askPrice_;
      public bool HasAskPrice {
        get { return hasAskPrice; }
      }
      public double AskPrice {
        get { return askPrice_; }
      }
      
      public const int BidPriceFieldNumber = 19;
      private bool hasBidPrice;
      private double bidPrice_;
      public bool HasBidPrice {
        get { return hasBidPrice; }
      }
      public double BidPrice {
        get { return bidPrice_; }
      }
      
      public const int AskVolFieldNumber = 20;
      private bool hasAskVol;
      private long askVol_;
      public bool HasAskVol {
        get { return hasAskVol; }
      }
      public long AskVol {
        get { return askVol_; }
      }
      
      public const int BidVolFieldNumber = 21;
      private bool hasBidVol;
      private long bidVol_;
      public bool HasBidVol {
        get { return hasBidVol; }
      }
      public long BidVol {
        get { return bidVol_; }
      }
      
      public const int EnableMarginFieldNumber = 22;
      private bool hasEnableMargin;
      private bool enableMargin_;
      public bool HasEnableMargin {
        get { return hasEnableMargin; }
      }
      public bool EnableMargin {
        get { return enableMargin_; }
      }
      
      public const int MortgageRatioFieldNumber = 23;
      private bool hasMortgageRatio;
      private double mortgageRatio_;
      public bool HasMortgageRatio {
        get { return hasMortgageRatio; }
      }
      public double MortgageRatio {
        get { return mortgageRatio_; }
      }
      
      public const int LongMarginInitialRatioFieldNumber = 24;
      private bool hasLongMarginInitialRatio;
      private double longMarginInitialRatio_;
      public bool HasLongMarginInitialRatio {
        get { return hasLongMarginInitialRatio; }
      }
      public double LongMarginInitialRatio {
        get { return longMarginInitialRatio_; }
      }
      
      public const int EnableShortSellFieldNumber = 25;
      private bool hasEnableShortSell;
      private bool enableShortSell_;
      public bool HasEnableShortSell {
        get { return hasEnableShortSell; }
      }
      public bool EnableShortSell {
        get { return enableShortSell_; }
      }
      
      public const int ShortSellRateFieldNumber = 26;
      private bool hasShortSellRate;
      private double shortSellRate_;
      public bool HasShortSellRate {
        get { return hasShortSellRate; }
      }
      public double ShortSellRate {
        get { return shortSellRate_; }
      }
      
      public const int ShortAvailableVolumeFieldNumber = 27;
      private bool hasShortAvailableVolume;
      private long shortAvailableVolume_;
      public bool HasShortAvailableVolume {
        get { return hasShortAvailableVolume; }
      }
      public long ShortAvailableVolume {
        get { return shortAvailableVolume_; }
      }
      
      public const int ShortMarginInitialRatioFieldNumber = 28;
      private bool hasShortMarginInitialRatio;
      private double shortMarginInitialRatio_;
      public bool HasShortMarginInitialRatio {
        get { return hasShortMarginInitialRatio; }
      }
      public double ShortMarginInitialRatio {
        get { return shortMarginInitialRatio_; }
      }
      
      public const int AmplitudeFieldNumber = 29;
      private bool hasAmplitude;
      private double amplitude_;
      public bool HasAmplitude {
        get { return hasAmplitude; }
      }
      public double Amplitude {
        get { return amplitude_; }
      }
      
      public const int AvgPriceFieldNumber = 30;
      private bool hasAvgPrice;
      private double avgPrice_;
      public bool HasAvgPrice {
        get { return hasAvgPrice; }
      }
      public double AvgPrice {
        get { return avgPrice_; }
      }
      
      public const int BidAskRatioFieldNumber = 31;
      private bool hasBidAskRatio;
      private double bidAskRatio_;
      public bool HasBidAskRatio {
        get { return hasBidAskRatio; }
      }
      public double BidAskRatio {
        get { return bidAskRatio_; }
      }
      
      public const int VolumeRatioFieldNumber = 32;
      private bool hasVolumeRatio;
      private double volumeRatio_;
      public bool HasVolumeRatio {
        get { return hasVolumeRatio; }
      }
      public double VolumeRatio {
        get { return volumeRatio_; }
      }
      
      public const int Highest52WeeksPriceFieldNumber = 33;
      private bool hasHighest52WeeksPrice;
      private double highest52WeeksPrice_;
      public bool HasHighest52WeeksPrice {
        get { return hasHighest52WeeksPrice; }
      }
      public double Highest52WeeksPrice {
        get { return highest52WeeksPrice_; }
      }
      
      public const int Lowest52WeeksPriceFieldNumber = 34;
      private bool hasLowest52WeeksPrice;
      private double lowest52WeeksPrice_;
      public bool HasLowest52WeeksPrice {
        get { return hasLowest52WeeksPrice; }
      }
      public double Lowest52WeeksPrice {
        get { return lowest52WeeksPrice_; }
      }
      
      public const int HighestHistoryPriceFieldNumber = 35;
      private bool hasHighestHistoryPrice;
      private double highestHistoryPrice_;
      public bool HasHighestHistoryPrice {
        get { return hasHighestHistoryPrice; }
      }
      public double HighestHistoryPrice {
        get { return highestHistoryPrice_; }
      }
      
      public const int LowestHistoryPriceFieldNumber = 36;
      private bool hasLowestHistoryPrice;
      private double lowestHistoryPrice_;
      public bool HasLowestHistoryPrice {
        get { return hasLowestHistoryPrice; }
      }
      public double LowestHistoryPrice {
        get { return lowestHistoryPrice_; }
      }
      
      public const int PreMarketFieldNumber = 37;
      private bool hasPreMarket;
      private global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData preMarket_;
      public bool HasPreMarket {
        get { return hasPreMarket; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData PreMarket {
        get { return preMarket_ ?? global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance; }
      }
      
      public const int AfterMarketFieldNumber = 38;
      private bool hasAfterMarket;
      private global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData afterMarket_;
      public bool HasAfterMarket {
        get { return hasAfterMarket; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData AfterMarket {
        get { return afterMarket_ ?? global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance; }
      }
      
      public const int SecStatusFieldNumber = 39;
      private bool hasSecStatus;
      private int secStatus_;
      public bool HasSecStatus {
        get { return hasSecStatus; }
      }
      public int SecStatus {
        get { return secStatus_; }
      }
      
      public const int ClosePrice5MinuteFieldNumber = 40;
      private bool hasClosePrice5Minute;
      private double closePrice5Minute_;
      public bool HasClosePrice5Minute {
        get { return hasClosePrice5Minute; }
      }
      public double ClosePrice5Minute {
        get { return closePrice5Minute_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSecurity) return false;
          if (!hasType) return false;
          if (!hasIsSuspend) return false;
          if (!hasListTime) return false;
          if (!hasLotSize) return false;
          if (!hasPriceSpread) return false;
          if (!hasUpdateTime) return false;
          if (!hasHighPrice) return false;
          if (!hasOpenPrice) return false;
          if (!hasLowPrice) return false;
          if (!hasLastClosePrice) return false;
          if (!hasCurPrice) return false;
          if (!hasVolume) return false;
          if (!hasTurnover) return false;
          if (!hasTurnoverRate) return false;
          if (!Security.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _snapshotBasicDataFieldNames;
        if (hasSecurity) {
          output.WriteMessage(1, field_names[29], Security);
        }
        if (hasType) {
          output.WriteInt32(2, field_names[35], Type);
        }
        if (hasIsSuspend) {
          output.WriteBool(3, field_names[15], IsSuspend);
        }
        if (hasListTime) {
          output.WriteString(4, field_names[17], ListTime);
        }
        if (hasLotSize) {
          output.WriteInt32(5, field_names[20], LotSize);
        }
        if (hasPriceSpread) {
          output.WriteDouble(6, field_names[27], PriceSpread);
        }
        if (hasUpdateTime) {
          output.WriteString(7, field_names[36], UpdateTime);
        }
        if (hasHighPrice) {
          output.WriteDouble(8, field_names[12], HighPrice);
        }
        if (hasOpenPrice) {
          output.WriteDouble(9, field_names[25], OpenPrice);
        }
        if (hasLowPrice) {
          output.WriteDouble(10, field_names[21], LowPrice);
        }
        if (hasLastClosePrice) {
          output.WriteDouble(11, field_names[16], LastClosePrice);
        }
        if (hasCurPrice) {
          output.WriteDouble(12, field_names[9], CurPrice);
        }
        if (hasVolume) {
          output.WriteInt64(13, field_names[38], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(14, field_names[33], Turnover);
        }
        if (hasTurnoverRate) {
          output.WriteDouble(15, field_names[34], TurnoverRate);
        }
        if (hasListTimestamp) {
          output.WriteDouble(16, field_names[18], ListTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(17, field_names[37], UpdateTimestamp);
        }
        if (hasAskPrice) {
          output.WriteDouble(18, field_names[2], AskPrice);
        }
        if (hasBidPrice) {
          output.WriteDouble(19, field_names[6], BidPrice);
        }
        if (hasAskVol) {
          output.WriteInt64(20, field_names[3], AskVol);
        }
        if (hasBidVol) {
          output.WriteInt64(21, field_names[7], BidVol);
        }
        if (hasEnableMargin) {
          output.WriteBool(22, field_names[10], EnableMargin);
        }
        if (hasMortgageRatio) {
          output.WriteDouble(23, field_names[24], MortgageRatio);
        }
        if (hasLongMarginInitialRatio) {
          output.WriteDouble(24, field_names[19], LongMarginInitialRatio);
        }
        if (hasEnableShortSell) {
          output.WriteBool(25, field_names[11], EnableShortSell);
        }
        if (hasShortSellRate) {
          output.WriteDouble(26, field_names[32], ShortSellRate);
        }
        if (hasShortAvailableVolume) {
          output.WriteInt64(27, field_names[30], ShortAvailableVolume);
        }
        if (hasShortMarginInitialRatio) {
          output.WriteDouble(28, field_names[31], ShortMarginInitialRatio);
        }
        if (hasAmplitude) {
          output.WriteDouble(29, field_names[1], Amplitude);
        }
        if (hasAvgPrice) {
          output.WriteDouble(30, field_names[4], AvgPrice);
        }
        if (hasBidAskRatio) {
          output.WriteDouble(31, field_names[5], BidAskRatio);
        }
        if (hasVolumeRatio) {
          output.WriteDouble(32, field_names[39], VolumeRatio);
        }
        if (hasHighest52WeeksPrice) {
          output.WriteDouble(33, field_names[13], Highest52WeeksPrice);
        }
        if (hasLowest52WeeksPrice) {
          output.WriteDouble(34, field_names[22], Lowest52WeeksPrice);
        }
        if (hasHighestHistoryPrice) {
          output.WriteDouble(35, field_names[14], HighestHistoryPrice);
        }
        if (hasLowestHistoryPrice) {
          output.WriteDouble(36, field_names[23], LowestHistoryPrice);
        }
        if (hasPreMarket) {
          output.WriteMessage(37, field_names[26], PreMarket);
        }
        if (hasAfterMarket) {
          output.WriteMessage(38, field_names[0], AfterMarket);
        }
        if (hasSecStatus) {
          output.WriteInt32(39, field_names[28], SecStatus);
        }
        if (hasClosePrice5Minute) {
          output.WriteDouble(40, field_names[8], ClosePrice5Minute);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSecurity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasIsSuspend) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsSuspend);
        }
        if (hasListTime) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ListTime);
        }
        if (hasLotSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, LotSize);
        }
        if (hasPriceSpread) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, PriceSpread);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(7, UpdateTime);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, HighPrice);
        }
        if (hasOpenPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, OpenPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, LowPrice);
        }
        if (hasLastClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, LastClosePrice);
        }
        if (hasCurPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, CurPrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(13, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, Turnover);
        }
        if (hasTurnoverRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, TurnoverRate);
        }
        if (hasListTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, ListTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, UpdateTimestamp);
        }
        if (hasAskPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, AskPrice);
        }
        if (hasBidPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, BidPrice);
        }
        if (hasAskVol) {
          size += pb::CodedOutputStream.ComputeInt64Size(20, AskVol);
        }
        if (hasBidVol) {
          size += pb::CodedOutputStream.ComputeInt64Size(21, BidVol);
        }
        if (hasEnableMargin) {
          size += pb::CodedOutputStream.ComputeBoolSize(22, EnableMargin);
        }
        if (hasMortgageRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, MortgageRatio);
        }
        if (hasLongMarginInitialRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, LongMarginInitialRatio);
        }
        if (hasEnableShortSell) {
          size += pb::CodedOutputStream.ComputeBoolSize(25, EnableShortSell);
        }
        if (hasShortSellRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, ShortSellRate);
        }
        if (hasShortAvailableVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(27, ShortAvailableVolume);
        }
        if (hasShortMarginInitialRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, ShortMarginInitialRatio);
        }
        if (hasAmplitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, Amplitude);
        }
        if (hasAvgPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, AvgPrice);
        }
        if (hasBidAskRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, BidAskRatio);
        }
        if (hasVolumeRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, VolumeRatio);
        }
        if (hasHighest52WeeksPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, Highest52WeeksPrice);
        }
        if (hasLowest52WeeksPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(34, Lowest52WeeksPrice);
        }
        if (hasHighestHistoryPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(35, HighestHistoryPrice);
        }
        if (hasLowestHistoryPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(36, LowestHistoryPrice);
        }
        if (hasPreMarket) {
          size += pb::CodedOutputStream.ComputeMessageSize(37, PreMarket);
        }
        if (hasAfterMarket) {
          size += pb::CodedOutputStream.ComputeMessageSize(38, AfterMarket);
        }
        if (hasSecStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(39, SecStatus);
        }
        if (hasClosePrice5Minute) {
          size += pb::CodedOutputStream.ComputeDoubleSize(40, ClosePrice5Minute);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static SnapshotBasicData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static SnapshotBasicData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static SnapshotBasicData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SnapshotBasicData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private SnapshotBasicData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(SnapshotBasicData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<SnapshotBasicData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(SnapshotBasicData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private SnapshotBasicData result;
        
        private SnapshotBasicData PrepareBuilder() {
          if (resultIsReadOnly) {
            SnapshotBasicData original = result;
            result = new SnapshotBasicData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override SnapshotBasicData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.Descriptor; }
        }
        
        public override SnapshotBasicData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.DefaultInstance; }
        }
        
        public override SnapshotBasicData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is SnapshotBasicData) {
            return MergeFrom((SnapshotBasicData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(SnapshotBasicData other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSecurity) {
            MergeSecurity(other.Security);
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasIsSuspend) {
            IsSuspend = other.IsSuspend;
          }
          if (other.HasListTime) {
            ListTime = other.ListTime;
          }
          if (other.HasLotSize) {
            LotSize = other.LotSize;
          }
          if (other.HasPriceSpread) {
            PriceSpread = other.PriceSpread;
          }
          if (other.HasUpdateTime) {
            UpdateTime = other.UpdateTime;
          }
          if (other.HasHighPrice) {
            HighPrice = other.HighPrice;
          }
          if (other.HasOpenPrice) {
            OpenPrice = other.OpenPrice;
          }
          if (other.HasLowPrice) {
            LowPrice = other.LowPrice;
          }
          if (other.HasLastClosePrice) {
            LastClosePrice = other.LastClosePrice;
          }
          if (other.HasCurPrice) {
            CurPrice = other.CurPrice;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasTurnoverRate) {
            TurnoverRate = other.TurnoverRate;
          }
          if (other.HasListTimestamp) {
            ListTimestamp = other.ListTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasAskPrice) {
            AskPrice = other.AskPrice;
          }
          if (other.HasBidPrice) {
            BidPrice = other.BidPrice;
          }
          if (other.HasAskVol) {
            AskVol = other.AskVol;
          }
          if (other.HasBidVol) {
            BidVol = other.BidVol;
          }
          if (other.HasEnableMargin) {
            EnableMargin = other.EnableMargin;
          }
          if (other.HasMortgageRatio) {
            MortgageRatio = other.MortgageRatio;
          }
          if (other.HasLongMarginInitialRatio) {
            LongMarginInitialRatio = other.LongMarginInitialRatio;
          }
          if (other.HasEnableShortSell) {
            EnableShortSell = other.EnableShortSell;
          }
          if (other.HasShortSellRate) {
            ShortSellRate = other.ShortSellRate;
          }
          if (other.HasShortAvailableVolume) {
            ShortAvailableVolume = other.ShortAvailableVolume;
          }
          if (other.HasShortMarginInitialRatio) {
            ShortMarginInitialRatio = other.ShortMarginInitialRatio;
          }
          if (other.HasAmplitude) {
            Amplitude = other.Amplitude;
          }
          if (other.HasAvgPrice) {
            AvgPrice = other.AvgPrice;
          }
          if (other.HasBidAskRatio) {
            BidAskRatio = other.BidAskRatio;
          }
          if (other.HasVolumeRatio) {
            VolumeRatio = other.VolumeRatio;
          }
          if (other.HasHighest52WeeksPrice) {
            Highest52WeeksPrice = other.Highest52WeeksPrice;
          }
          if (other.HasLowest52WeeksPrice) {
            Lowest52WeeksPrice = other.Lowest52WeeksPrice;
          }
          if (other.HasHighestHistoryPrice) {
            HighestHistoryPrice = other.HighestHistoryPrice;
          }
          if (other.HasLowestHistoryPrice) {
            LowestHistoryPrice = other.LowestHistoryPrice;
          }
          if (other.HasPreMarket) {
            MergePreMarket(other.PreMarket);
          }
          if (other.HasAfterMarket) {
            MergeAfterMarket(other.AfterMarket);
          }
          if (other.HasSecStatus) {
            SecStatus = other.SecStatus;
          }
          if (other.HasClosePrice5Minute) {
            ClosePrice5Minute = other.ClosePrice5Minute;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_snapshotBasicDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _snapshotBasicDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasSecurity) {
                  subBuilder.MergeFrom(Security);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Security = subBuilder.BuildPartial();
                break;
              }
              case 16: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 24: {
                result.hasIsSuspend = input.ReadBool(ref result.isSuspend_);
                break;
              }
              case 34: {
                result.hasListTime = input.ReadString(ref result.listTime_);
                break;
              }
              case 40: {
                result.hasLotSize = input.ReadInt32(ref result.lotSize_);
                break;
              }
              case 49: {
                result.hasPriceSpread = input.ReadDouble(ref result.priceSpread_);
                break;
              }
              case 58: {
                result.hasUpdateTime = input.ReadString(ref result.updateTime_);
                break;
              }
              case 65: {
                result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
                break;
              }
              case 73: {
                result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
                break;
              }
              case 81: {
                result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
                break;
              }
              case 89: {
                result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
                break;
              }
              case 97: {
                result.hasCurPrice = input.ReadDouble(ref result.curPrice_);
                break;
              }
              case 104: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 113: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 121: {
                result.hasTurnoverRate = input.ReadDouble(ref result.turnoverRate_);
                break;
              }
              case 129: {
                result.hasListTimestamp = input.ReadDouble(ref result.listTimestamp_);
                break;
              }
              case 137: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 145: {
                result.hasAskPrice = input.ReadDouble(ref result.askPrice_);
                break;
              }
              case 153: {
                result.hasBidPrice = input.ReadDouble(ref result.bidPrice_);
                break;
              }
              case 160: {
                result.hasAskVol = input.ReadInt64(ref result.askVol_);
                break;
              }
              case 168: {
                result.hasBidVol = input.ReadInt64(ref result.bidVol_);
                break;
              }
              case 176: {
                result.hasEnableMargin = input.ReadBool(ref result.enableMargin_);
                break;
              }
              case 185: {
                result.hasMortgageRatio = input.ReadDouble(ref result.mortgageRatio_);
                break;
              }
              case 193: {
                result.hasLongMarginInitialRatio = input.ReadDouble(ref result.longMarginInitialRatio_);
                break;
              }
              case 200: {
                result.hasEnableShortSell = input.ReadBool(ref result.enableShortSell_);
                break;
              }
              case 209: {
                result.hasShortSellRate = input.ReadDouble(ref result.shortSellRate_);
                break;
              }
              case 216: {
                result.hasShortAvailableVolume = input.ReadInt64(ref result.shortAvailableVolume_);
                break;
              }
              case 225: {
                result.hasShortMarginInitialRatio = input.ReadDouble(ref result.shortMarginInitialRatio_);
                break;
              }
              case 233: {
                result.hasAmplitude = input.ReadDouble(ref result.amplitude_);
                break;
              }
              case 241: {
                result.hasAvgPrice = input.ReadDouble(ref result.avgPrice_);
                break;
              }
              case 249: {
                result.hasBidAskRatio = input.ReadDouble(ref result.bidAskRatio_);
                break;
              }
              case 257: {
                result.hasVolumeRatio = input.ReadDouble(ref result.volumeRatio_);
                break;
              }
              case 265: {
                result.hasHighest52WeeksPrice = input.ReadDouble(ref result.highest52WeeksPrice_);
                break;
              }
              case 273: {
                result.hasLowest52WeeksPrice = input.ReadDouble(ref result.lowest52WeeksPrice_);
                break;
              }
              case 281: {
                result.hasHighestHistoryPrice = input.ReadDouble(ref result.highestHistoryPrice_);
                break;
              }
              case 289: {
                result.hasLowestHistoryPrice = input.ReadDouble(ref result.lowestHistoryPrice_);
                break;
              }
              case 298: {
                global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder();
                if (result.hasPreMarket) {
                  subBuilder.MergeFrom(PreMarket);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                PreMarket = subBuilder.BuildPartial();
                break;
              }
              case 306: {
                global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder();
                if (result.hasAfterMarket) {
                  subBuilder.MergeFrom(AfterMarket);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                AfterMarket = subBuilder.BuildPartial();
                break;
              }
              case 312: {
                result.hasSecStatus = input.ReadInt32(ref result.secStatus_);
                break;
              }
              case 321: {
                result.hasClosePrice5Minute = input.ReadDouble(ref result.closePrice5Minute_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSecurity {
         get { return result.hasSecurity; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Security {
          get { return result.Security; }
          set { SetSecurity(value); }
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = value;
          return this;
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSecurity &&
              result.security_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.security_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
          } else {
            result.security_ = value;
          }
          result.hasSecurity = true;
          return this;
        }
        public Builder ClearSecurity() {
          PrepareBuilder();
          result.hasSecurity = false;
          result.security_ = null;
          return this;
        }
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasIsSuspend {
          get { return result.hasIsSuspend; }
        }
        public bool IsSuspend {
          get { return result.IsSuspend; }
          set { SetIsSuspend(value); }
        }
        public Builder SetIsSuspend(bool value) {
          PrepareBuilder();
          result.hasIsSuspend = true;
          result.isSuspend_ = value;
          return this;
        }
        public Builder ClearIsSuspend() {
          PrepareBuilder();
          result.hasIsSuspend = false;
          result.isSuspend_ = false;
          return this;
        }
        
        public bool HasListTime {
          get { return result.hasListTime; }
        }
        public string ListTime {
          get { return result.ListTime; }
          set { SetListTime(value); }
        }
        public Builder SetListTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasListTime = true;
          result.listTime_ = value;
          return this;
        }
        public Builder ClearListTime() {
          PrepareBuilder();
          result.hasListTime = false;
          result.listTime_ = "";
          return this;
        }
        
        public bool HasLotSize {
          get { return result.hasLotSize; }
        }
        public int LotSize {
          get { return result.LotSize; }
          set { SetLotSize(value); }
        }
        public Builder SetLotSize(int value) {
          PrepareBuilder();
          result.hasLotSize = true;
          result.lotSize_ = value;
          return this;
        }
        public Builder ClearLotSize() {
          PrepareBuilder();
          result.hasLotSize = false;
          result.lotSize_ = 0;
          return this;
        }
        
        public bool HasPriceSpread {
          get { return result.hasPriceSpread; }
        }
        public double PriceSpread {
          get { return result.PriceSpread; }
          set { SetPriceSpread(value); }
        }
        public Builder SetPriceSpread(double value) {
          PrepareBuilder();
          result.hasPriceSpread = true;
          result.priceSpread_ = value;
          return this;
        }
        public Builder ClearPriceSpread() {
          PrepareBuilder();
          result.hasPriceSpread = false;
          result.priceSpread_ = 0D;
          return this;
        }
        
        public bool HasUpdateTime {
          get { return result.hasUpdateTime; }
        }
        public string UpdateTime {
          get { return result.UpdateTime; }
          set { SetUpdateTime(value); }
        }
        public Builder SetUpdateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasUpdateTime = true;
          result.updateTime_ = value;
          return this;
        }
        public Builder ClearUpdateTime() {
          PrepareBuilder();
          result.hasUpdateTime = false;
          result.updateTime_ = "";
          return this;
        }
        
        public bool HasHighPrice {
          get { return result.hasHighPrice; }
        }
        public double HighPrice {
          get { return result.HighPrice; }
          set { SetHighPrice(value); }
        }
        public Builder SetHighPrice(double value) {
          PrepareBuilder();
          result.hasHighPrice = true;
          result.highPrice_ = value;
          return this;
        }
        public Builder ClearHighPrice() {
          PrepareBuilder();
          result.hasHighPrice = false;
          result.highPrice_ = 0D;
          return this;
        }
        
        public bool HasOpenPrice {
          get { return result.hasOpenPrice; }
        }
        public double OpenPrice {
          get { return result.OpenPrice; }
          set { SetOpenPrice(value); }
        }
        public Builder SetOpenPrice(double value) {
          PrepareBuilder();
          result.hasOpenPrice = true;
          result.openPrice_ = value;
          return this;
        }
        public Builder ClearOpenPrice() {
          PrepareBuilder();
          result.hasOpenPrice = false;
          result.openPrice_ = 0D;
          return this;
        }
        
        public bool HasLowPrice {
          get { return result.hasLowPrice; }
        }
        public double LowPrice {
          get { return result.LowPrice; }
          set { SetLowPrice(value); }
        }
        public Builder SetLowPrice(double value) {
          PrepareBuilder();
          result.hasLowPrice = true;
          result.lowPrice_ = value;
          return this;
        }
        public Builder ClearLowPrice() {
          PrepareBuilder();
          result.hasLowPrice = false;
          result.lowPrice_ = 0D;
          return this;
        }
        
        public bool HasLastClosePrice {
          get { return result.hasLastClosePrice; }
        }
        public double LastClosePrice {
          get { return result.LastClosePrice; }
          set { SetLastClosePrice(value); }
        }
        public Builder SetLastClosePrice(double value) {
          PrepareBuilder();
          result.hasLastClosePrice = true;
          result.lastClosePrice_ = value;
          return this;
        }
        public Builder ClearLastClosePrice() {
          PrepareBuilder();
          result.hasLastClosePrice = false;
          result.lastClosePrice_ = 0D;
          return this;
        }
        
        public bool HasCurPrice {
          get { return result.hasCurPrice; }
        }
        public double CurPrice {
          get { return result.CurPrice; }
          set { SetCurPrice(value); }
        }
        public Builder SetCurPrice(double value) {
          PrepareBuilder();
          result.hasCurPrice = true;
          result.curPrice_ = value;
          return this;
        }
        public Builder ClearCurPrice() {
          PrepareBuilder();
          result.hasCurPrice = false;
          result.curPrice_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasTurnoverRate {
          get { return result.hasTurnoverRate; }
        }
        public double TurnoverRate {
          get { return result.TurnoverRate; }
          set { SetTurnoverRate(value); }
        }
        public Builder SetTurnoverRate(double value) {
          PrepareBuilder();
          result.hasTurnoverRate = true;
          result.turnoverRate_ = value;
          return this;
        }
        public Builder ClearTurnoverRate() {
          PrepareBuilder();
          result.hasTurnoverRate = false;
          result.turnoverRate_ = 0D;
          return this;
        }
        
        public bool HasListTimestamp {
          get { return result.hasListTimestamp; }
        }
        public double ListTimestamp {
          get { return result.ListTimestamp; }
          set { SetListTimestamp(value); }
        }
        public Builder SetListTimestamp(double value) {
          PrepareBuilder();
          result.hasListTimestamp = true;
          result.listTimestamp_ = value;
          return this;
        }
        public Builder ClearListTimestamp() {
          PrepareBuilder();
          result.hasListTimestamp = false;
          result.listTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasAskPrice {
          get { return result.hasAskPrice; }
        }
        public double AskPrice {
          get { return result.AskPrice; }
          set { SetAskPrice(value); }
        }
        public Builder SetAskPrice(double value) {
          PrepareBuilder();
          result.hasAskPrice = true;
          result.askPrice_ = value;
          return this;
        }
        public Builder ClearAskPrice() {
          PrepareBuilder();
          result.hasAskPrice = false;
          result.askPrice_ = 0D;
          return this;
        }
        
        public bool HasBidPrice {
          get { return result.hasBidPrice; }
        }
        public double BidPrice {
          get { return result.BidPrice; }
          set { SetBidPrice(value); }
        }
        public Builder SetBidPrice(double value) {
          PrepareBuilder();
          result.hasBidPrice = true;
          result.bidPrice_ = value;
          return this;
        }
        public Builder ClearBidPrice() {
          PrepareBuilder();
          result.hasBidPrice = false;
          result.bidPrice_ = 0D;
          return this;
        }
        
        public bool HasAskVol {
          get { return result.hasAskVol; }
        }
        public long AskVol {
          get { return result.AskVol; }
          set { SetAskVol(value); }
        }
        public Builder SetAskVol(long value) {
          PrepareBuilder();
          result.hasAskVol = true;
          result.askVol_ = value;
          return this;
        }
        public Builder ClearAskVol() {
          PrepareBuilder();
          result.hasAskVol = false;
          result.askVol_ = 0L;
          return this;
        }
        
        public bool HasBidVol {
          get { return result.hasBidVol; }
        }
        public long BidVol {
          get { return result.BidVol; }
          set { SetBidVol(value); }
        }
        public Builder SetBidVol(long value) {
          PrepareBuilder();
          result.hasBidVol = true;
          result.bidVol_ = value;
          return this;
        }
        public Builder ClearBidVol() {
          PrepareBuilder();
          result.hasBidVol = false;
          result.bidVol_ = 0L;
          return this;
        }
        
        public bool HasEnableMargin {
          get { return result.hasEnableMargin; }
        }
        public bool EnableMargin {
          get { return result.EnableMargin; }
          set { SetEnableMargin(value); }
        }
        public Builder SetEnableMargin(bool value) {
          PrepareBuilder();
          result.hasEnableMargin = true;
          result.enableMargin_ = value;
          return this;
        }
        public Builder ClearEnableMargin() {
          PrepareBuilder();
          result.hasEnableMargin = false;
          result.enableMargin_ = false;
          return this;
        }
        
        public bool HasMortgageRatio {
          get { return result.hasMortgageRatio; }
        }
        public double MortgageRatio {
          get { return result.MortgageRatio; }
          set { SetMortgageRatio(value); }
        }
        public Builder SetMortgageRatio(double value) {
          PrepareBuilder();
          result.hasMortgageRatio = true;
          result.mortgageRatio_ = value;
          return this;
        }
        public Builder ClearMortgageRatio() {
          PrepareBuilder();
          result.hasMortgageRatio = false;
          result.mortgageRatio_ = 0D;
          return this;
        }
        
        public bool HasLongMarginInitialRatio {
          get { return result.hasLongMarginInitialRatio; }
        }
        public double LongMarginInitialRatio {
          get { return result.LongMarginInitialRatio; }
          set { SetLongMarginInitialRatio(value); }
        }
        public Builder SetLongMarginInitialRatio(double value) {
          PrepareBuilder();
          result.hasLongMarginInitialRatio = true;
          result.longMarginInitialRatio_ = value;
          return this;
        }
        public Builder ClearLongMarginInitialRatio() {
          PrepareBuilder();
          result.hasLongMarginInitialRatio = false;
          result.longMarginInitialRatio_ = 0D;
          return this;
        }
        
        public bool HasEnableShortSell {
          get { return result.hasEnableShortSell; }
        }
        public bool EnableShortSell {
          get { return result.EnableShortSell; }
          set { SetEnableShortSell(value); }
        }
        public Builder SetEnableShortSell(bool value) {
          PrepareBuilder();
          result.hasEnableShortSell = true;
          result.enableShortSell_ = value;
          return this;
        }
        public Builder ClearEnableShortSell() {
          PrepareBuilder();
          result.hasEnableShortSell = false;
          result.enableShortSell_ = false;
          return this;
        }
        
        public bool HasShortSellRate {
          get { return result.hasShortSellRate; }
        }
        public double ShortSellRate {
          get { return result.ShortSellRate; }
          set { SetShortSellRate(value); }
        }
        public Builder SetShortSellRate(double value) {
          PrepareBuilder();
          result.hasShortSellRate = true;
          result.shortSellRate_ = value;
          return this;
        }
        public Builder ClearShortSellRate() {
          PrepareBuilder();
          result.hasShortSellRate = false;
          result.shortSellRate_ = 0D;
          return this;
        }
        
        public bool HasShortAvailableVolume {
          get { return result.hasShortAvailableVolume; }
        }
        public long ShortAvailableVolume {
          get { return result.ShortAvailableVolume; }
          set { SetShortAvailableVolume(value); }
        }
        public Builder SetShortAvailableVolume(long value) {
          PrepareBuilder();
          result.hasShortAvailableVolume = true;
          result.shortAvailableVolume_ = value;
          return this;
        }
        public Builder ClearShortAvailableVolume() {
          PrepareBuilder();
          result.hasShortAvailableVolume = false;
          result.shortAvailableVolume_ = 0L;
          return this;
        }
        
        public bool HasShortMarginInitialRatio {
          get { return result.hasShortMarginInitialRatio; }
        }
        public double ShortMarginInitialRatio {
          get { return result.ShortMarginInitialRatio; }
          set { SetShortMarginInitialRatio(value); }
        }
        public Builder SetShortMarginInitialRatio(double value) {
          PrepareBuilder();
          result.hasShortMarginInitialRatio = true;
          result.shortMarginInitialRatio_ = value;
          return this;
        }
        public Builder ClearShortMarginInitialRatio() {
          PrepareBuilder();
          result.hasShortMarginInitialRatio = false;
          result.shortMarginInitialRatio_ = 0D;
          return this;
        }
        
        public bool HasAmplitude {
          get { return result.hasAmplitude; }
        }
        public double Amplitude {
          get { return result.Amplitude; }
          set { SetAmplitude(value); }
        }
        public Builder SetAmplitude(double value) {
          PrepareBuilder();
          result.hasAmplitude = true;
          result.amplitude_ = value;
          return this;
        }
        public Builder ClearAmplitude() {
          PrepareBuilder();
          result.hasAmplitude = false;
          result.amplitude_ = 0D;
          return this;
        }
        
        public bool HasAvgPrice {
          get { return result.hasAvgPrice; }
        }
        public double AvgPrice {
          get { return result.AvgPrice; }
          set { SetAvgPrice(value); }
        }
        public Builder SetAvgPrice(double value) {
          PrepareBuilder();
          result.hasAvgPrice = true;
          result.avgPrice_ = value;
          return this;
        }
        public Builder ClearAvgPrice() {
          PrepareBuilder();
          result.hasAvgPrice = false;
          result.avgPrice_ = 0D;
          return this;
        }
        
        public bool HasBidAskRatio {
          get { return result.hasBidAskRatio; }
        }
        public double BidAskRatio {
          get { return result.BidAskRatio; }
          set { SetBidAskRatio(value); }
        }
        public Builder SetBidAskRatio(double value) {
          PrepareBuilder();
          result.hasBidAskRatio = true;
          result.bidAskRatio_ = value;
          return this;
        }
        public Builder ClearBidAskRatio() {
          PrepareBuilder();
          result.hasBidAskRatio = false;
          result.bidAskRatio_ = 0D;
          return this;
        }
        
        public bool HasVolumeRatio {
          get { return result.hasVolumeRatio; }
        }
        public double VolumeRatio {
          get { return result.VolumeRatio; }
          set { SetVolumeRatio(value); }
        }
        public Builder SetVolumeRatio(double value) {
          PrepareBuilder();
          result.hasVolumeRatio = true;
          result.volumeRatio_ = value;
          return this;
        }
        public Builder ClearVolumeRatio() {
          PrepareBuilder();
          result.hasVolumeRatio = false;
          result.volumeRatio_ = 0D;
          return this;
        }
        
        public bool HasHighest52WeeksPrice {
          get { return result.hasHighest52WeeksPrice; }
        }
        public double Highest52WeeksPrice {
          get { return result.Highest52WeeksPrice; }
          set { SetHighest52WeeksPrice(value); }
        }
        public Builder SetHighest52WeeksPrice(double value) {
          PrepareBuilder();
          result.hasHighest52WeeksPrice = true;
          result.highest52WeeksPrice_ = value;
          return this;
        }
        public Builder ClearHighest52WeeksPrice() {
          PrepareBuilder();
          result.hasHighest52WeeksPrice = false;
          result.highest52WeeksPrice_ = 0D;
          return this;
        }
        
        public bool HasLowest52WeeksPrice {
          get { return result.hasLowest52WeeksPrice; }
        }
        public double Lowest52WeeksPrice {
          get { return result.Lowest52WeeksPrice; }
          set { SetLowest52WeeksPrice(value); }
        }
        public Builder SetLowest52WeeksPrice(double value) {
          PrepareBuilder();
          result.hasLowest52WeeksPrice = true;
          result.lowest52WeeksPrice_ = value;
          return this;
        }
        public Builder ClearLowest52WeeksPrice() {
          PrepareBuilder();
          result.hasLowest52WeeksPrice = false;
          result.lowest52WeeksPrice_ = 0D;
          return this;
        }
        
        public bool HasHighestHistoryPrice {
          get { return result.hasHighestHistoryPrice; }
        }
        public double HighestHistoryPrice {
          get { return result.HighestHistoryPrice; }
          set { SetHighestHistoryPrice(value); }
        }
        public Builder SetHighestHistoryPrice(double value) {
          PrepareBuilder();
          result.hasHighestHistoryPrice = true;
          result.highestHistoryPrice_ = value;
          return this;
        }
        public Builder ClearHighestHistoryPrice() {
          PrepareBuilder();
          result.hasHighestHistoryPrice = false;
          result.highestHistoryPrice_ = 0D;
          return this;
        }
        
        public bool HasLowestHistoryPrice {
          get { return result.hasLowestHistoryPrice; }
        }
        public double LowestHistoryPrice {
          get { return result.LowestHistoryPrice; }
          set { SetLowestHistoryPrice(value); }
        }
        public Builder SetLowestHistoryPrice(double value) {
          PrepareBuilder();
          result.hasLowestHistoryPrice = true;
          result.lowestHistoryPrice_ = value;
          return this;
        }
        public Builder ClearLowestHistoryPrice() {
          PrepareBuilder();
          result.hasLowestHistoryPrice = false;
          result.lowestHistoryPrice_ = 0D;
          return this;
        }
        
        public bool HasPreMarket {
         get { return result.hasPreMarket; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData PreMarket {
          get { return result.PreMarket; }
          set { SetPreMarket(value); }
        }
        public Builder SetPreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPreMarket = true;
          result.preMarket_ = value;
          return this;
        }
        public Builder SetPreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPreMarket = true;
          result.preMarket_ = builderForValue.Build();
          return this;
        }
        public Builder MergePreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPreMarket &&
              result.preMarket_ != global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance) {
              result.preMarket_ = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder(result.preMarket_).MergeFrom(value).BuildPartial();
          } else {
            result.preMarket_ = value;
          }
          result.hasPreMarket = true;
          return this;
        }
        public Builder ClearPreMarket() {
          PrepareBuilder();
          result.hasPreMarket = false;
          result.preMarket_ = null;
          return this;
        }
        
        public bool HasAfterMarket {
         get { return result.hasAfterMarket; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData AfterMarket {
          get { return result.AfterMarket; }
          set { SetAfterMarket(value); }
        }
        public Builder SetAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasAfterMarket = true;
          result.afterMarket_ = value;
          return this;
        }
        public Builder SetAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasAfterMarket = true;
          result.afterMarket_ = builderForValue.Build();
          return this;
        }
        public Builder MergeAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasAfterMarket &&
              result.afterMarket_ != global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance) {
              result.afterMarket_ = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder(result.afterMarket_).MergeFrom(value).BuildPartial();
          } else {
            result.afterMarket_ = value;
          }
          result.hasAfterMarket = true;
          return this;
        }
        public Builder ClearAfterMarket() {
          PrepareBuilder();
          result.hasAfterMarket = false;
          result.afterMarket_ = null;
          return this;
        }
        
        public bool HasSecStatus {
          get { return result.hasSecStatus; }
        }
        public int SecStatus {
          get { return result.SecStatus; }
          set { SetSecStatus(value); }
        }
        public Builder SetSecStatus(int value) {
          PrepareBuilder();
          result.hasSecStatus = true;
          result.secStatus_ = value;
          return this;
        }
        public Builder ClearSecStatus() {
          PrepareBuilder();
          result.hasSecStatus = false;
          result.secStatus_ = 0;
          return this;
        }
        
        public bool HasClosePrice5Minute {
          get { return result.hasClosePrice5Minute; }
        }
        public double ClosePrice5Minute {
          get { return result.ClosePrice5Minute; }
          set { SetClosePrice5Minute(value); }
        }
        public Builder SetClosePrice5Minute(double value) {
          PrepareBuilder();
          result.hasClosePrice5Minute = true;
          result.closePrice5Minute_ = value;
          return this;
        }
        public Builder ClearClosePrice5Minute() {
          PrepareBuilder();
          result.hasClosePrice5Minute = false;
          result.closePrice5Minute_ = 0D;
          return this;
        }
      }
      static SnapshotBasicData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
      private Snapshot() { }
      private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
      private static readonly string[] _snapshotFieldNames = new string[] { "basic", "equityExData", "futureExData", "indexExData", "optionExData", "plateExData", "trustExData", "warrantExData" };
      private static readonly uint[] _snapshotFieldTags = new uint[] { 10, 18, 58, 42, 34, 50, 66, 26 };
      public static Snapshot DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Snapshot DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Snapshot ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Snapshot__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Snapshot__FieldAccessorTable; }
      }
      
      public const int BasicFieldNumber = 1;
      private bool hasBasic;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData basic_;
      public bool HasBasic {
        get { return hasBasic; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData Basic {
        get { return basic_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.DefaultInstance; }
      }
      
      public const int EquityExDataFieldNumber = 2;
      private bool hasEquityExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData equityExData_;
      public bool HasEquityExData {
        get { return hasEquityExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData EquityExData {
        get { return equityExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.DefaultInstance; }
      }
      
      public const int WarrantExDataFieldNumber = 3;
      private bool hasWarrantExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData warrantExData_;
      public bool HasWarrantExData {
        get { return hasWarrantExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData WarrantExData {
        get { return warrantExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance; }
      }
      
      public const int OptionExDataFieldNumber = 4;
      private bool hasOptionExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData optionExData_;
      public bool HasOptionExData {
        get { return hasOptionExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData OptionExData {
        get { return optionExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.DefaultInstance; }
      }
      
      public const int IndexExDataFieldNumber = 5;
      private bool hasIndexExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData indexExData_;
      public bool HasIndexExData {
        get { return hasIndexExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData IndexExData {
        get { return indexExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.DefaultInstance; }
      }
      
      public const int PlateExDataFieldNumber = 6;
      private bool hasPlateExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData plateExData_;
      public bool HasPlateExData {
        get { return hasPlateExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData PlateExData {
        get { return plateExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.DefaultInstance; }
      }
      
      public const int FutureExDataFieldNumber = 7;
      private bool hasFutureExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData futureExData_;
      public bool HasFutureExData {
        get { return hasFutureExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData FutureExData {
        get { return futureExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.DefaultInstance; }
      }
      
      public const int TrustExDataFieldNumber = 8;
      private bool hasTrustExData;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData trustExData_;
      public bool HasTrustExData {
        get { return hasTrustExData; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData TrustExData {
        get { return trustExData_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasBasic) return false;
          if (!Basic.IsInitialized) return false;
          if (HasEquityExData) {
            if (!EquityExData.IsInitialized) return false;
          }
          if (HasWarrantExData) {
            if (!WarrantExData.IsInitialized) return false;
          }
          if (HasOptionExData) {
            if (!OptionExData.IsInitialized) return false;
          }
          if (HasIndexExData) {
            if (!IndexExData.IsInitialized) return false;
          }
          if (HasPlateExData) {
            if (!PlateExData.IsInitialized) return false;
          }
          if (HasFutureExData) {
            if (!FutureExData.IsInitialized) return false;
          }
          if (HasTrustExData) {
            if (!TrustExData.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _snapshotFieldNames;
        if (hasBasic) {
          output.WriteMessage(1, field_names[0], Basic);
        }
        if (hasEquityExData) {
          output.WriteMessage(2, field_names[1], EquityExData);
        }
        if (hasWarrantExData) {
          output.WriteMessage(3, field_names[7], WarrantExData);
        }
        if (hasOptionExData) {
          output.WriteMessage(4, field_names[4], OptionExData);
        }
        if (hasIndexExData) {
          output.WriteMessage(5, field_names[3], IndexExData);
        }
        if (hasPlateExData) {
          output.WriteMessage(6, field_names[5], PlateExData);
        }
        if (hasFutureExData) {
          output.WriteMessage(7, field_names[2], FutureExData);
        }
        if (hasTrustExData) {
          output.WriteMessage(8, field_names[6], TrustExData);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBasic) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Basic);
        }
        if (hasEquityExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, EquityExData);
        }
        if (hasWarrantExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, WarrantExData);
        }
        if (hasOptionExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, OptionExData);
        }
        if (hasIndexExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, IndexExData);
        }
        if (hasPlateExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, PlateExData);
        }
        if (hasFutureExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, FutureExData);
        }
        if (hasTrustExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, TrustExData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Snapshot ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Snapshot ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Snapshot ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Snapshot ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Snapshot MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Snapshot prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Snapshot cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Snapshot result;
        
        private Snapshot PrepareBuilder() {
          if (resultIsReadOnly) {
            Snapshot original = result;
            result = new Snapshot();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Snapshot MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.Descriptor; }
        }
        
        public override Snapshot DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.DefaultInstance; }
        }
        
        public override Snapshot BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Snapshot) {
            return MergeFrom((Snapshot) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Snapshot other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBasic) {
            MergeBasic(other.Basic);
          }
          if (other.HasEquityExData) {
            MergeEquityExData(other.EquityExData);
          }
          if (other.HasWarrantExData) {
            MergeWarrantExData(other.WarrantExData);
          }
          if (other.HasOptionExData) {
            MergeOptionExData(other.OptionExData);
          }
          if (other.HasIndexExData) {
            MergeIndexExData(other.IndexExData);
          }
          if (other.HasPlateExData) {
            MergePlateExData(other.PlateExData);
          }
          if (other.HasFutureExData) {
            MergeFutureExData(other.FutureExData);
          }
          if (other.HasTrustExData) {
            MergeTrustExData(other.TrustExData);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _snapshotFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.CreateBuilder();
                if (result.hasBasic) {
                  subBuilder.MergeFrom(Basic);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Basic = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.CreateBuilder();
                if (result.hasEquityExData) {
                  subBuilder.MergeFrom(EquityExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                EquityExData = subBuilder.BuildPartial();
                break;
              }
              case 26: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.CreateBuilder();
                if (result.hasWarrantExData) {
                  subBuilder.MergeFrom(WarrantExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                WarrantExData = subBuilder.BuildPartial();
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.CreateBuilder();
                if (result.hasOptionExData) {
                  subBuilder.MergeFrom(OptionExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                OptionExData = subBuilder.BuildPartial();
                break;
              }
              case 42: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.CreateBuilder();
                if (result.hasIndexExData) {
                  subBuilder.MergeFrom(IndexExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                IndexExData = subBuilder.BuildPartial();
                break;
              }
              case 50: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.CreateBuilder();
                if (result.hasPlateExData) {
                  subBuilder.MergeFrom(PlateExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                PlateExData = subBuilder.BuildPartial();
                break;
              }
              case 58: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.CreateBuilder();
                if (result.hasFutureExData) {
                  subBuilder.MergeFrom(FutureExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                FutureExData = subBuilder.BuildPartial();
                break;
              }
              case 66: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.CreateBuilder();
                if (result.hasTrustExData) {
                  subBuilder.MergeFrom(TrustExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                TrustExData = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBasic {
         get { return result.hasBasic; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData Basic {
          get { return result.Basic; }
          set { SetBasic(value); }
        }
        public Builder SetBasic(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBasic = true;
          result.basic_ = value;
          return this;
        }
        public Builder SetBasic(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasBasic = true;
          result.basic_ = builderForValue.Build();
          return this;
        }
        public Builder MergeBasic(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasBasic &&
              result.basic_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.DefaultInstance) {
              result.basic_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.SnapshotBasicData.CreateBuilder(result.basic_).MergeFrom(value).BuildPartial();
          } else {
            result.basic_ = value;
          }
          result.hasBasic = true;
          return this;
        }
        public Builder ClearBasic() {
          PrepareBuilder();
          result.hasBasic = false;
          result.basic_ = null;
          return this;
        }
        
        public bool HasEquityExData {
         get { return result.hasEquityExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData EquityExData {
          get { return result.EquityExData; }
          set { SetEquityExData(value); }
        }
        public Builder SetEquityExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasEquityExData = true;
          result.equityExData_ = value;
          return this;
        }
        public Builder SetEquityExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasEquityExData = true;
          result.equityExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeEquityExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasEquityExData &&
              result.equityExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.DefaultInstance) {
              result.equityExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.EquitySnapshotExData.CreateBuilder(result.equityExData_).MergeFrom(value).BuildPartial();
          } else {
            result.equityExData_ = value;
          }
          result.hasEquityExData = true;
          return this;
        }
        public Builder ClearEquityExData() {
          PrepareBuilder();
          result.hasEquityExData = false;
          result.equityExData_ = null;
          return this;
        }
        
        public bool HasWarrantExData {
         get { return result.hasWarrantExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData WarrantExData {
          get { return result.WarrantExData; }
          set { SetWarrantExData(value); }
        }
        public Builder SetWarrantExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasWarrantExData = true;
          result.warrantExData_ = value;
          return this;
        }
        public Builder SetWarrantExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasWarrantExData = true;
          result.warrantExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeWarrantExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasWarrantExData &&
              result.warrantExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.DefaultInstance) {
              result.warrantExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.WarrantSnapshotExData.CreateBuilder(result.warrantExData_).MergeFrom(value).BuildPartial();
          } else {
            result.warrantExData_ = value;
          }
          result.hasWarrantExData = true;
          return this;
        }
        public Builder ClearWarrantExData() {
          PrepareBuilder();
          result.hasWarrantExData = false;
          result.warrantExData_ = null;
          return this;
        }
        
        public bool HasOptionExData {
         get { return result.hasOptionExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData OptionExData {
          get { return result.OptionExData; }
          set { SetOptionExData(value); }
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = value;
          return this;
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOptionExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOptionExData &&
              result.optionExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.DefaultInstance) {
              result.optionExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.OptionSnapshotExData.CreateBuilder(result.optionExData_).MergeFrom(value).BuildPartial();
          } else {
            result.optionExData_ = value;
          }
          result.hasOptionExData = true;
          return this;
        }
        public Builder ClearOptionExData() {
          PrepareBuilder();
          result.hasOptionExData = false;
          result.optionExData_ = null;
          return this;
        }
        
        public bool HasIndexExData {
         get { return result.hasIndexExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData IndexExData {
          get { return result.IndexExData; }
          set { SetIndexExData(value); }
        }
        public Builder SetIndexExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasIndexExData = true;
          result.indexExData_ = value;
          return this;
        }
        public Builder SetIndexExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasIndexExData = true;
          result.indexExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeIndexExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasIndexExData &&
              result.indexExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.DefaultInstance) {
              result.indexExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.IndexSnapshotExData.CreateBuilder(result.indexExData_).MergeFrom(value).BuildPartial();
          } else {
            result.indexExData_ = value;
          }
          result.hasIndexExData = true;
          return this;
        }
        public Builder ClearIndexExData() {
          PrepareBuilder();
          result.hasIndexExData = false;
          result.indexExData_ = null;
          return this;
        }
        
        public bool HasPlateExData {
         get { return result.hasPlateExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData PlateExData {
          get { return result.PlateExData; }
          set { SetPlateExData(value); }
        }
        public Builder SetPlateExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPlateExData = true;
          result.plateExData_ = value;
          return this;
        }
        public Builder SetPlateExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPlateExData = true;
          result.plateExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergePlateExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPlateExData &&
              result.plateExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.DefaultInstance) {
              result.plateExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.PlateSnapshotExData.CreateBuilder(result.plateExData_).MergeFrom(value).BuildPartial();
          } else {
            result.plateExData_ = value;
          }
          result.hasPlateExData = true;
          return this;
        }
        public Builder ClearPlateExData() {
          PrepareBuilder();
          result.hasPlateExData = false;
          result.plateExData_ = null;
          return this;
        }
        
        public bool HasFutureExData {
         get { return result.hasFutureExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData FutureExData {
          get { return result.FutureExData; }
          set { SetFutureExData(value); }
        }
        public Builder SetFutureExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasFutureExData = true;
          result.futureExData_ = value;
          return this;
        }
        public Builder SetFutureExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasFutureExData = true;
          result.futureExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeFutureExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasFutureExData &&
              result.futureExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.DefaultInstance) {
              result.futureExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.FutureSnapshotExData.CreateBuilder(result.futureExData_).MergeFrom(value).BuildPartial();
          } else {
            result.futureExData_ = value;
          }
          result.hasFutureExData = true;
          return this;
        }
        public Builder ClearFutureExData() {
          PrepareBuilder();
          result.hasFutureExData = false;
          result.futureExData_ = null;
          return this;
        }
        
        public bool HasTrustExData {
         get { return result.hasTrustExData; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData TrustExData {
          get { return result.TrustExData; }
          set { SetTrustExData(value); }
        }
        public Builder SetTrustExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTrustExData = true;
          result.trustExData_ = value;
          return this;
        }
        public Builder SetTrustExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasTrustExData = true;
          result.trustExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeTrustExData(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasTrustExData &&
              result.trustExData_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.DefaultInstance) {
              result.trustExData_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.TrustSnapshotExData.CreateBuilder(result.trustExData_).MergeFrom(value).BuildPartial();
          } else {
            result.trustExData_ = value;
          }
          result.hasTrustExData = true;
          return this;
        }
        public Builder ClearTrustExData() {
          PrepareBuilder();
          result.hasTrustExData = false;
          result.trustExData_ = null;
          return this;
        }
      }
      static Snapshot() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "snapshotList" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 10 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_S2C__FieldAccessorTable; }
      }
      
      public const int SnapshotListFieldNumber = 1;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot> snapshotList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot>();
      public scg::IList<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot> SnapshotListList {
        get { return snapshotList_; }
      }
      public int SnapshotListCount {
        get { return snapshotList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot GetSnapshotList(int index) {
        return snapshotList_[index];
      }
      
      public override bool IsInitialized {
        get {
          foreach (global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot element in SnapshotListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (snapshotList_.Count > 0) {
          output.WriteMessageArray(1, field_names[0], snapshotList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot element in SnapshotListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        snapshotList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.snapshotList_.Count != 0) {
            result.snapshotList_.Add(other.snapshotList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                input.ReadMessageArray(tag, field_name, result.snapshotList_, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot> SnapshotListList {
          get { return PrepareBuilder().snapshotList_; }
        }
        public int SnapshotListCount {
          get { return result.SnapshotListCount; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot GetSnapshotList(int index) {
          return result.GetSnapshotList(index);
        }
        public Builder SetSnapshotList(int index, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.snapshotList_[index] = value;
          return this;
        }
        public Builder SetSnapshotList(int index, global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.snapshotList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddSnapshotList(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.snapshotList_.Add(value);
          return this;
        }
        public Builder AddSnapshotList(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.snapshotList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeSnapshotList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Snapshot> values) {
          PrepareBuilder();
          result.snapshotList_.Add(values);
          return this;
        }
        public Builder ClearSnapshotList() {
          PrepareBuilder();
          result.snapshotList_.Clear();
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.internal__static_Qot_GetSecuritySnapshot_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotGetSecuritySnapshot.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
